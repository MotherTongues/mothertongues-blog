<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mother Tongues Blog</title>
    <description>Smashing the lore of language technology!</description>
    <link>https://blog.mothertongues.org/</link>
    <atom:link href="https://blog.mothertongues.org/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 06 Jun 2023 21:15:17 +0000</pubDate>
    <lastBuildDate>Tue, 06 Jun 2023 21:15:17 +0000</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>Typesetting Syllabics (and More) in LaTeX</title>
        <description>&lt;h1 id=&quot;tldr&quot;&gt;TL;DR&lt;/h1&gt;

&lt;p&gt;This post describes one way to use certain Inuktut syllabics fonts when writing documents in LaTeX, along with some other LaTeX tips.&lt;/p&gt;

&lt;h1 id=&quot;what-you-need-to-know-to-understand-this-post&quot;&gt;What you need to know to understand this post&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Knowledge of &lt;a href=&quot;https://www.latex-project.org/&quot;&gt;LaTeX&lt;/a&gt; (for typesetting documents).&lt;/li&gt;
  &lt;li&gt;Knowledge of a typesetting system for LaTeX, like &lt;a href=&quot;https://tug.org/begin.html&quot;&gt;TeX&lt;/a&gt;, or an editor like &lt;a href=&quot;https://www.overleaf.com/&quot;&gt;Overleaf&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;what-is-needed-to-replicate-the-main-content-in-the-post&quot;&gt;What is needed to replicate the main content in the post?&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;Have downloaded the font you want to use (we’ll discuss this next).&lt;/li&gt;
  &lt;li&gt;Have access to a LaTeX typesetting system or an editor like Overleaf that allows you to compile using XeLaTeX (rather than pdfLaTeX).&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;typesetting-syllabics-and-more-in-latex&quot;&gt;Typesetting Syllabics (and More) in LaTeX&lt;/h1&gt;

&lt;p&gt;In an earlier blog post, you saw how to &lt;a href=&quot;https://blog.mothertongues.org/tutorial-syllabics-fonts/&quot;&gt;display various fonts in web browsers&lt;/a&gt;. Here, we’ll talk about how to use fonts like Pigiarniq in documents that are being typeset in LaTeX (e.g., many academic journals and conference papers).&lt;/p&gt;

&lt;p&gt;Specifically, you’ll see one way to typeset text written in ᖃᓂᐅᔮᖅᐸᐃᑦ (qaniujaaqpait; Inuktut Syllabics) using LaTeX, XeLaTeX, and the Pigiarniq font family. Our example focuses on a scenario where you’re writing in a mix of fonts and orthographies, but it can be modified for text written entirely in syllabics.&lt;/p&gt;

&lt;p&gt;You’ll also see some variations of these techniques that work for other characters and fonts.&lt;/p&gt;

&lt;p&gt;Read through for more details, or skip ahead to the &lt;a href=&quot;#review-quick-start&quot;&gt;Review/Quick Start&lt;/a&gt; section if you prefer.&lt;/p&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;
&lt;p&gt;We’ll demonstrate this using &lt;em&gt;Pigiarniq&lt;/em&gt;, a font which can be downloaded from the &lt;a href=&quot;https://www.tiro.com/syllabics/resources/index.html&quot;&gt;Tiro Typeworks website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you want to follow along, first download the Pigiarniq zip file and extract the font files. For this demonstration, we’ll start with &lt;code class=&quot;highlighter-rouge&quot;&gt;Pigiarniq Regular.ttf&lt;/code&gt;. If you are using a different font, you may want to read the detailed instructions for using new fonts in &lt;a href=&quot;https://www.overleaf.com/learn/latex/Questions/I_have_a_custom_font_I%27d_like_to_load_to_my_document._How_can_I_do_this%3F&quot;&gt;Overleaf’s instructions on using custom fonts&lt;/a&gt;. It explains different approaches to using new fonts, and explains why some fonts can be compiled out of the box with pdfLaTeX and others can’t. If you’re not sure whether your font can be easily compiled or not, give it a read!&lt;/p&gt;

&lt;p&gt;Next, you’ll want to open your LaTeX editor of choice. If you’re using Overleaf (where we tested this approach), you can directly upload the &lt;code class=&quot;highlighter-rouge&quot;&gt;Pigiarniq Regular.ttf&lt;/code&gt; file into your project. Other LaTeX editors may need you to specify a path to where &lt;code class=&quot;highlighter-rouge&quot;&gt;Pigiarniq Regular.ttf&lt;/code&gt; is stored on your computer, or you may also be able to simply put it in the folder with your LaTeX files.&lt;/p&gt;

&lt;p&gt;In the next section, you’ll see code for a minimal working example. We’ll walk through it step-by-step below. If you want to start right away, copy that code into a new file (named something like &lt;code class=&quot;highlighter-rouge&quot;&gt;main.tex&lt;/code&gt;) and compile it using XeLaTeX to see the output pictured below. In Overleaf, you can compile with XeLaTeX by going to Menu &amp;gt; Settings &amp;gt; Compiler and selecting XeLaTeX from the dropdown.&lt;/p&gt;

&lt;h2 id=&quot;minimal-working-example&quot;&gt;Minimal Working Example&lt;/h2&gt;

&lt;p&gt;This minimal working example of LaTeX produces the PDF shown below, when compiled using XeLaTeX.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;\documentclass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;article&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;\usepackage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;hyperref&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;% Just used for formatting the URL citation.&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;\usepackage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;fontspec&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\newfontfamily&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\pigiarniq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}{&lt;/span&gt;Pigiarniq&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;[Extension = .ttf, UprightFont = Pigiarniq Regular]
&lt;span class=&quot;c&quot;&gt;% The font file `Pigiarniq Regular.ttf` should be located somewhere that the compiler can find it.&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;\setmainfont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;Times New Roman&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;\title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\pigiarniq&lt;/span&gt; ᖃᓂᐅᔮᖅᐸᐃᑦ&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; in &lt;span class=&quot;k&quot;&gt;\LaTeX&lt;/span&gt;:&lt;span class=&quot;k&quot;&gt;\\&lt;/span&gt; Minimal Working Example&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;April 2023&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;\begin{document}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;\maketitle&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;\section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;Example&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
This file is an example of how to write &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\pigiarniq&lt;/span&gt;  ᖃᓂᐅᔮᖅᐸᐃᑦ&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; (qaniujaaqpait; Inuktut Syllabics) in &lt;span class=&quot;k&quot;&gt;\LaTeX&lt;/span&gt;, which can be modified for other languages and scripts. Note that it works when compiling with XeLaTeX. This also enables more utf-8 characters supported directly in XeLaTeX's Times New Roman font, like the barred T in SENĆOŦEN, without a font macro like the Pigiarniq one. Compiling with pdfLaTeX does not support this.

To show a longer example of a full sentence, we use this quote from Hon. Paul Quassa in the March 14, 2017 Nunavut Hansard (&lt;span class=&quot;k&quot;&gt;\url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;https://www.assembly.nu.ca/sites/default/files/Hansard&lt;span class=&quot;p&quot;&gt;_&lt;/span&gt;20170314.pdf&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;):

&lt;span class=&quot;nt&quot;&gt;\begin{itemize}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;\item&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;[]&lt;/span&gt;  Mr. Speaker, this government is taking concrete action on language revitalization and student outcomes.
    &lt;span class=&quot;k&quot;&gt;\item&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\pigiarniq&lt;/span&gt; ᐅᖃᖅᑏ, ᒐᕙᒪᒃᑯᑦ ᐊᐅᓚᔾᔭᐃᒋᐊᓪᓚᑦᑖᕋᓱᒻᒪᑕ ᐅᖃᐅᓯᖅ ᐆᒻᒪᖅᑎᑕᐅᒃᑲᓐᓂᕋᓱᓪᓗᓂ ᐊᒻᒪᓗ ᐃᓕᓐᓂᐊᖅᑏᑦ ᐃᓕᓐᓂᐊᖅᑎᑕᐅᓗᑎᒃ.&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;\item&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;[]&lt;/span&gt; uqaqtii, gavamakkut aulajjaigiallattaarasummata uqausiq ummaqtitaukkannirasulluni ammalu ilinniaqtiit ilinniaqtitaulutik .
&lt;span class=&quot;nt&quot;&gt;\end{itemize}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;\end{document}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;output&quot;&gt;Output&lt;/h2&gt;
&lt;p&gt;This is what the compiled PDF looks like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/g/typesetting-syllabics-in-latex-797-1b0bf9.png&quot; alt=&quot;The PDF produced by compiling the code with XeLaTeX.&quot; srcset=&quot;/assets/images/g/typesetting-syllabics-in-latex-400-1b0bf9.png 400w, /assets/images/g/typesetting-syllabics-in-latex-600-1b0bf9.png 600w, /assets/images/g/typesetting-syllabics-in-latex-797-1b0bf9.png 797w&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-this-code-works&quot;&gt;How This Code Works&lt;/h2&gt;

&lt;p&gt;The code above shows an article-style document in LaTeX, written mostly in English but also containing some text written in Inuktut using the Pigiarniq font. You may be using a specific conference or journal template. Here are the main things you need to pay attention to in preparing to use the font:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\usepackage{fontspec}&lt;/code&gt;: Use the &lt;a href=&quot;https://ctan.org/pkg/fontspec?lang=en&quot;&gt;fontspec&lt;/a&gt; package.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\newfontfamily{\pigiarniq}{Pigiarniq}[Extension = .ttf, UprightFont = Pigiarniq Regular]&lt;/code&gt;: Define a new font family. &lt;code class=&quot;highlighter-rouge&quot;&gt;\pigiarniq&lt;/code&gt; is the command you will use when you want to use this font. &lt;code class=&quot;highlighter-rouge&quot;&gt;Pigiarniq&lt;/code&gt; is the font name. &lt;code class=&quot;highlighter-rouge&quot;&gt;Extension = .ttf&lt;/code&gt; indicates that the font’s file extension is &lt;code class=&quot;highlighter-rouge&quot;&gt;.ttf&lt;/code&gt;. For now we’ve just used &lt;code class=&quot;highlighter-rouge&quot;&gt;UprightFont = Pigiarniq Regular&lt;/code&gt;, which will be the default.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\setmainfont{Times New Roman}&lt;/code&gt;: Because we were writing our document primarily in English, we chose to set the main font to Times New Roman and invoked the &lt;code class=&quot;highlighter-rouge&quot;&gt;\pigiarniq&lt;/code&gt; command when writing in syllabics.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;{\pigiarniq ᖃᓂᐅᔮᖅᐸᐃᑦ}&lt;/code&gt;: When we write text in syllabics, we surround the text with curly brackets and invoke the &lt;code class=&quot;highlighter-rouge&quot;&gt;\pigiarniq&lt;/code&gt; command inside the brackets, so it applies only to the text inside the brackets (here that text is ᖃᓂᐅᔮᖅᐸᐃᑦ, or qaniujaaqpait, but in the full example file you can see that you can put full sentences or even paragraphs inside the brackets). You can invoke it as &lt;code class=&quot;highlighter-rouge&quot;&gt;\pigiarniq{ᖃᓂᐅᔮᖅᐸᐃᑦ}&lt;/code&gt; as well, if you prefer.&lt;/li&gt;
  &lt;li&gt;Compile with XeLaTeX (in Overleaf, select it from the dropdown under Menu &amp;gt; Settings &amp;gt; Compiler). This will not work if you try to compile with pdfLaTeX.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you want to typeset all or most of your document in syllabics, you can instead use &lt;code class=&quot;highlighter-rouge&quot;&gt;\setmainfont{Pigiarniq}&lt;/code&gt; and invoke commands for any other fonts you also wish to use.&lt;/p&gt;

&lt;p&gt;In our example, we only set the &lt;code class=&quot;highlighter-rouge&quot;&gt;UprightFont&lt;/code&gt;, but we could also set &lt;code class=&quot;highlighter-rouge&quot;&gt;BoldFont = Pigiarniq Bold&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ItalicFont = Pigiarniq Italic&lt;/code&gt;, comma-separated, like this:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\newfontfamily{\pigiarniq}{Pigiarniq}[Extension = .ttf, UprightFont = Pigiarniq Regular, BoldFont = Pigiarniq Bold, ItalicFont = Pigiarniq Italic]&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This will allow you to invoke bold or italics as &lt;code class=&quot;highlighter-rouge&quot;&gt;\textbf{\pigiarniq ᖃᓂᐅᔮᖅᐸᐃᑦ}&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;\textit{\pigiarniq ᖃᓂᐅᔮᖅᐸᐃᑦ}&lt;/code&gt;. For additional details and other options, see the &lt;a href=&quot;https://texdoc.org/serve/fontspec/0&quot;&gt;fontspec package documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One more neat thing about compiling with XeLaTeX is that it enables more UTF-8 characters supported directly in XeLaTeX’s Times New Roman font, like the barred T in SENĆOŦEN. This doesn’t require any additional font declarations (and it doesn’t require Pigiarniq); it just works when you compile with XeLaTeX!&lt;/p&gt;

&lt;h2 id=&quot;additional-options&quot;&gt;Additional Options&lt;/h2&gt;

&lt;h3 id=&quot;utf-8-character-support-in-xelatex&quot;&gt;UTF-8 Character Support in XeLaTeX&lt;/h3&gt;

&lt;p&gt;As mentioned above, XeLaTeX’s Time New Roman font includes a wider range of UTF-8 characters. If the characters you want to use (like the barred T in SENĆOŦEN) are included in that, you just need to type your text in the body, compile with XeLaTeX, and include just these in the header:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;\usepackage{fontspec}
\setmainfont{Times New Roman}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;noto-fonts&quot;&gt;Noto Fonts&lt;/h3&gt;
&lt;p&gt;There are some characters that exist in Noto fonts but not in XeLaTeX’s Times New Roman font, like the W̱ in W̱SÁNEĆ. You will still need to set the compiler to XeLaTeX. If you don’t have any constraints on fonts, the simplest way to use these is to just put the following in your header and type anything you want in the Noto fonts in the body:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;\usepackage{noto}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you would like to use Times New Roman as the main font, you can instead do the following in your header:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;\usepackage{fontspec}
\usepackage{noto}
\setmainfont{Times New Roman}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Whenever you want to type something that is only included in a Noto font, you can do so as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;\notoserif{W̱}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can also use &lt;code class=&quot;highlighter-rouge&quot;&gt;\notosans{}&lt;/code&gt;; see the &lt;a href=&quot;https://ctan.org/tex-archive/fonts/noto?lang=en&quot;&gt;README for the noto package&lt;/a&gt; for more details and other options. Note that the size of the Noto fonts is slightly different than the Times New Roman font, so you might prefer to include whole words in the Noto font, like &lt;code class=&quot;highlighter-rouge&quot;&gt;\notoserif{W̱SÁNEĆ}&lt;/code&gt;. See below for one solution for the W̱ character that doesn’t use Noto fonts.&lt;/p&gt;

&lt;h3 id=&quot;using-tipa-with-pdflatex&quot;&gt;Using TIPA with pdfLaTeX&lt;/h3&gt;
&lt;p&gt;This solution works with either pdfLaTeX or XeLaTeX for displaying characters like W̱ and Ŧ. In the header, use:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;\usepackage{tipa}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And any time you want to use the character W̱, do:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;\textsubbar{W}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The Ŧ is slightly more complicated to produce:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;\ipabar{T}{0.75ex}{.6}{}{}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The 0.75ex determines how high up the bar is on the T, while the 0.6 is the bar width. If you use a different font, you may want to adjust these values for the best result.&lt;/p&gt;

&lt;p&gt;The downside to this approach is that if you copy text that includes the W̱ or Ŧ from the resulting PDF, those letters will not copy correctly.&lt;/p&gt;

&lt;p&gt;See Appendix C of the &lt;a href=&quot;http://www.l.u-tokyo.ac.jp/~fkr/tipa/tipaman.pdf&quot;&gt;TIPA manual&lt;/a&gt; for more examples.&lt;/p&gt;

&lt;h2 id=&quot;some-words-of-caution&quot;&gt;Some Words of Caution&lt;/h2&gt;

&lt;p&gt;If you are typesetting a document to submit to a publisher that has formatting requirements, you may want to check that it is ok to compile with XeLaTeX, because the output may differ visibly from the output as produced by pdfLaTeX. You can also see in the example that the syllabic text expands out too far and doesn’t have automatic hyphenation, so you may need to handle some spacing issues manually.&lt;/p&gt;

&lt;h2 id=&quot;review--quick-start&quot;&gt;Review / Quick start&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Include the Pigiarniq font by downloading the Pigiarniq zip file (Pigiarniq1.2.zip) from the &lt;a href=&quot;https://www.tiro.com/syllabics/resources/index.html&quot;&gt;Tiro Typeworks website&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Extract the &lt;code class=&quot;highlighter-rouge&quot;&gt;Pigiarniq Regular.ttf&lt;/code&gt; file.&lt;/li&gt;
  &lt;li&gt;Move the &lt;code class=&quot;highlighter-rouge&quot;&gt;Pigiarniq Regular.ttf&lt;/code&gt; file to the appropriate location:
    &lt;ul&gt;
      &lt;li&gt;Overleaf: Upload directly to your project.&lt;/li&gt;
      &lt;li&gt;On your computer: Specify the path to the file or include in the folder as your main LaTeX file will be.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Copy the code from the &lt;a href=&quot;#minimal-working-example&quot;&gt;minimal working example&lt;/a&gt; into your project in a file named &lt;code class=&quot;highlighter-rouge&quot;&gt;main.tex&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Compile &lt;code class=&quot;highlighter-rouge&quot;&gt;main.tex&lt;/code&gt; using XeLaTeX.
    &lt;ul&gt;
      &lt;li&gt;This can be done in Overleaf by going to Menu &amp;gt; Settings &amp;gt; Compiler and selecting XeLaTeX from the dropdown.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;You should now have PDF output that looks like the screenshot in the &lt;a href=&quot;#output&quot;&gt;output&lt;/a&gt; section!&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;p&gt;In addition to the pages linked to throughout the blog post, we (Rebecca Knowles and Eric Joanis, the authors of the minimal working example above) found &lt;a href=&quot;https://web.archive.org/web/20210131225827/https://sites.google.com/site/cyrilgoutte/not-so-news/cuneiformsignsintheaclnaaclpapertemplate&quot;&gt;Cyril Goutte’s instructions on typing cuneiform&lt;/a&gt; useful in preparing this example, along with &lt;a href=&quot;https://www.overleaf.com/learn/latex/Questions/I_have_a_custom_font_I%27d_like_to_load_to_my_document._How_can_I_do_this%3F&quot;&gt;Overleaf’s instructions on using custom fonts&lt;/a&gt;, and the &lt;a href=&quot;https://texdoc.org/serve/fontspec/0&quot;&gt;fontspec package documentation&lt;/a&gt;. If you want to dig deeply into LaTeX font encodings and their history, this &lt;a href=&quot;https://www.latex-project.org/help/documentation/encguide.pdf&quot;&gt;LaTeX font encodings documentation&lt;/a&gt; may be of interest.&lt;/p&gt;
</description>
        <pubDate>Fri, 21 Apr 2023 00:00:00 +0000</pubDate>
        <link>https://blog.mothertongues.org/typesetting-syllabics-and-more-in-latex/</link>
        <guid isPermaLink="true">https://blog.mothertongues.org/typesetting-syllabics-and-more-in-latex/</guid>
        
        <category>fonts</category>
        
        <category>syllabics</category>
        
        <category>latex</category>
        
        
        <category>Tutorial</category>
        
        <category>Blog</category>
        
      </item>
    
      <item>
        <title>Language revitalization with Mozilla's Common Voice</title>
        <description>&lt;h1 id=&quot;tldr&quot;&gt;TL;DR&lt;/h1&gt;

&lt;p&gt;The National Research Council and Ursa Creative have adapted Mozilla’s CommonVoice tool to help streamline recording and data management for Indigenous language revitalization.&lt;/p&gt;

&lt;h1 id=&quot;what-you-need-to-know-to-understand-this-post&quot;&gt;What you need to know to understand this post&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;If you’re not familiar with &lt;a href=&quot;https://commonvoice.mozilla.org&quot;&gt;Mozilla’s Common Voice&lt;/a&gt;, check it out!&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;who-is-involved-with-this-project&quot;&gt;Who is involved with this project?&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Nigel Decontie - Developer at &lt;a href=&quot;https://ursacreative.ca&quot;&gt;Ursa Creative&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Aidan Pine - Technical Director for NRC Speech Generation for Indigenous Language Education project&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;what-are-the-motivations-behind-this-project&quot;&gt;What are the motivations behind this project?&lt;/h1&gt;

&lt;p&gt;Indigenous language revitalization is a movement that seeks to promote the use of the languages spoken by Indigenous peoples around the world. Many Indigenous languages are endangered, due to over a century of colonial policies against their use. The loss of these languages not only erases cultural and linguistic diversity but also undermines the cultural identity and well-being of Indigenous communities. Revitalization efforts can involve a range of strategies, including language immersion programs, community-based language learning initiatives, and the development of language documentation and preservation projects. Indigenous language revitalization is critical for the preservation of cultural heritage, and is an important step towards building a more inclusive and equitable society.&lt;/p&gt;

&lt;h1 id=&quot;language-revitalization-with-mozillas-common-voice&quot;&gt;Language revitalization with Mozilla’s Common Voice&lt;/h1&gt;

&lt;p&gt;In an effort to support Indigenous language revitalization efforts, the National Research Council has developed their own custom version of an open-source language collection tool. They brought us on board to build a reproducible deployment process and assist in hosting the application. With this process in place, there is an opportunity for other organizations to have their own instances of the application created.&lt;/p&gt;

&lt;h2 id=&quot;about-the-nrcs-custom-common-voice&quot;&gt;About the NRC’s custom Common Voice&lt;/h2&gt;

&lt;p&gt;Common Voice is an open-source project that aims to create a freely available database of human voices that can be used to train machine learning models for speech technology. The project is designed to help increase the diversity of voices available for these models, particularly for underrepresented languages and accents - something that could be vital in supporting Indigenous languages, who see fewer and fewer native speakers each year. Common Voice invites individuals to record and donate their voices to the project’s database, allowing for a diverse range of voices to be collected. The project also includes tools for verifying and validating voice contributions, ensuring the accuracy and quality of the dataset. Common Voice is intended to be a collaborative effort, with individuals and organizations contributing their time and resources to help improve the accuracy and inclusivity of speech recognition technology.&lt;/p&gt;

&lt;p&gt;The National Research Council (NRC) is currently involved in a &lt;a href=&quot;https://nrc.canada.ca/en/research-development/research-collaboration/programs/speech-generation-indigenous-language-education&quot;&gt;three-year research project&lt;/a&gt; on speech synthesis (text-to-speech) technology and have modified Mozilla’s Common Voice to suit the needs of the recording workflow of the project. Namely, by creating a separate instance of Common Voice, communities involved in the project are able to determine their own data management policy instead of adopting Mozilla’s policy to make all voices freely available. In addition, this ‘fork’ – or adaptation - of Common Voice also allows users to configure recording quality settings like encoding format and sampling rate.&lt;/p&gt;

&lt;p&gt;You can find all the source code for this custom instance on the &lt;a href=&quot;https://github.com/SamuelLarkin/common-voice&quot;&gt;GitHub page&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;who-is-ursa-creative&quot;&gt;Who is Ursa Creative?&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/g/common-voice--ursa-logo-800-0df9cc.png&quot; alt=&quot;Ursa Creative logo&quot; srcset=&quot;/assets/images/g/common-voice--ursa-logo-400-0df9cc.png 400w, /assets/images/g/common-voice--ursa-logo-600-0df9cc.png 600w, /assets/images/g/common-voice--ursa-logo-800-0df9cc.png 800w, /assets/images/g/common-voice--ursa-logo-1000-0df9cc.png 1000w&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ursa Creative is an Indigenous technology company based on the traditional territories of the WSÁNEĆ and Lək̓ʷəŋən-speaking Songhees, Esquimalt peoples. We began making simple websites to help Indigenous organizations in community build their online presence. There was so much interest that it quickly became a full-time job, and we expanded our team to create new systems, websites, and consulting services. We are now fortunate enough to work with both Indigenous and non-Indigenous organizations across Canada.&lt;/p&gt;

&lt;p&gt;For NRC’s Common Voice, we were brought on board to assist with the hosting and deployment of the project. One of the goals for this project was to create a streamlined deployment process to allow anyone to request their own instance of the software.&lt;/p&gt;

&lt;h2 id=&quot;how-to-get-set-up-with-your-own-instance&quot;&gt;How to get set up with your own instance&lt;/h2&gt;

&lt;p&gt;If you have any questions or are interested in having your own instance set up, you can find us at &lt;a href=&quot;https://ursacreative.ca&quot;&gt;ursacreative.ca&lt;/a&gt; or reach out directly to &lt;a href=&quot;mailto:contact@ursacreative.ca&quot;&gt;contact@ursacreative.ca&lt;/a&gt;. We would love to hear from you!&lt;/p&gt;
</description>
        <pubDate>Thu, 09 Mar 2023 00:00:00 +0000</pubDate>
        <link>https://blog.mothertongues.org/common-voice/</link>
        <guid isPermaLink="true">https://blog.mothertongues.org/common-voice/</guid>
        
        <category>explanation</category>
        
        <category>common-voice</category>
        
        
        <category>Blog</category>
        
      </item>
    
      <item>
        <title>How to make a Wordle clone for your language</title>
        <description>&lt;h1 id=&quot;tldr&quot;&gt;TL;DR&lt;/h1&gt;

&lt;p&gt;This tutorial will help you adapt the popular &lt;a href=&quot;https://www.powerlanguage.co.uk/wordle/&quot;&gt;Wordle game&lt;/a&gt; to another language!&lt;/p&gt;

&lt;h1 id=&quot;what-you-need-to-know-to-understand-this-post&quot;&gt;What you need to know to understand this post&lt;/h1&gt;

&lt;p&gt;I’ve re-written this blog post to be a bit more centered towards users who might not have a web development environment installed on their computer. See the &lt;a href=&quot;#local-development&quot;&gt;local development&lt;/a&gt; section for the previous (advanced) instructions on getting your local development environment set up.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;In order to do this, you’ll have to know a little bit about web development, or at least not be intimidated to get your hands dirty in some code! If that already sounds intimidating, hopefully you continue to read on a bit - it might be scary at first but it gets easier! Remember there are a lot of resources online to help you and you can always reach out to me if you have questions.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You’ll need a &lt;a href=&quot;https://github.com/&quot;&gt;GitHub Account&lt;/a&gt; and a text editor for code (I like &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;who-is-involved-with-this-project&quot;&gt;Who is involved with this project?&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Author/Blog Maintainer: &lt;a href=&quot;https://aidanpine.ca&quot;&gt;Aidan Pine&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;what-are-the-motivations-behind-this-projecttechnologytip&quot;&gt;What are the motivations behind this project/technology/tip?&lt;/h1&gt;

&lt;p&gt;Everybody I know has been loving the Wordle game in English, and there are many other Wordlers who have made clones of the original Wordle. I ‘forked’ (ie copied) Hannah Park’s (@hannahcode) &lt;a href=&quot;https://github.com/hannahcode/wordle&quot;&gt;open source clone&lt;/a&gt; and adapted it to allow for different languages.&lt;/p&gt;

&lt;h1 id=&quot;how-to-make-your-not-wordle&quot;&gt;How to make your Not Wordle&lt;/h1&gt;

&lt;h2 id=&quot;step-1-get-the-code&quot;&gt;Step 1: Get the code&lt;/h2&gt;

&lt;p&gt;The first step is to copy &lt;a href=&quot;https://github.com/roedoejet/AnyLanguage-Wordle&quot;&gt;my version&lt;/a&gt; of the @hannahcode’s clone to your computer. To do this, first ‘fork’ &lt;a href=&quot;https://github.com/roedoejet/AnyLanguage-Wordle&quot;&gt;my version&lt;/a&gt; by clicking on the fork button as seen below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/g/fork-wordle-800-6d4812.png&quot; srcset=&quot;/assets/images/g/fork-wordle-400-6d4812.png 400w, /assets/images/g/fork-wordle-600-6d4812.png 600w, /assets/images/g/fork-wordle-800-6d4812.png 800w, /assets/images/g/fork-wordle-1000-6d4812.png 1000w&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then clone your copy to your computer&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git clone https://github.com/YourGitHubUsername/AnyLanguage-Wordle.git&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Run the above command in your command line, changing ‘YourGitHubUsername’ to your actual GitHub username. Alternatively, you can &lt;a href=&quot;https://desktop.github.com/&quot;&gt;install GitHub Desktop&lt;/a&gt; and then &lt;a href=&quot;https://docs.github.com/en/desktop/contributing-and-collaborating-using-github-desktop/adding-and-cloning-repositories/cloning-a-repository-from-github-to-github-desktop&quot;&gt;clone the repository using GitHub Desktop&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once you do this, you will have to enable GitHub workflows (see below) in order for the build to work properly.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/g/enable-workflow-800-af84eb.png&quot; srcset=&quot;/assets/images/g/enable-workflow-400-af84eb.png 400w, /assets/images/g/enable-workflow-600-af84eb.png 600w, /assets/images/g/enable-workflow-800-af84eb.png 800w, /assets/images/g/enable-workflow-1000-af84eb.png 1000w&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then, make sure that ‘GitHub Pages’ (the free service we are using to host your website) is set up to deploy from your ‘gh-pages’ branch. You can do this by going to Settings &amp;gt; Pages and then selecting “Branch: gh-pages” as the source as shown below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/g/github-pages-800-30ac9e.png&quot; srcset=&quot;/assets/images/g/github-pages-400-30ac9e.png 400w, /assets/images/g/github-pages-600-30ac9e.png 600w, /assets/images/g/github-pages-800-30ac9e.png 800w, /assets/images/g/github-pages-1000-30ac9e.png 1000w&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-2-change-the-orthography-writing-system&quot;&gt;Step 2: Change the orthography (writing system)&lt;/h2&gt;

&lt;p&gt;You can change the &lt;code class=&quot;highlighter-rouge&quot;&gt;ORTHOGRAPHY&lt;/code&gt; variable in &lt;code class=&quot;highlighter-rouge&quot;&gt;src/constants/orthography.ts&lt;/code&gt; to use your language’s alphabet. This must be a list of strings, and the letters can be more than one character long. Don’t change the name of the variable, or anything else. For example if your language has the five letters ‘a’, ‘b’, ‘c’, ‘aa’, and ‘aaa’:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ORTHOGRAPHY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'c'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'aa'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'aaa'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;step-3-change-the-words&quot;&gt;Step 3: Change the words&lt;/h2&gt;

&lt;p&gt;You can change the valid guesses and the wordlist used by Not Wordle in the &lt;code class=&quot;highlighter-rouge&quot;&gt;src/constants/validGuesses.ts&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;src/constants/wordlist.ts&lt;/code&gt; files. Just replace the lists that are there with your language’s wordlists. The valid guesses are all the words that can be guessed in your Not Wordle, whereas the wordlist represents all the words that can be chosen as the word of the day.&lt;/p&gt;

&lt;p&gt;Note: all the words have to be of the same length! The default for Wordle is 5 letters long (not characters!), but you can change this in the configuration in Step 4.&lt;/p&gt;

&lt;p&gt;Second Note: the words will be presented in whatever order you put them in here! So make sure to randomize your wordlist in advance. The valid guesses list can be in any order but if the word list is in alphabetical order it’ll make it easier for people to guess.&lt;/p&gt;

&lt;h2 id=&quot;step-4-configure-the-app&quot;&gt;Step 4: Configure the app&lt;/h2&gt;

&lt;p&gt;You can change other aspects related to the app in &lt;code class=&quot;highlighter-rouge&quot;&gt;src/constants/config.ts&lt;/code&gt;. Here is the default with a description for each value:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CONFIG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;tries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// This changes how many tries you get to finish the Not Wordle&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;YourLanguageHere&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// This changes the display name for your language&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;wordLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// This sets how long each word is based on how many characters (as defined in orthography.ts) are in each word&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;YourNameHere&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Put your name here so people know who made this Not Wordle!&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;authorWebsite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;YourLinkHere&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Put a link to your website or social media here&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;wordListSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;YourDictionarySource&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Describe the source material for your words here&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;wordListSourceLink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;YourDictionaryLink&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Put a link to the source material for your words here&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// THESE NEXT SETTINGS ARE FOR ADVANCED USERS&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;googleAnalytics&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// You can use this if you use Google Analytics&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;shuffle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// whether to shuffle the words in the wordlist each time you load the app (note: you will lose the 'word of the day' functionality if this is true)&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;normalization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'NFC'&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// whether to apply Unicode normalization to words and orthography - options: 'NFC', 'NFD', 'NKFC', 'NKFD', false&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;startDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'January 1, 2022 00:00:00'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// what date and time to start your game from&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;defaultLang&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'en'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// the default interface language&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;availableLangs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'en'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'es'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// the options available to the user for translation languages&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note, you don’t need to put values for the advanced settings (‘googleAnalytics’, ‘shuffle’, or ‘normalization’), but you should put something for all the other parameters! The default ‘normalization’ here uses NFC Unicode normalization on all words and letters in your alphabet, which will be OK for 99% of cases. If you don’t know what the heck Unicode normalization means, &lt;a href=&quot;https://withblue.ink/2019/03/11/why-you-need-to-normalize-unicode-strings.html&quot;&gt;you’re not alone!&lt;/a&gt; but it’s actually pretty important for making sure all the words in your wordlist are using the same bits and bytes as your writing system.&lt;/p&gt;

&lt;h2 id=&quot;step-5-publish&quot;&gt;Step 5: Publish&lt;/h2&gt;

&lt;p&gt;Wait - are you &lt;em&gt;sure&lt;/em&gt; you have permission to publish this? Are you a member of the language community? Did you ask permission and follow the proper protocols? Just because you &lt;em&gt;can&lt;/em&gt; build something cool doesn’t necessarily mean you &lt;em&gt;should&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;After that proviso, you can publish to your GitHub by changing the &lt;code class=&quot;highlighter-rouge&quot;&gt;homepage&lt;/code&gt; value in the &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; as seen below. Change the ‘roedoejet’ (my GitHub username), to your GitHub username, and leave everything else the same. Note - if you &lt;em&gt;changed&lt;/em&gt; the name of your fork from “AnyLanguage-Wordle” to something else, you will have to change that as well.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/g/homepage-gh-546-af959b.png&quot; srcset=&quot;/assets/images/g/homepage-gh-400-af959b.png 400w, /assets/images/g/homepage-gh-546-af959b.png 546w&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then, just commit your changes and push them and the GitHub Action workflow found in &lt;code class=&quot;highlighter-rouge&quot;&gt;.github/workflows/publish.yml&lt;/code&gt; will take care of the rest! You can change the words or make other changes and then deploy again by making another commit. If you don’t know how to make a commit, this is very Google-able! There are a ton of different videos online geared towards different types of users of either command line git or GitHub Desktop.&lt;/p&gt;

&lt;p&gt;If everything worked well, you’ll get a green checkmark next to your commit message in GitHub (see screenshot below) - this means that the &lt;a href=&quot;#testing&quot;&gt;tests passed&lt;/a&gt; and your Not Wordle was published at https://YourUsername.github.io/AnyLanguage-Wordle&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/g/deploy-success-800-fbcf83.png&quot; srcset=&quot;/assets/images/g/deploy-success-400-fbcf83.png 400w, /assets/images/g/deploy-success-600-fbcf83.png 600w, /assets/images/g/deploy-success-800-fbcf83.png 800w, /assets/images/g/deploy-success-832-fbcf83.png 832w&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Congratulations - you did it!&lt;/p&gt;

&lt;h2 id=&quot;advanced&quot;&gt;Advanced&lt;/h2&gt;

&lt;p&gt;I’ll put some stuff here for advanced users. If you’re running into errors, have a look at these too, and don’t forget to read the comment section below too!&lt;/p&gt;

&lt;h3 id=&quot;local-development&quot;&gt;Local Development&lt;/h3&gt;

&lt;p&gt;If you want to get a sneak-preview before publishing, you will need to have &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;node&lt;/a&gt; installed on your computer (I recommend version 16 or higher). Then, using your terminal, you will need to install all the dependencies:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd AnyLanguage-Wordle &amp;amp;&amp;amp; npm install&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Tada! You can now run my copy on your machine:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm start&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can also publish without pushing to your repo by running &lt;code class=&quot;highlighter-rouge&quot;&gt;npm run-script deploy&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;testing&quot;&gt;Testing&lt;/h3&gt;

&lt;p&gt;Sometimes there can be a discrepancy between the characters in your wordlist and the characters in your orthography (writing system). For your game to work properly, there are a few tests related to your data that must pass:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;all the characters in all of the words in your wordlist must also exist in your defined orthography.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;all the words in your word list must be the length defined in your configuration&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;the date must be formatted correctly as described in this post&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can check these tests by first making sure you are set up for &lt;a href=&quot;#local-development&quot;&gt;local development&lt;/a&gt; and then running &lt;code class=&quot;highlighter-rouge&quot;&gt;npm run-script test&lt;/code&gt; which will fail if certain words use symbols not defined in your &lt;code class=&quot;highlighter-rouge&quot;&gt;orthography.ts&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;This test is run by default and you won’t be able to publish your Not Wordle if the test doesn’t pass! Note that you can check if your tests pass by clicking on the green arrow or red checkmark as seen in the photo shown at the end of Step 5. If it doesn’t, click “details” and try to debug where your app went wrong (usually an unexpected character in a word or a word that is too short/long). If you can’t figure it out, post your problem to the comment section below and hopefully somebody will give a hand!&lt;/p&gt;

&lt;h3 id=&quot;custom-build&quot;&gt;Custom Build&lt;/h3&gt;

&lt;p&gt;If you want to build your site without using GitHub Pages, make sure you are set up for &lt;a href=&quot;#local-development&quot;&gt;local development&lt;/a&gt; and then just run &lt;code class=&quot;highlighter-rouge&quot;&gt;npm run-script build&lt;/code&gt;, making sure that your &lt;code class=&quot;highlighter-rouge&quot;&gt;homepage&lt;/code&gt; key is changed appropriately in &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; to whatever address you will host your site at. Otherwise the site will not build correctly. The resulting &lt;code class=&quot;highlighter-rouge&quot;&gt;build&lt;/code&gt; folder can be served from any HTTP server at the address defined in the &lt;code class=&quot;highlighter-rouge&quot;&gt;homepage&lt;/code&gt; setting in &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;font&quot;&gt;Font&lt;/h3&gt;

&lt;p&gt;This project uses &lt;a href=&quot;https://www2.gov.bc.ca/gov/content/governments/services-for-government/policies-procedures/bc-visual-identity/bc-sans&quot;&gt;BC SANS&lt;/a&gt; by default in order to properly render characters in BC Indigenous languages. You can change this in &lt;code class=&quot;highlighter-rouge&quot;&gt;index.css&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;custom-domain&quot;&gt;Custom Domain&lt;/h3&gt;

&lt;p&gt;If you want to use a custom domain while hosting on GitHub Pages, first create a CNAME record, then change the &lt;code class=&quot;highlighter-rouge&quot;&gt;build&lt;/code&gt; scripts to create a CNAME file before deploying:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{...
    &quot;scripts&quot;: {
        &quot;start&quot;: &quot;react-scripts start&quot;,
        &quot;predeploy&quot;: &quot;npm run build&quot;,
        &quot;deploy&quot;: &quot;gh-pages -d build&quot;,
        &quot;build&quot;: &quot;react-scripts build &amp;amp;&amp;amp; echo 'yoursubdomain.yourdomain.org' &amp;gt; ./build/CNAME&quot;,
        &quot;test&quot;: &quot;react-scripts test&quot;,
        &quot;eject&quot;: &quot;react-scripts eject&quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will set the domain properly for GitHub Pages. Note that you will also have to change the &lt;code class=&quot;highlighter-rouge&quot;&gt;homepage&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; to your custom domain as described in Step 5.&lt;/p&gt;

&lt;h3 id=&quot;start-date&quot;&gt;Start date&lt;/h3&gt;

&lt;p&gt;By default, the word list starts at midnight on January 1, 2022. This is written in the &lt;code class=&quot;highlighter-rouge&quot;&gt;startDate&lt;/code&gt; key in the configuration file as &lt;code class=&quot;highlighter-rouge&quot;&gt;January 1, 2022 00:00:00&lt;/code&gt;. If you want to change this to the date you are releasing the app, you may do so here. You can also change the time that the new word is launched by adjusting the time. For example, to renew words every 24 hours from February 15 at 8pm you would set this value to &lt;code class=&quot;highlighter-rouge&quot;&gt;February 15, 2022 20:00:00&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;localization&quot;&gt;Localization&lt;/h3&gt;

&lt;p&gt;As of February 10th 2022, the code is now completely localizable to your language. Thanks to &lt;a href=&quot;https://github.com/ckomeara&quot;&gt;Carolyn O’Meara&lt;/a&gt; for contributing the Spanish translation - other translations and pull requests are welcome!&lt;/p&gt;

&lt;p&gt;In order to add your translation, you must do the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Determine your &lt;a href=&quot;https://stackoverflow.com/questions/3191664/list-of-all-locales-and-their-short-codes&quot;&gt;language’s locale code&lt;/a&gt; and add a folder under &lt;code class=&quot;highlighter-rouge&quot;&gt;public/locales/&lt;/code&gt; in the code named that. For example, if you were adding a Hausa translation you would add a folder at &lt;code class=&quot;highlighter-rouge&quot;&gt;public/locales/ha&lt;/code&gt;. Then copy the &lt;code class=&quot;highlighter-rouge&quot;&gt;translation.json&lt;/code&gt; file from &lt;code class=&quot;highlighter-rouge&quot;&gt;public/locales/en/translation.json&lt;/code&gt; to that folder.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Then, you must translate all of the values, but &lt;em&gt;not&lt;/em&gt; the keys. For example, below, you would translate the word for “Enter”, but &lt;em&gt;not&lt;/em&gt; “enterKey”. Additionally, you must preserve anything that is inside curly brackets &lt;code class=&quot;highlighter-rouge&quot;&gt;{{}}&lt;/code&gt; or other markup like &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;1&amp;gt;&amp;lt;/1&amp;gt;&lt;/code&gt;. You &lt;em&gt;can&lt;/em&gt; change the order of it though, so, if you were translating the “solution” key below in Danish, you could write “{{solution}} var dagens ord”.&lt;/p&gt;

    &lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;about&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;About this game&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;gameName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Not Wordle - &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;enterKey&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Enter&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;deleteKey&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Delete&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;notEnoughLetters&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Not enough letters&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;wordNotFound&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Word not found&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;solution&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;The word was {{solution}}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Finally, you can set the &lt;code class=&quot;highlighter-rouge&quot;&gt;defaultLang&lt;/code&gt; in the configuration to your language’s language code. You can define the list of translations to make available in the interface by editing the list in &lt;code class=&quot;highlighter-rouge&quot;&gt;availableLangs&lt;/code&gt; in the config.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Tue, 25 Jan 2022 00:00:00 +0000</pubDate>
        <link>https://blog.mothertongues.org/wordle/</link>
        <guid isPermaLink="true">https://blog.mothertongues.org/wordle/</guid>
        
        <category>tutorial</category>
        
        <category>explanation</category>
        
        <category>wordle</category>
        
        <category>game</category>
        
        
        <category>Tutorial</category>
        
      </item>
    
      <item>
        <title>Preventing feeding of g2p rules with case</title>
        <description>&lt;p&gt;When you write &lt;a href=&quot;https://blog.mothertongues.org/g2p-background&quot;&gt;g2p mappings&lt;/a&gt;, sometimes you find yourself wanting to &lt;a href=&quot;https://blog.mothertongues.org/g2p-advanced-mappings#prevent_feeding-default-false&quot;&gt;prevent feeding&lt;/a&gt; between rules, but your situation is too complex to be handled by the normal prevent-feeding option.&lt;/p&gt;

&lt;p&gt;This blog post describes a technique that can be used to handle complex rule feeding scenarios.&lt;/p&gt;

&lt;h1 id=&quot;tldr&quot;&gt;TL;DR&lt;/h1&gt;

&lt;p&gt;If you want your g2p mapping to prevent feeding between the input and output of your rules, while retaining the ability to match the output of your rules in the context of other rules, you can use this three-step mapping technique using case to prevent rule feeding, instead of a single mapping with &lt;code class=&quot;highlighter-rouge&quot;&gt;prevent_feeding&lt;/code&gt; enabled.&lt;/p&gt;

&lt;h1 id=&quot;what-you-need-to-know-to-understand-this-post&quot;&gt;What you need to know to understand this post&lt;/h1&gt;

&lt;p&gt;This post will only make sense if you’re already an advanced user of the g2p system, and you are writing your own mappings.&lt;/p&gt;

&lt;p&gt;We assume:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Knowledge of the &lt;a href=&quot;https://github.com/roedoejet/g2p&quot;&gt;g2p module&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;You’ve read the &lt;a href=&quot;https://blog.mothertongues.org/g2p-background&quot;&gt;seven part blog post on g2p&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;You know how to use &lt;code class=&quot;highlighter-rouge&quot;&gt;context_after&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;context_before&lt;/code&gt; in g2p mappings.&lt;/li&gt;
  &lt;li&gt;You know how to write mappings in &lt;code class=&quot;highlighter-rouge&quot;&gt;.csv&lt;/code&gt; files.&lt;/li&gt;
  &lt;li&gt;You know how to call &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p convert&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;You’re trying to use &lt;code class=&quot;highlighter-rouge&quot;&gt;prevent_feeding&lt;/code&gt; but it’s not doing what you want.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note: the word “feeding” comes from the linguistic concept of &lt;a href=&quot;https://en.wikipedia.org/wiki/Feeding_order&quot;&gt;feeding order&lt;/a&gt;, where a rule is said to feed into another rule if it creates the context for the second rule to apply.&lt;/p&gt;

&lt;h1 id=&quot;who-is-involved-with-this-project&quot;&gt;Who is involved with this project?&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;g2p project owner: &lt;a href=&quot;https://aidanpine.ca&quot;&gt;Aidan Pine&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Author of this post, and g2p software developer: Eric Joanis&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;what-is-needed-to-replicate-the-content-in-the-post&quot;&gt;What is needed to replicate the content in the post?&lt;/h1&gt;

&lt;p&gt;To reproduce the examples below, you will need to install &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; on your own machine by following the instructions at &lt;a href=&quot;https://github.com/roedoejet/g2p&quot;&gt;GitHub/g2p&lt;/a&gt; and make sure the &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p convert&lt;/code&gt; command line works.&lt;/p&gt;

&lt;p&gt;You’ll need a recent version of &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt;, since we’ll make use of the new &lt;code class=&quot;highlighter-rouge&quot;&gt;--config&lt;/code&gt; option to &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p convert&lt;/code&gt;. Release v0.5.20211217 or more recent will work, or the master branch on GitHub as of 2021-12-07 or more recent.&lt;/p&gt;

&lt;h1 id=&quot;what-are-the-motivations-behind-this-technique&quot;&gt;What are the motivations behind this technique?&lt;/h1&gt;

&lt;p&gt;In an advanced g2p mapping scenario, some of our collaborators found themselves writing rules where, as soon as one rule matched a piece of text, no further rules should touch that text. There were many dozens of rules, each one handling some sequence of characters occurring in a specific context, with some catch-all rules at the end that applied if none of the listed contexts applied.&lt;/p&gt;

&lt;p&gt;The problem they faced was that using &lt;code class=&quot;highlighter-rouge&quot;&gt;prevent_feeding&lt;/code&gt; solved making sure no part of the text was touched more than once, but it also prevented touched text from being used in the context of subsequent rules, as was necessary.&lt;/p&gt;

&lt;h1 id=&quot;solving-this-complex-prevent-feeding-scenario&quot;&gt;Solving this complex prevent-feeding scenario&lt;/h1&gt;

&lt;h2 id=&quot;minimal-setup&quot;&gt;Minimal setup&lt;/h2&gt;

&lt;p&gt;For this blog post, we’ll create a fictitious scenario with a minimum number of rules exhibiting the problem found in the real use case described above.&lt;/p&gt;

&lt;p&gt;Imagine we use a g2p mapping to modify some spelling rules, where the same sequence of letters is mapped differently depending on context. In our minimal example, we want to handle “un” as follows:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;when the string “atun” occurs, it should be replaced by “etun”, and the resulting “un” should not be further modified;&lt;/li&gt;
  &lt;li&gt;when “un” occurs before “a” or “e”, it should remain as “un”;&lt;/li&gt;
  &lt;li&gt;otherwise, “un” should be changed to “on” (catch-all rule).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With these rules, the word “untunatun” should get changed to “ontunetun” because the third “un” is part of “atun”, the second “un” is followed by “a” or “e”, and only the first “un” is handled by our catch-all rule.&lt;/p&gt;

&lt;p&gt;Notice that the first two rules preserve “un” in their output, so we have to make sure the output of a rule cannot be reused as the output of a subsequent rule.&lt;/p&gt;

&lt;h2 id=&quot;the-obvious-solution-which-does-not-work&quot;&gt;The obvious solution, which does not work&lt;/h2&gt;

&lt;p&gt;We can almost solve this by using &lt;code class=&quot;highlighter-rouge&quot;&gt;prevent_feeding&lt;/code&gt;, but not quite.&lt;/p&gt;

&lt;p&gt;Let’s write the rules as follows:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mapping.csv&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;atun,etun,,
un,un,,[ae]
un,on,,
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and use config file &lt;code class=&quot;highlighter-rouge&quot;&gt;config.yaml&lt;/code&gt;, where we are careful to set &lt;code class=&quot;highlighter-rouge&quot;&gt;prevent_feeding: true&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;display name: mapping example for un with prevent feeding
mapping: mapping.csv
in_lang: l1
out_lang: l2
case_sensitive: false
prevent_feeding: true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When you run &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p convert --config config.yaml untunatun l1 l2&lt;/code&gt;, you will get “ontonetun” as output instead of the intended “ontunetun”.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What’s the error?&lt;/strong&gt; (I know, it’s subtle…) The middle “un” should have matched the second rule, since it was followed by “a” before the first rule was applied, and is still followed by “e” after the first rule was applied. That should have blocked the application of the third rule, but apparently it didn’t.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why is this happening?&lt;/strong&gt; We need to talk about how &lt;code class=&quot;highlighter-rouge&quot;&gt;prevent_feeding&lt;/code&gt; is implemented to answer that question. The point of the prevent-feeding option is to make sure that the output of a rule is never matched as the input of any other rule. To accomplish that, we actually map the output of each rule temporarily to characters in a &lt;a href=&quot;https://en.wikipedia.org/wiki/Private_Use_Areas&quot;&gt;Private Use Area&lt;/a&gt; in the Unicode standard, and map them back to the real output once all rules have been applied. The private use area characters are intended for internal (hence “private”) use within software, but should never be printed, so they were perfect to solve the prevent-feeding problem: they should never occur in input text or in the input of any rule, and so there would never unintended feeding between rules.&lt;/p&gt;

&lt;p&gt;The problem is that those private characters are also inaccessible to the &lt;code class=&quot;highlighter-rouge&quot;&gt;context_before&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;context_after&lt;/code&gt; parts of our rules. So &lt;code class=&quot;highlighter-rouge&quot;&gt;prevent_feeding&lt;/code&gt; not only blocks the characters from being matched as the input of other rules, it also blocks them from being matched in their contexts.&lt;/p&gt;

&lt;p&gt;If you want to see exactly what’s going on, run that convert command again with the &lt;code class=&quot;highlighter-rouge&quot;&gt;--debugger&lt;/code&gt; option. For each rule that gets applied, you’ll see the rule, as well as the text before and after it is applied. That can help understand what’s going on whe you’re trying to debug a g2p mapping.&lt;/p&gt;

&lt;h2 id=&quot;a-three-step-prevent-feeding-solution-which-does-work&quot;&gt;A three-step prevent-feeding solution, which does work&lt;/h2&gt;

&lt;p&gt;The work-around we propose in this blog post is the following:&lt;/p&gt;

&lt;p&gt;Instead of defining one mapping with prevent feeding enabled, we’ll define three mappings applied one after the other, and we’ll create our own temporary representation for previously mapped characters:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;mapping 1: lowercase all input text;&lt;/li&gt;
  &lt;li&gt;mapping 2: make a &lt;strong&gt;case-sensitive&lt;/strong&gt; mapping where the input of each rule is lowercase, the output of each rule is uppercase, and the context of each rule lists both cases, so contexts match before and after the application of other rules;&lt;/li&gt;
  &lt;li&gt;mapping 3: lowercase all output text.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The result exists as a &lt;a href=&quot;https://github.com/roedoejet/g2p/tree/master/g2p/tests/public/mappings/case-feed/&quot;&gt;test case in the g2p repo&lt;/a&gt;, but we’ll show it here too, a bit simplified.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;case-nofeed-mapping.csv&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;atun,ETUN,,
un,UN,,[aAeE]
un,ON,,
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;case-nofeed-config.yaml&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mappings:
  - display name: case-nofeed input lowercaser
    mapping: empty.csv
    in_lang: l1
    out_lang: l1-lc
    case_sensitive: false
  - display_name: main case-nofeed mapping with l1 in lc, l2 in uc, thus no feeding
    mapping: case-nofeed-mapping.csv
    in_lang: l1-lc
    out_lang: l2-uc
    case_sensitive: true
  - display name: case-nofeed output lowercaser
    mapping: empty.csv
    in_lang: l2-uc
    out_lang: l2
    case_sensitive: false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For the two lowercasing mappings, notice we referred to file &lt;code class=&quot;highlighter-rouge&quot;&gt;empty.csv&lt;/code&gt;. We indeed need to create an empty file called &lt;code class=&quot;highlighter-rouge&quot;&gt;empty.csv&lt;/code&gt;. We’re using the fact that when a case insensitive mapping (i.e., a mapping with &lt;code class=&quot;highlighter-rouge&quot;&gt;case_sensitive: false&lt;/code&gt;) is applied, its input is lowercased before the rules are applied, so we don’t need to provide any actual rules, which means an empty CSV file will do.&lt;/p&gt;

&lt;p&gt;Now, when you run &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p convert --config case-nofeed-config.yaml untunatun l1 l2&lt;/code&gt;, you get the expected “ontunetun” output because for the middle “un”, the second rule matches that “E” in its &lt;code class=&quot;highlighter-rouge&quot;&gt;context_after&lt;/code&gt;, since the first rule changed “atun” to “ETUN”.&lt;/p&gt;

&lt;h2 id=&quot;what-if-my-mapping-is-case-sensitive&quot;&gt;What if my mapping is case sensitive?&lt;/h2&gt;

&lt;p&gt;OK, so this solution depends on the fact that if your mapping is case insensitive, all input gets dropped to lower case before mapping starts, so distinctions of case in the input are not meaningful. This allows us to use upper case characters as that temporary intermediate representation that could not be matched as the input of other rules.&lt;/p&gt;

&lt;p&gt;If your mapping has to be case sensitive, then you cannot use this solution. Instead, you would have to carefully choose your own temporary representation to block feeding via your rule design, while still being able to use that temporary representation in the context of other rules. But make sure you use characters that cannot be valid input in the language you’re working with!&lt;/p&gt;
</description>
        <pubDate>Tue, 07 Dec 2021 00:00:00 +0000</pubDate>
        <link>https://blog.mothertongues.org/g2p-case-feeding/</link>
        <guid isPermaLink="true">https://blog.mothertongues.org/g2p-case-feeding/</guid>
        
        <category>tutorial</category>
        
        <category>explanation</category>
        
        <category>g2p</category>
        
        
        <category>Tutorial</category>
        
      </item>
    
      <item>
        <title>G2P Part 7: Contributing a new mapping to g2p for everyone to use</title>
        <description>&lt;p&gt;This is the last part of the seven-part series on g2p. In this part, we’ll discuss how to contribute your mappings to the main g2p library.&lt;/p&gt;

&lt;h3 id=&quot;g2p-blog-series-index&quot;&gt;G2P Blog Series Index&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-background&quot;&gt;Background&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-basic-mappings-gui&quot;&gt;How to write a basic mapping in G2P Studio&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-basic-mappings-local&quot;&gt;Writing mappings on your computer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-advanced-mappings&quot;&gt;Advanced mappings&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-applications&quot;&gt;ReadAlong Studio &amp;amp; Other Applications&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-preprocess&quot;&gt;Preprocessing mappings&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Contributing&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;advanced-contributing-your-rules-to-the-main-g2p-library&quot;&gt;Advanced: contributing your rules to the main &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; library&lt;/h2&gt;

&lt;p&gt;So, you’ve written some cool rules and you want to contribute, that’s awesome! There are lots of benefits to contributing your mapping to &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt;. First of all, once your mapping is accepted, you’ll have it available and live on &lt;a href=&quot;https://g2p-studio.herokuapp.com&quot;&gt;G2P Studio&lt;/a&gt;. Second, once the next version of &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; is released with your mapping, it will be automatically built in to the &lt;a href=&quot;https://blog.mothertongues.org/convertextract-app&quot;&gt;Convertextract&lt;/a&gt; library. Third, if your mapping is between a language’s writing system and the IPA, you can also get &lt;a href=&quot;https://blog.mothertongues.org/g2p-applications&quot;&gt;ReadAlongs&lt;/a&gt; support for your language.&lt;/p&gt;

&lt;p&gt;So, you write your mapping once, and you get three things for free (G2P studio, convertextract and readalongs). Here’s how:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Fork g2p, see &lt;a href=&quot;https://docs.github.com/en/github/getting-started-with-github/fork-a-repo&quot;&gt;https://docs.github.com/en/github/getting-started-with-github/fork-a-repo&lt;/a&gt; for more details&lt;/li&gt;
  &lt;li&gt;Add a folder for your language using the appropriate &lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_ISO_639-3_codes&quot;&gt;ISO 639.3 code&lt;/a&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p/mappings/langs&lt;/code&gt;, i.e., create the folder &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p/mapping/langs/&amp;lt;yourlangcode&amp;gt;/&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Add a &lt;code class=&quot;highlighter-rouge&quot;&gt;config.yaml&lt;/code&gt; file as described &lt;a href=&quot;https://blog.mothertongues.org/g2p-basic-mappings&quot;&gt;here&lt;/a&gt; in that folder&lt;/li&gt;
  &lt;li&gt;Add your mapping in that same folder&lt;/li&gt;
  &lt;li&gt;If your mapping is for an IPA mapping, you can optionally run &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p update&lt;/code&gt; to update your mapping into &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; and then generate the mapping as described in the &lt;a href=&quot;https://blog.mothertongues.org/g2p-applications&quot;&gt;ReadAlongs post&lt;/a&gt; between your language and English IPA.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p update&lt;/code&gt; to add your mapping to &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Add some test data to &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p/tests/public/data&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Submit your changes by creating a &lt;a href=&quot;https://github.com/roedoejet/g2p/compare&quot;&gt;pull request&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Finally, either myself, or somebody else will review the changes, and you will get credit for those mappings and be added to the &lt;a href=&quot;https://github.com/roedoejet/g2p/graphs/contributors&quot;&gt;list of contributors&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;adding-tests&quot;&gt;Adding tests&lt;/h3&gt;

&lt;p&gt;Testing your work is a really important part of software engineering. It lets us make changes to code and be confident that new features don’t break the expected functionality of &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt;. In order to add tests for your mapping, you can add a CSV/TSV/PSV file with 4 columns to &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p/tests/public/data&lt;/code&gt;. The name of the file should be just the input language code, for example &lt;code class=&quot;highlighter-rouge&quot;&gt;fra.psv&lt;/code&gt; for the French tests. The first column in the file is for the input language code, the second is for the output language code, the third is for the input text and the fourth is for the expected output of that mapping and input. Here is an example between French (fra) and French IPA (fra-ipa) asserting that ‘manger’ results in ‘mɑ̃ʒe’:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-psv&quot;&gt;fra|fra-ipa|manger|mɑ̃ʒe
fra|fra-ipa|écoutons|ekutɔ̃
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is a script for running tests at the root of the &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; project called &lt;code class=&quot;highlighter-rouge&quot;&gt;run_tests.py&lt;/code&gt;. You can run all of the tests here using the following:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;python&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run_tests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;py&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;all&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;or just run the language assertions including your tests like shown above using:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;python&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run_tests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;py&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;langs&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Writing g2p mappings that handle all the special cases can be quite tricky, especially when there are potential interactions between rules. To be confident that your g2p mappings work as you think, you should add a bunch of different words covering most of the spelling phenomena of the language you’re working on, with their expected IPA mapping. Ideally, you should also add some test cases to eng-ipa and eng-arpabet, to make sure the generated mapping works correctly. If you run into difficulties, feel free to post comments on this blog post or on the g2p library GitHub issues page!&lt;/p&gt;
</description>
        <pubDate>Wed, 27 Oct 2021 00:00:00 +0000</pubDate>
        <link>https://blog.mothertongues.org/g2p-contributing/</link>
        <guid isPermaLink="true">https://blog.mothertongues.org/g2p-contributing/</guid>
        
        <category>tutorial</category>
        
        <category>explanation</category>
        
        <category>tech-showcase</category>
        
        <category>g2p</category>
        
        
      </item>
    
      <item>
        <title>G2P Part 6: Solve inconsistencies in your text with a g2p pre-processing mapping</title>
        <description>&lt;p&gt;This is the 6th blog post in a seven-part series about a software tool called &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt;. In this post we’ll discuss how to use &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; to do the common natural language processing task of text normalization.&lt;/p&gt;

&lt;h3 id=&quot;g2p-blog-series-index&quot;&gt;G2P Blog Series Index&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-background&quot;&gt;Background&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-basic-mappings-gui&quot;&gt;How to write a basic mapping in G2P Studio&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-basic-mappings-local&quot;&gt;Writing mappings on your computer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-advanced-mappings&quot;&gt;Advanced mappings&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-applications&quot;&gt;ReadAlong Studio &amp;amp; Other Applications&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Preprocessing mappings&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-contributing&quot;&gt;Contributing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;adding-a-pre-processing-mapping&quot;&gt;Adding a ‘pre-processing’ mapping&lt;/h2&gt;

&lt;p&gt;It’s often not sufficient to just write a mapping between the characters in a language’s orthography and the IPA, as illustrated in &lt;a href=&quot;#use-case-2-a-language-with-multiple-writing-systems&quot;&gt;use case #2&lt;/a&gt; and &lt;a href=&quot;#use-case-3-converting-from-legacy-writing-systems&quot;&gt;use case #3&lt;/a&gt; below. Real-world text input is pretty messy, and if we want ReadAlongs or Convertextract - or any other tool that uses &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; - to work properly, we need to account for as much of that messiness as possible. Generally speaking, solving this kind of messiness is usually called ‘Text Normalization’.&lt;sup id=&quot;fnref:n&quot;&gt;&lt;a href=&quot;#fn:n&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; This ‘normalization’ can either be about ensuring that the same Unicode characters are used consistently, or it can also be about converting symbols into their pronounced form, like &amp;amp; or 123.&lt;/p&gt;

&lt;p&gt;For example, maybe your language uses underlines in its orthography. There are two commonly confusable Unicode characters here: U+0331 COMBINING MACRON BELOW and U+0332 COMBINING LOW LINE, and they look almost identical (cf. g̱ (U+0331) vs g̲ (U+0332)). So, let’s ‘normalize’ to consistently use U+0331.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;in&lt;/th&gt;
      &lt;th&gt;out&lt;/th&gt;
      &lt;th&gt;context_before&lt;/th&gt;
      &lt;th&gt;context_after&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;\u0332&lt;/td&gt;
      &lt;td&gt;\u0331&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Second, maybe we have a text that has a lot of puncutation like ‘&amp;amp;’ in it. We could write a mapping here for that as well (example in Danish):&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;in&lt;/th&gt;
      &lt;th&gt;out&lt;/th&gt;
      &lt;th&gt;context_before&lt;/th&gt;
      &lt;th&gt;context_after&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&amp;amp;&lt;/td&gt;
      &lt;td&gt;og&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;A third example can be seen in the &lt;a href=&quot;https://github.com/roedoejet/g2p/blob/main/g2p/mappings/langs/git/equiv.csv&quot;&gt;Gitksan mapping&lt;/a&gt; where the writing system uses a single quote ‘ to mark &lt;a href=&quot;https://en.wikipedia.org/wiki/Ejective_consonant&quot;&gt;ejectives&lt;/a&gt; and glottal stops, but there are many apostrophe-like confusable characters, like ’ or ʼ. In this mapping we can see that they’re all mapped to the single quote ‘ (U+0027).&lt;/p&gt;

&lt;p&gt;How do we link this up with the rest of our mappings? We recommend calling these mappings &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;yourlang&amp;gt;-equiv&lt;/code&gt;, for “equivalencies” which is more neutral and sometimes preferred than the term “normalization”. When you run &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p update&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; creates a &lt;a href=&quot;https://mathinsight.org/definition/directed_graph#:~:text=A%20directed%20graph%20is%20graph,digraph%20or%20a%20directed%20network.&quot;&gt;directed graph&lt;/a&gt; between all possible mappings. Similar to when &lt;a href=&quot;https://blog.mothertongues.org/g2p-applications&quot;&gt;using g2p for ReadAlongs&lt;/a&gt;, consider we have a &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; pipeline from ‘dan’ to ‘eng-arpabet’ that goes through the &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; graph like so, ‘dan’ → ‘dan-ipa’ → ‘eng-ipa’ → ‘eng-arpabet’. We basically want to add one more conversion along this path that does this normalization step. So, we &lt;a href=&quot;https://blog.mothertongues.org/g2p-basic-mappings-local&quot;&gt;configure a mapping&lt;/a&gt; for a mapping from ‘dan’ → ‘dan-equiv’ containing our normalizations, then we rename the existing mapping to ‘dan-equiv’ → ‘dan-ipa’. Then, we &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p update&lt;/code&gt; and the next time we run a mapping from ‘dan’ → ‘eng-arpabet’, it will pass through the normalization mapping too.&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:n&quot;&gt;
      &lt;p&gt;not to be confused with Unicode Normalization, which is different usage of the same term! &lt;a href=&quot;#fnref:n&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 26 Oct 2021 00:00:00 +0000</pubDate>
        <link>https://blog.mothertongues.org/g2p-preprocess/</link>
        <guid isPermaLink="true">https://blog.mothertongues.org/g2p-preprocess/</guid>
        
        <category>tutorial</category>
        
        <category>explanation</category>
        
        <category>tech-showcase</category>
        
        <category>g2p</category>
        
        
      </item>
    
      <item>
        <title>G2P Part 5: Applications for g2p, an example with ReadAlongs</title>
        <description>&lt;p&gt;This is the 5th post in a seven-part series about g2p. In this post, we discuss using g2p to create interactive text/audio books with ReadAlong Studio.&lt;/p&gt;

&lt;h3 id=&quot;g2p-blog-series-index&quot;&gt;G2P Blog Series Index&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-background&quot;&gt;Background&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-basic-mappings-gui&quot;&gt;How to write a basic mapping in G2P Studio&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-basic-mappings-local&quot;&gt;Writing mappings on your computer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-advanced-mappings&quot;&gt;Advanced mappings&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;ReadAlong Studio &amp;amp; Other Applications&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-preprocess&quot;&gt;Preprocessing mappings&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-contributing&quot;&gt;Contributing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This post will discuss the use of &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; in the &lt;a href=&quot;#readalongs&quot;&gt;ReadAlongs&lt;/a&gt; project for creating interactive audio/text documents.&lt;/p&gt;

&lt;h2 id=&quot;other-applications&quot;&gt;Other Applications&lt;/h2&gt;

&lt;p&gt;There are number of different software tools that are already making use of &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt;. For general purpose use in Python, have a look at &lt;a href=&quot;https://blog.mothertongues.org/g2p-advanced-mappings&quot;&gt;this post&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;convertextract&quot;&gt;Convertextract&lt;/h3&gt;

&lt;p&gt;Convertextract is a tool that lets you use &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; mappings to convert text inside a variety of different documents, including Microsoft Office documents like Powerpoint and Word coduments. Have a look at the &lt;a href=&quot;https://github.com/roedoejet/convertextract&quot;&gt;convertextract repo readme&lt;/a&gt; or at Fineen Davis’ &lt;a href=&quot;https://blog.mothertongues.org/convertextract-app&quot;&gt;blog post&lt;/a&gt; about the Convertextract GUI.&lt;/p&gt;

&lt;h3 id=&quot;readalongs&quot;&gt;ReadAlongs&lt;/h3&gt;

&lt;p&gt;ReadAlongs is a research project from the &lt;a href=&quot;https://nrc.canada.ca/en/research-development/research-collaboration/programs/canadian-indigenous-languages-technology-project&quot;&gt;National Research Council’s Indigenous Language Technology Project&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Communities engaged in language revitalization have potentially many different recordings of their language and some associated text, but mobilizing these materials into something that is educationally useful can be time consuming. It’s also tough from the learner’s perspective to try and follow along the text (maybe a Word Document) just by simply playing the audio. It’s easy to get lost in the recording quickly, and from personal experience, trying to do that usually involves a lot of frustrating rewinding.&lt;/p&gt;

&lt;p&gt;What if we could develop a tool that &lt;em&gt;automatically&lt;/em&gt; figured out what parts of the audio file corresponded to what parts of the text? In &lt;a href=&quot;https://en.wikipedia.org/wiki/Natural_language_processing&quot;&gt;Natural Language Processing&lt;/a&gt;, this is called &lt;em&gt;forced alignment&lt;/em&gt;, and this is fundamentally what the &lt;a href=&quot;https://github.com/ReadAlongs/Studio&quot;&gt;ReadAlongs project&lt;/a&gt; does. But how does it do it? In part, by using a whole bunch of &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; mappings!&lt;/p&gt;

&lt;p&gt;First of all, it’s good to know that forced alignment is essentially a “solved problem” for languages with a lot of data, thanks to people like David Huggins-Daines who is a collaborator on the ReadAlongs project. And, if you know Python, and have sentence-aligned parallel audio/text data in your language, you can train a model using one of the several tools out there developed for this task, like &lt;a href=&quot;https://montreal-forced-aligner.readthedocs.io/en/latest/&quot;&gt;the Montreal Forced Aligner&lt;/a&gt;. But what if you don’t have that much data (or any) and what if you don’t know Python? If your language has a &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; mapping between its writing system and the IPA, you can likely circumvent that whole process. Here’s how:&lt;/p&gt;

&lt;p&gt;We take a model for doing forced alignment on English and we manually write a &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; mapping from the writing system to IPA for the language we want to make a ReadAlong for. For example’s sake let’s say, Kanyen’kéha (Mohawk). This step requires somebody who is both familiar with the writing system used, and with the International Phonetic Alphabet.&lt;/p&gt;

&lt;p&gt;Then, we use the very cool Python library &lt;a href=&quot;https://github.com/dmort27/panphon&quot;&gt;PanPhon&lt;/a&gt; to figure out the mapping between the IPA characters in Mohawk and their &lt;em&gt;closest&lt;/em&gt; IPA equivalents in English. We call this mapping a “Kanyen’kéha IPA to English IPA” mapping. If you have already created your mapping between the orthography and the IPA, you can generate this “Kanyen’kéha IPA to English IPA” using the &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; command line.&lt;/p&gt;

&lt;p&gt;Then, we convert the ReadAlong in question from its original orthographic form all the way to English IPA (well, actually to ‘Arpabet’ which is an ASCII-compliant phonetic transcription standard that the alignment model understands).&lt;/p&gt;

&lt;p&gt;Then, after we “do the alignment” (ie figure out which parts of the audio correspond to which parts of the text), ReadAlongs puts it all back together again and ta-da! There is your aligned audio and text! Keep reading to see how to generate an X-to-English IPA mapping for your language.&lt;/p&gt;

&lt;h4 id=&quot;generate-your-mapping-between-your-languages-ipa-and-english-ipa&quot;&gt;Generate your mapping between your language’s IPA and English IPA&lt;/h4&gt;

&lt;p&gt;After &lt;a href=&quot;https://blog.mothertongues.org/g2p-basic-mappings-local&quot;&gt;installing&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; and once you have made your mapping, update &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; by running &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p update&lt;/code&gt;. When you add or modify any mapping, &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; doesn’t actually see it yet. &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p update&lt;/code&gt; is what scans all the mappings and makes them available to &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt;. Then, you can run &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p generate-mapping &amp;lt;input-code&amp;gt; --ipa&lt;/code&gt;. So in our example for Kanyen’kéha (moh) we would run&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;g2p generate-mapping moh &lt;span class=&quot;nt&quot;&gt;--ipa&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That will automatically generate a moh-ipa to eng-ipa mapping in &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p/mappings/langs/generated&lt;/code&gt; - do not edit this file or its configuration unless you really know what you’re doing, because it will get overwritten. After generation, you can run &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p update&lt;/code&gt; again and your mapping will be &lt;a href=&quot;https://blog.mothertongues.org/g2p-basic-mappings-local&quot;&gt;usable&lt;/a&gt; within &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt;!&lt;/p&gt;

&lt;h4 id=&quot;visualizing-the-process&quot;&gt;Visualizing the process&lt;/h4&gt;

&lt;p&gt;This is actually where the introductory picture to this blog series comes from! In the graphic below, you can see the word ‘bonjour’ in French converted to its IPA transcription. Then, its IPA transcription gets converted into its corresponding &lt;em&gt;English&lt;/em&gt; IPA transcription based on the generated mapping (notice how uvular /ʁ/ gets transformed to alveolo-palatal /ʒ/). Then finally, the English IPA form is converted to Arpabet. So in all, we have an input of ‘bonjour’ that gets output as ‘B AO N ZH UW ZH’ and the aligner runs on that form.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/g/bonjour-g2p-800-cc09ee.png&quot; srcset=&quot;/assets/images/g/bonjour-g2p-400-cc09ee.png 400w, /assets/images/g/bonjour-g2p-600-cc09ee.png 600w, /assets/images/g/bonjour-g2p-800-cc09ee.png 800w, /assets/images/g/bonjour-g2p-1000-cc09ee.png 1000w&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can recreate this type of animation using the G2P studio by selecting the French (&lt;code class=&quot;highlighter-rouge&quot;&gt;fra&lt;/code&gt;) to English Arpabet (&lt;code class=&quot;highlighter-rouge&quot;&gt;eng-arpabet&lt;/code&gt;) mapping, choosing ‘animate’ and then typing your text in the input area as seen below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/g/g2p-animate-800-4e082a.png&quot; srcset=&quot;/assets/images/g/g2p-animate-400-4e082a.png 400w, /assets/images/g/g2p-animate-600-4e082a.png 600w, /assets/images/g/g2p-animate-800-4e082a.png 800w, /assets/images/g/g2p-animate-980-4e082a.png 980w&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;what-can-you-do-with-your-aligned-audiotext&quot;&gt;What can you do with your aligned audio/text?&lt;/h4&gt;

&lt;p&gt;ReadAlongs exports to a variety of formats, including epub (for e-readers), &lt;a href=&quot;https://www.fon.hum.uva.nl/praat/&quot;&gt;Praat&lt;/a&gt; TextGrids, &lt;a href=&quot;https://archive.mpi.nl/tla/elan&quot;&gt;ELAN&lt;/a&gt; files, various subtitle formats, and an embeddable web component for your website.&lt;/p&gt;

&lt;p&gt;Below is an example of the embeddable web component in Danish.&lt;/p&gt;

&lt;div class=&quot;readalong&quot;&gt;
    &lt;!-- ReadAlong Web Component --&gt;
    &lt;link href=&quot;https://fonts.googleapis.com/css?family=Lato|Material+Icons|Material+Icons+Outlined&quot; rel=&quot;stylesheet&quot; /&gt;
    &lt;script type=&quot;module&quot; src=&quot;https://unpkg.com/@roedoejet/readalong/dist/read-along/read-along.esm.js&quot;&gt;&lt;/script&gt;
    &lt;read-along text=&quot;/assets/ras/output.xml&quot; alignment=&quot;/assets/ras/output.smil&quot; audio=&quot;/assets/ras/output.wav&quot;&gt;&lt;/read-along&gt;
    &lt;noscript&gt;Please enable JavaScript to view the ReadAlong&lt;/noscript&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 25 Oct 2021 00:00:00 +0000</pubDate>
        <link>https://blog.mothertongues.org/g2p-applications/</link>
        <guid isPermaLink="true">https://blog.mothertongues.org/g2p-applications/</guid>
        
        <category>tutorial</category>
        
        <category>explanation</category>
        
        <category>tech-showcase</category>
        
        <category>g2p</category>
        
        
      </item>
    
      <item>
        <title>G2P Part 4: advanced mappings with g2p</title>
        <description>&lt;p&gt;This is the 4th blog post in a seven-part series about g2p. This is a relatively long post, where we get in to all the nitty gritty of writing complex mappings in g2p.&lt;/p&gt;

&lt;h3 id=&quot;g2p-blog-series-index&quot;&gt;G2P Blog Series Index&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-background&quot;&gt;Background&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-basic-mappings-gui&quot;&gt;How to write a basic mapping in G2P Studio&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-basic-mappings-local&quot;&gt;Writing mappings on your computer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Advanced mappings&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-applications&quot;&gt;ReadAlong Studio &amp;amp; Other Applications&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-preprocess&quot;&gt;Preprocessing mappings&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-contributing&quot;&gt;Contributing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;advanced-a-deeper-dive-into-writing-tricky-rules&quot;&gt;Advanced: A deeper dive into writing tricky rules&lt;/h2&gt;

&lt;p&gt;You may have noticed that the rules described in the previous posts for converting words like ‘dog’ and ‘cat’ to IPA are woefully incomplete. The real world use cases for &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; often need to account for a lot more messiness than was described in the artificial example above. In fact, for languages like English, &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; is likely &lt;strong&gt;not&lt;/strong&gt; a good solution. The English writing system is notoriously inconsistent, and there already exist a variety of other tools that account for many of the lexical (word-specific) idiosyncracies in deriving the IPA form from the orthographic form. For many Indigenous languages, the writing system is sufficiently close to the spoken form that &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; is a very appropriate solution. In the following sections, I’ll describe some common problems when writing rules, and how to fix them.&lt;/p&gt;

&lt;p&gt;As this post is quite long, please refer to the following index for quick navigation:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#rule-ordering&quot;&gt;Rule Ordering&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#unicode-escape-sequences&quot;&gt;Unicode Escape Sequences&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#special-settings-for-your-mapping-configuration&quot;&gt;Special Settings &amp;amp; Configuration&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#defining-sets-of-characters&quot;&gt;Defining variables&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#regular-expressions&quot;&gt;Regular Expresssions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#using-specific-indices&quot;&gt;Using indices&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;rule-ordering&quot;&gt;Rule Ordering&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;The order of your rules in &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; really matters&lt;/strong&gt;! This is because some rules can either create or remove the context for other rules to apply. In linguistics, these rule ordering patterns are usually talked about as either &lt;a href=&quot;https://linguistics.stackexchange.com/questions/6084/whats-the-difference-between-counterbleeding-bleeding-and-feeding&quot;&gt;feeding, bleeding, counter-feeding, or counter-bleeding&lt;/a&gt; relationships. There are potentially valid reasons to want to encode any of these types of relationships in your rules.&lt;/p&gt;

&lt;p&gt;To illustrate a possible problem, let’s consider a &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; mapping for language that converts ‘a̱’ to ‘ə’ and ‘a’ to ‘æ’. ‘a̱’ is a sequence of a regular ‘a’ followed by a combining macron below (\u0331). Because \u0331 (‘a̱’) is easily confusable with \u0332 (‘a̲’), in order to follow the rule of thumb for &lt;a href=&quot;#unicode-escape-sequences&quot;&gt;Unicode escape sequences&lt;/a&gt;, I’ll write the rules as follows:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;in&lt;/th&gt;
      &lt;th&gt;out&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;a&lt;/td&gt;
      &lt;td&gt;æ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;a\u0331&lt;/td&gt;
      &lt;td&gt;ə&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Now, assuming an input to this mapping of ‘a̱’ (a\u0331), we would get ‘æ̱’ (æ\u0331) instead of ‘ə’. Why is that? Because the first rule applies and turns ‘a’ into ‘æ’ before the second rule has a chance to apply. This is called a &lt;em&gt;bleeding&lt;/em&gt; relationship because the first rule &lt;em&gt;bleeds&lt;/em&gt; the context of the second rule from applying. In order to avoid it, we would need to write our rules as follows:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;in&lt;/th&gt;
      &lt;th&gt;out&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;a\u0331&lt;/td&gt;
      &lt;td&gt;ə&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;a&lt;/td&gt;
      &lt;td&gt;æ&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;With this ordering, our input of ‘a̱’ (a\u0331) would turn into ‘ə’ as we expect, and our input of ‘a’ would turn into æ also as expected. Try it out on the &lt;a href=&quot;https://g2p-studio.herokuapp.com&quot;&gt;G2P Studio&lt;/a&gt; if you don’t believe me!&lt;/p&gt;

&lt;h3 id=&quot;unicode-escape-sequences&quot;&gt;Unicode Escape Sequences&lt;/h3&gt;

&lt;p&gt;Sometimes you need rules to convert from characters that either don’t render very well, or render in a confusing way. In those cases, you can use &lt;a href=&quot;https://www.rapidtables.com/code/text/unicode-characters.html&quot;&gt;Unicode escape sequences&lt;/a&gt;. For example, maybe you want to write a rule that converts the standard ASCII ‘g’ to the strict IPA Unicode /ɡ/. As you can likely see in your browser, these characters look very similar, but they’re not the same character! The ASCII ‘g’ is U+0067 and the strict IPA ‘ɡ’ is U+0261. So, you can write a rule as follows:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;in&lt;/th&gt;
      &lt;th&gt;out&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;\u0067&lt;/td&gt;
      &lt;td&gt;\u0261&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;or using &lt;a href=&quot;https://www.json.org/json-en.html&quot;&gt;JSON&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;in&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\u&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;0067&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;out&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\u&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;0261&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is also helpful when you need to write rules between combining characters or other confusable characters. The &lt;strong&gt;rule of thumb&lt;/strong&gt; is, if your rules are clearer using Unicode escape sequences, do it! Otherwise, just use the normal character in place.&lt;/p&gt;

&lt;h4 id=&quot;tip-for-finding-a-characters-codepoint&quot;&gt;Tip for finding a character’s codepoint&lt;/h4&gt;

&lt;p&gt;If you want to find out what a particular character’s \uXXXX notation is, simply paste the character(s) into the search bar of this handy site: &lt;a href=&quot;https://unicode.scarfboy.com/&quot;&gt;https://unicode.scarfboy.com/&lt;/a&gt; and you will get a list of the Unicode codepoints for those characters.&lt;/p&gt;

&lt;p&gt;Note, you might find some resources that write a character’s codepoint as U+0261 instead of \u0261. The U+XXXX format is the one officially adopted by the Unicode consortium, as early as of Unicode 2.0.0. However, the Python programming language uses the &lt;a href=&quot;https://docs.python.org/3/reference/lexical_analysis.html#:~:text=escape%20sequences%20only%20recognized%20in%20string%20literals%20are%3A&quot;&gt;\uXXXX format&lt;/a&gt;. The important part is recognizing that the Unicode codepoint is identified by the XXXX hexadecimal sequence.&lt;/p&gt;

&lt;h3 id=&quot;special-settings-for-your-mapping-configuration&quot;&gt;Special settings for your mapping configuration&lt;/h3&gt;

&lt;p&gt;You can add extra settings to your configuration file to change the way that &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; interprets your mappings. Below is a list of possible settings and their use. It’s best practise to declare all the setting keys below for each individual mapping in your &lt;code class=&quot;highlighter-rouge&quot;&gt;config.yaml&lt;/code&gt;, however default values do exist. Your setting keys must be declared on the same level as all of the other keys (&lt;code class=&quot;highlighter-rouge&quot;&gt;language_name&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;in_lang&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;out_lang&lt;/code&gt; etc). These settings are also available in the G2P Studio as check boxes to select or unselect.&lt;/p&gt;

&lt;h5 id=&quot;rule_ordering-default-as-written&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rule_ordering&lt;/code&gt; (default: ‘as-written’)&lt;/h5&gt;
&lt;p&gt;As described in the earlier part of this post, your rules apply in the order you write them. And as described in the advanced section on &lt;a href=&quot;#rule-ordering&quot;&gt;rule ordering&lt;/a&gt;, sometimes this can make your mapping produce unexpected results!&lt;/p&gt;

&lt;p&gt;If you set your mapping to &lt;code class=&quot;highlighter-rouge&quot;&gt;rule_ordering: 'apply-longest-first'&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; will sort all of your rules based on the length of the input to the rule, so that rules with longer inputs apply before rules with shorter inputs. This prevents some common ‘bleeding’ rule-ordering relationships described in the &lt;a href=&quot;#rule-ordering&quot;&gt;rule ordering&lt;/a&gt; section. So, if you declared your rules as:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;in&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;out&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;in&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ab&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;out&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, with &lt;code class=&quot;highlighter-rouge&quot;&gt;rule_ordering: 'as-written'&lt;/code&gt; (the default), you would get ‘bb’ as the output for the input ‘ab’. Whereas with &lt;code class=&quot;highlighter-rouge&quot;&gt;rule_ordering: 'apply-longest-first'&lt;/code&gt;, you would get ‘c’ as the output for the input ‘ab’.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;mappings&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;language_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;English&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;display_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;English to IPA&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;in_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;out_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng-ipa&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mapping&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;authors&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Aidan Pine&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng_to_ipa.json&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;rule_ordering&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;apply-longest-first'&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# &amp;lt;------- Add this&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;case_sensitive-default-true&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;case_sensitive&lt;/code&gt; (default: true)&lt;/h5&gt;

&lt;p&gt;The default is to treat your rules as case sensitive, but setting &lt;code class=&quot;highlighter-rouge&quot;&gt;case_sensitive: false&lt;/code&gt;, will make your rules case insensitive.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;mappings&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;language_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;English&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;display_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;English to IPA&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;in_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;out_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng-ipa&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mapping&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;authors&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Aidan Pine&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng_to_ipa.json&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;case_sensitive&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# &amp;lt;------- Add this&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;escape_special-default-false&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;escape_special&lt;/code&gt; (default: false)&lt;/h5&gt;

&lt;p&gt;As I will describe later in the section on &lt;a href=&quot;#regular-expressions&quot;&gt;regular expressions&lt;/a&gt;, you can define rules using ‘special’ characters. By default, these characters are interpreted as ‘special’, but if you want all special characters in your mapping to be interpreted as their actual characters, you can set &lt;code class=&quot;highlighter-rouge&quot;&gt;escape_special: true&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;mappings&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;language_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;English&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;display_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;English to IPA&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;in_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;out_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng-ipa&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mapping&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;authors&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Aidan Pine&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng_to_ipa.json&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;escape_special&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# &amp;lt;------- Add this&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;norm_form-default-nfd&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;norm_form&lt;/code&gt; (default: “NFD”)&lt;/h5&gt;

&lt;p&gt;If you’ve never heard of Unicode normalization don’t worry, you’re not alone! But, for writing rules and mappings using &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt;, there can be some surprising ‘gotcha’ moments if you don’t choose the right normalization strategy.&lt;/p&gt;

&lt;p&gt;The basic gist of the problem is that there can be multiple ways to write the &lt;em&gt;same&lt;/em&gt; character in Unicode, depending on whether you use ‘combining characters’ to type or not. For example, on some keyboards, you might type ‘é’ by writing an e first and then another keystroke to type the acute accent that sits above it. The Unicode representation for this would be \u0065 (e) followed by \u0301 (a combining acute accent), however there is an entirely separate Unicode code point that has these two characters &lt;em&gt;pre-composed&lt;/em&gt; (\u00e9), which some keyboard layouts will generate instead.&lt;/p&gt;

&lt;p&gt;Many fonts will render these two different representations identically and it can be really difficult and confounding as a user if both appear in the same text. This causes problems, like text that looks identical will not appear in “find &amp;amp; replace” or search engines will not find the text that you’re looking for, even though something that &lt;em&gt;looks&lt;/em&gt; identical exists. Luckily, there is a standard for normalizing these differences so that all instances of sequences like \u0065\u0301 would be (NF)Composed into \u00e9, or the opposite direction where all instances of \u00e9 would be (NF)Decomposed into \u0065\u0301. For a more in-depth conversation on this, check out &lt;a href=&quot;https://withblue.ink/2019/03/11/why-you-need-to-normalize-unicode-strings.html&quot;&gt;this blog article&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;mappings&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;language_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;English&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;display_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;English to IPA&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;in_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;out_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng-ipa&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mapping&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;authors&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Aidan Pine&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng_to_ipa.json&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;norm_form&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;NFC&quot;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# &amp;lt;------- Add your Unicode normalization strategy here&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;out_delimiter-default-&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;out_delimiter&lt;/code&gt; (default: ‘’)&lt;/h5&gt;

&lt;p&gt;Some mappings require that a delimiting character (or delimiting characters) be inserted whenever a rule applies. So, using the example from the first part of this post, maybe you want &lt;code class=&quot;highlighter-rouge&quot;&gt;kæt&lt;/code&gt; to go to &lt;code class=&quot;highlighter-rouge&quot;&gt;kʰ|æ|t&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;kʰæt&lt;/code&gt;. For this, you would set &lt;code class=&quot;highlighter-rouge&quot;&gt;out_delimiter: &quot;|&quot;&lt;/code&gt; in your mapping.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;mappings&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;language_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;English&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;display_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;English to IPA&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;in_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;out_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng-ipa&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mapping&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;authors&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Aidan Pine&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng_to_ipa.json&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;out_delimiter&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;|&quot;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# &amp;lt;------- Add your delimiter here&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;reverse-default-false&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;reverse&lt;/code&gt; (default: false)&lt;/h5&gt;

&lt;p&gt;Setting &lt;code class=&quot;highlighter-rouge&quot;&gt;reverse: true&lt;/code&gt; will try to reverse the mappings so that all characters defined as &lt;code class=&quot;highlighter-rouge&quot;&gt;out&lt;/code&gt; in your mapping become the input characters and vice versa. Except for a few cases, this is unlikely to work very well for advanced mapings.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;mappings&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;language_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;English&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;display_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;English to IPA&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;in_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;out_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng-ipa&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mapping&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;authors&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Aidan Pine&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng_to_ipa.json&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# &amp;lt;------- Add this&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;prevent_feeding-default-false&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;prevent_feeding&lt;/code&gt; (default: false)&lt;/h5&gt;

&lt;p&gt;Let’s say you have the following rules:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;in&lt;/th&gt;
      &lt;th&gt;out&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;kw&lt;/td&gt;
      &lt;td&gt;kʷ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;k&lt;/td&gt;
      &lt;td&gt;kʲ&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Let’s say the intended output here is that whenever we get a &lt;code class=&quot;highlighter-rouge&quot;&gt;kw&lt;/code&gt; as an input, we get &lt;code class=&quot;highlighter-rouge&quot;&gt;kʷ&lt;/code&gt; and whenever we get &lt;code class=&quot;highlighter-rouge&quot;&gt;k&lt;/code&gt; we get &lt;code class=&quot;highlighter-rouge&quot;&gt;kʲ&lt;/code&gt;. Ordered in the way they are defined, an input of &lt;code class=&quot;highlighter-rouge&quot;&gt;kw&lt;/code&gt; will produce &lt;code class=&quot;highlighter-rouge&quot;&gt;kʲʷ&lt;/code&gt; and ordered the other way, an input of &lt;code class=&quot;highlighter-rouge&quot;&gt;kw&lt;/code&gt; will produce &lt;code class=&quot;highlighter-rouge&quot;&gt;kʲw&lt;/code&gt;. Neither of these are correct though! So, how do we solve this? There is a setting called &lt;code class=&quot;highlighter-rouge&quot;&gt;prevent_feeding&lt;/code&gt; which, if set to true, will prevent the output of one rule from being processed by any subsequent rule. As described in the &lt;a href=&quot;#rule-ordering&quot;&gt;rule ordering section&lt;/a&gt; the process when one rule provides the context for another rule to apply is called ‘feeding’. And so this setting is named &lt;code class=&quot;highlighter-rouge&quot;&gt;prevent_feeding&lt;/code&gt; because it prevents that from happening. Note, setting &lt;code class=&quot;highlighter-rouge&quot;&gt;prevent_feeding: true&lt;/code&gt; for your whole mapping will do this for every rule. If you just want to prevent feeding for one particular rule, you can write your rules in JSON and add the key to the specific rule you want to prevent feeding for.&lt;/p&gt;

&lt;p&gt;Prevent feeding for a single rule (in JSON rule mapping file):&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;in&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;kw&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;out&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;kʷ&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;prevent_feeding&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;in&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;k&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;out&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;kʲ&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Prevent feeding for every rule (in &lt;code class=&quot;highlighter-rouge&quot;&gt;config.yaml&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;mappings&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;language_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;English&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;display_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;English to IPA&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;in_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;out_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng-ipa&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mapping&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;authors&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Aidan Pine&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng_to_ipa.json&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;prevent_feeding&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# &amp;lt;------- Add this&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;defining-sets-of-characters&quot;&gt;Defining sets of characters&lt;/h3&gt;

&lt;p&gt;Some rules are written with repeating sets of characters that can be tedious to write out. As a result, we might want to define certain sets of reusable characters using a &lt;em&gt;variable&lt;/em&gt; name. These can be written using special types of mapping files in &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example, consider a series of rules which contextually apply only between vowels. Let’s say as an example of one of those rules, that &lt;code class=&quot;highlighter-rouge&quot;&gt;dd&lt;/code&gt; turns to &lt;code class=&quot;highlighter-rouge&quot;&gt;ð&lt;/code&gt; when it exists between two vowels. This language has the following vowels in its inventory: &lt;code class=&quot;highlighter-rouge&quot;&gt;a,e,i,o,u,æ,å,ø&lt;/code&gt;. You could write the rules like this&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;in&lt;/th&gt;
      &lt;th&gt;out&lt;/th&gt;
      &lt;th&gt;context_before&lt;/th&gt;
      &lt;th&gt;context_after&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;dd&lt;/td&gt;
      &lt;td&gt;ð&lt;/td&gt;
      &lt;td&gt;(a|e|i|o|u|æ|å|ø)&lt;/td&gt;
      &lt;td&gt;(a|e|i|o|u|æ|å|ø)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;But, if there are lots of rules with these vowels, this could get very tedious, not to mention annoying and error-prone if the characters in the set change at some point. It is also less readable, and leaves the reader of the mapping to infer the meaning of the rule.&lt;/p&gt;

&lt;p&gt;So, in a separate file, by convention it is usually called &lt;code class=&quot;highlighter-rouge&quot;&gt;abbreviations.csv&lt;/code&gt;, you can define a list of sets where each row is a new set. The first column contains the name of the set (by convention this is capitalized), and you can add characters to every following column. So, for example:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;variable name&lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;VOWEL&lt;/td&gt;
      &lt;td&gt;a&lt;/td&gt;
      &lt;td&gt;e&lt;/td&gt;
      &lt;td&gt;i&lt;/td&gt;
      &lt;td&gt;o&lt;/td&gt;
      &lt;td&gt;u&lt;/td&gt;
      &lt;td&gt;æ&lt;/td&gt;
      &lt;td&gt;å&lt;/td&gt;
      &lt;td&gt;ø&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CONSONANT&lt;/td&gt;
      &lt;td&gt;p&lt;/td&gt;
      &lt;td&gt;b&lt;/td&gt;
      &lt;td&gt;t&lt;/td&gt;
      &lt;td&gt;d&lt;/td&gt;
      &lt;td&gt;k&lt;/td&gt;
      &lt;td&gt;g&lt;/td&gt;
      &lt;td&gt;f&lt;/td&gt;
      &lt;td&gt;s&lt;/td&gt;
      &lt;td&gt;h&lt;/td&gt;
      &lt;td&gt;v&lt;/td&gt;
      &lt;td&gt;j&lt;/td&gt;
      &lt;td&gt;r&lt;/td&gt;
      &lt;td&gt;l&lt;/td&gt;
      &lt;td&gt;m&lt;/td&gt;
      &lt;td&gt;n&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;FRONT&lt;/td&gt;
      &lt;td&gt;i&lt;/td&gt;
      &lt;td&gt;e&lt;/td&gt;
      &lt;td&gt;œ&lt;/td&gt;
      &lt;td&gt;ø&lt;/td&gt;
      &lt;td&gt;y&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;BACK&lt;/td&gt;
      &lt;td&gt;u&lt;/td&gt;
      &lt;td&gt;o&lt;/td&gt;
      &lt;td&gt;a&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Then, in your configuration, you can add the file to a specific mapping using &lt;code class=&quot;highlighter-rouge&quot;&gt;abbreviations: abbreviations.csv&lt;/code&gt;. After adding it to your mapping, you can write the above rule like this instead:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;in&lt;/th&gt;
      &lt;th&gt;out&lt;/th&gt;
      &lt;th&gt;context_before&lt;/th&gt;
      &lt;th&gt;context_after&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;dd&lt;/td&gt;
      &lt;td&gt;ð&lt;/td&gt;
      &lt;td&gt;VOWEL&lt;/td&gt;
      &lt;td&gt;VOWEL&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;You can also use abbreviations like this in the G2P studio by writing them in the section at the bottom of the page titled ‘Custom Abbreviations’ They will be automatically applied to your custom rules above.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/g/g2p-abbs-800-7cd2be.png&quot; srcset=&quot;/assets/images/g/g2p-abbs-400-7cd2be.png 400w, /assets/images/g/g2p-abbs-600-7cd2be.png 600w, /assets/images/g/g2p-abbs-800-7cd2be.png 800w, /assets/images/g/g2p-abbs-968-7cd2be.png 968w&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;regular-expressions&quot;&gt;Regular Expressions&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Regular_expression&quot;&gt;Regular expressions&lt;/a&gt; are used ubiquitously in programming to define certain search patterns in text. In fact, this is how &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; rules work! They eventually get compiled into a regular expression too. For the most part, you can add regular expression syntax to your rules. So, suppose you wanted to write a rule that deleted word-final ‘s’, you could write the following:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;in&lt;/th&gt;
      &lt;th&gt;out&lt;/th&gt;
      &lt;th&gt;context_before&lt;/th&gt;
      &lt;th&gt;context_after&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;s&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;\B&lt;/td&gt;
      &lt;td&gt;\b&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;As you can see &lt;a href=&quot;https://cheatography.com/davechild/cheat-sheets/regular-expressions/&quot;&gt;in this handy regular expression cheatsheet&lt;/a&gt; our rule turns ‘s’ into nothing if it is preceded by \B (any character that is not a word boundary) and followed by \b (word boundary).&lt;/p&gt;

&lt;p&gt;Note: There are some ‘gotchas’ with writing regular expressions using g2p. This is a technical note, but if you’re writing some complicated regular expressions and they’re not working, don’t hesitate to &lt;a href=&quot;https://github.com/roedoejet/g2p/issues/new/choose&quot;&gt;raise an issue&lt;/a&gt;. For example there are some active issues around edge cases where regular expressions and &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt;’s custom &lt;a href=&quot;#using-specific-indices&quot;&gt;syntax for indices&lt;/a&gt; don’t play nice together.&lt;/p&gt;

&lt;h3 id=&quot;using-specific-indices&quot;&gt;Using specific indices&lt;/h3&gt;

&lt;p&gt;Even people familiar with using &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; might not be aware that one of its main features is that it preserves indices between input and output segments. Meaning that when we convert from something like ‘kæt’ to ‘kʰæt’ as in the first example, &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; knows that it’s the ‘k’ that turned into the ‘k’ and ‘ʰ’ as seen below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/g/k-to-kh-800-7e64e3.png&quot; srcset=&quot;/assets/images/g/k-to-kh-400-7e64e3.png 400w, /assets/images/g/k-to-kh-600-7e64e3.png 600w, /assets/images/g/k-to-kh-800-7e64e3.png 800w, /assets/images/g/k-to-kh-942-7e64e3.png 942w&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The default interpretation of rule indices by &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; is that it matches the characters between the input and the output one-by-one in a given rule until it reaches the end of either one, then it matches any remaining characters in the longer part (input or output) to the last character of the shorter part. For example, compare the following examples where ‘abc’ is converted to ‘ab’ and gloms the excess input character onto the last output character:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/g/abc-ab-800-3a0e08.png&quot; srcset=&quot;/assets/images/g/abc-ab-400-3a0e08.png 400w, /assets/images/g/abc-ab-600-3a0e08.png 600w, /assets/images/g/abc-ab-800-3a0e08.png 800w, /assets/images/g/abc-ab-942-3a0e08.png 942w&quot; /&gt;&lt;/p&gt;

&lt;p&gt;and where ‘ab’ is converted to ‘abc’ and gloms the excess output character onto the last input character:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/g/ab-abc-800-418b5c.png&quot; srcset=&quot;/assets/images/g/ab-abc-400-418b5c.png 400w, /assets/images/g/ab-abc-600-418b5c.png 600w, /assets/images/g/ab-abc-800-418b5c.png 800w, /assets/images/g/ab-abc-942-418b5c.png 942w&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But what if - for some imaginary reason - we want to show a rule where ‘ab’ turns into ‘bca’, and specifically make note that it was ‘b’ that turned into ‘bc’, and ‘a’ stays as ‘a’? Well, we can use special &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; syntax for explicitly writing these indices. Instead of,&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;in&lt;/th&gt;
      &lt;th&gt;out&lt;/th&gt;
      &lt;th&gt;context_before&lt;/th&gt;
      &lt;th&gt;context_after&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;ab&lt;/td&gt;
      &lt;td&gt;bca&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;we can write&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;in&lt;/th&gt;
      &lt;th&gt;out&lt;/th&gt;
      &lt;th&gt;context_before&lt;/th&gt;
      &lt;th&gt;context_after&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;a{1}b{2}&lt;/td&gt;
      &lt;td&gt;bc{2}a{1}&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Now, our indices will reflect our imaginary need to index ‘a’ with ‘a’ and ‘b’ with ‘bc’:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/g/ab-bca-i-800-bfa620.png&quot; srcset=&quot;/assets/images/g/ab-bca-i-400-bfa620.png 400w, /assets/images/g/ab-bca-i-600-bfa620.png 600w, /assets/images/g/ab-bca-i-800-bfa620.png 800w, /assets/images/g/ab-bca-i-1000-bfa620.png 1000w&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Using the explicit indices syntax will break up your rule into a number of smaller rules that apply the same defaults of above but to explicit sets of characters. You &lt;strong&gt;must&lt;/strong&gt; use curly brackets, but the choice of character you put inside is arbitrary — it just has to match on both sides. By convention, we use natural numbers. This will match all the characters to the left of each pair of curly brackets in the input with the matching index in the output. So here, ‘a’ is matched with ‘a’ and ‘b’ is matched with ‘bc’.&lt;/p&gt;

&lt;p&gt;These can get fairly complicated, so we recommend only using this functionality either for demonstration purposes, or for specific applications which require the preservation of indices.&lt;/p&gt;

&lt;h3 id=&quot;footnotes&quot;&gt;Footnotes&lt;/h3&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;You’ll notice that the syntax here is a little weird, what the heck are all of those pipes (the up-down things like |) doing there? That’s because I’m using &lt;a href=&quot;https://en.wikipedia.org/wiki/Regular_expression&quot;&gt;regular expressions&lt;/a&gt; to express a &lt;strong&gt;OR&lt;/strong&gt; e &lt;strong&gt;OR&lt;/strong&gt; u etc… For more info, check out the &lt;a href=&quot;#regular-expressions&quot;&gt;section on regular expressions&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 24 Oct 2021 00:00:00 +0000</pubDate>
        <link>https://blog.mothertongues.org/g2p-advanced-mappings/</link>
        <guid isPermaLink="true">https://blog.mothertongues.org/g2p-advanced-mappings/</guid>
        
        <category>tutorial</category>
        
        <category>explanation</category>
        
        <category>python</category>
        
        <category>g2p</category>
        
        
      </item>
    
      <item>
        <title>G2P Part 3: Make a basic mapping with g2p</title>
        <description>&lt;p&gt;This is the third blog post in a seven-part series describing how to make a basic mapping with &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; on your computer. If you haven’t already, please read the &lt;a href=&quot;https://blog.mothertongues.org/g2p-background&quot;&gt;introductory blog post for g2p&lt;/a&gt; and &lt;a href=&quot;https://blog.mothertongues.org/g2p-basic-mappings-gui&quot;&gt;the post about basic mappings with G2P Studio&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-background&quot;&gt;Background&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-basic-mappings-gui&quot;&gt;How to write a basic mapping in G2P Studio&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Writing mappings on your computer&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-advanced-mappings&quot;&gt;Advanced mappings&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-applications&quot;&gt;ReadAlong Studio &amp;amp; Other Applications&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-preprocess&quot;&gt;Preprocessing mappings&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-contributing&quot;&gt;Contributing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;what-you-need-to-know-to-understand-this-post&quot;&gt;What you need to know to understand this post&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;To be able to follow along, I suggest having some sort of text editor, like &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You will also need to have &lt;a href=&quot;https://www.python.org/&quot;&gt;Python&lt;/a&gt; installed on your computer. If you need a bit of help, my colleague Eddie Antonio Santos wrote a very good blog article on &lt;a href=&quot;https://eddieantonio.ca/blog/2020/01/26/installing-python-on-macos/&quot;&gt;installing Python on Mac&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;whats-the-gist-of-what-were-about-to-do&quot;&gt;What’s the gist of what we’re about to do?&lt;/h2&gt;

&lt;p&gt;As described in the &lt;a href=&quot;https://blog.mothertongues.org/g2p-basic-mappings-gui&quot;&gt;previous post&lt;/a&gt;, in order to use &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; we need to understand the building blocks; &lt;strong&gt;rules&lt;/strong&gt; and &lt;strong&gt;mappings&lt;/strong&gt;. &lt;strong&gt;Rules&lt;/strong&gt; are patterns that describe how to turn some input text into some other output text. When we combine a series of ordered rules together for a specific purpose, we call this a &lt;strong&gt;mapping&lt;/strong&gt;. This blog post will show you how to write rules and mappings on your computer to use with &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;how-do-i-follow-along&quot;&gt;How do I follow along?&lt;/h2&gt;

&lt;p&gt;You can follow along by writing your rules and mappings on your computer using a text editor like &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You should also install &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; by running &lt;code class=&quot;highlighter-rouge&quot;&gt;pip3 install g2p&lt;/code&gt;&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; in your command line or an &lt;a href=&quot;https://code.visualstudio.com/docs/editor/integrated-terminal&quot;&gt;integrated terminal&lt;/a&gt; within &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt;. See &lt;a href=&quot;https://www.kaggle.com/getting-started/99468&quot;&gt;this post&lt;/a&gt; for more information on installing Python packages with pip.&lt;/p&gt;

&lt;h3 id=&quot;use-in-python-and-the-command-line&quot;&gt;Use in Python and the command line&lt;/h3&gt;

&lt;h4 id=&quot;installation&quot;&gt;Installation&lt;/h4&gt;

&lt;p&gt;There are two ways to install &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;install the latest published version of &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt;, for use as is;&lt;/li&gt;
  &lt;li&gt;install an editable version to create your own mappings or edit &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; yourself.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To install the latest published version of &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt;, we recommend installing it using &lt;a href=&quot;https://en.wikipedia.org/wiki/Pip_(package_manager)&quot;&gt;pip&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;pip&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g2p&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you are going to be creating your own mappings or editing &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; in any way, you must first fork &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; by going to &lt;a href=&quot;https://github.com/roedoejet/g2p&quot;&gt;https://github.com/roedoejet/g2p&lt;/a&gt; and forking the project to your own GitHub space.&lt;/p&gt;

&lt;p&gt;Once you’ve forked &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt;, clone your own fork:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/YourGitHubUsername/g2p.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and then do an &lt;em&gt;editable&lt;/em&gt; pip installation:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;g2p &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; pip &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;usage&quot;&gt;Usage&lt;/h4&gt;

&lt;p&gt;Using &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; within Python can be done programatically using the &lt;code class=&quot;highlighter-rouge&quot;&gt;make_g2p&lt;/code&gt; function:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;g2p&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make_g2p&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transducer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make_g2p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'dan'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'eng-arpabet'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transducer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'hej'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output_string&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;'HH EH Y'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;command-line-interface&quot;&gt;Command Line Interface&lt;/h4&gt;

&lt;p&gt;You can also use &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; from the command line. The basic command for conversions is:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;g2p convert &amp;lt;input_text&amp;gt; &amp;lt;in_lang&amp;gt; &amp;lt;out_lang&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So in practice:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;g2p convert hej dan eng-arpabet
HH EH YY
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;basic-rule-writing&quot;&gt;Basic Rule writing&lt;/h2&gt;

&lt;p&gt;Each rule must be defined to have a sequence of one or more input characters and a sequence of zero or more output characters. We can define these rules in &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; either using a tabular spreadsheet format (CSV) or using a format called JavaScript Object Notation or &lt;a href=&quot;https://www.json.org/json-en.html&quot;&gt;JSON&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For example, rules written in the tabular comma-separated values (CSV) format:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;in&lt;/th&gt;
      &lt;th&gt;out&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;a&lt;/td&gt;
      &lt;td&gt;æ&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;or using &lt;a href=&quot;https://www.json.org/json-en.html&quot;&gt;JSON&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;in&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;out&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;æ&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Both of the above rules capture our first rule that turns an orthographic ‘a’ into a broad IPA /æ/. You can choose to write your rules in &lt;strong&gt;either&lt;/strong&gt; format, although JSON will offer you slightly more flexibility when writing &lt;a href=&quot;https://blog.mothertongues.org/g2p-advanced-mappings&quot;&gt;advanced rules&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If we want to write rules that depend on a particular context, we need a couple more columns (CSV) or keys (JSON) than just &lt;code class=&quot;highlighter-rouge&quot;&gt;in&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;out&lt;/code&gt;. This is where we use &lt;code class=&quot;highlighter-rouge&quot;&gt;context_before&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;context_after&lt;/code&gt;. So, our second rule from above was to turn /k/ to [kʰ] when the character after /k/ is /æ/. Here, we could write the rules like this:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;in&lt;/th&gt;
      &lt;th&gt;out&lt;/th&gt;
      &lt;th&gt;context_before&lt;/th&gt;
      &lt;th&gt;context_after&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;k&lt;/td&gt;
      &lt;td&gt;kʰ&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;æ&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;or like this using JSON:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;in&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;k&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;out&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;kʰ&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;context_after&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;æ&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;mapping-configuration&quot;&gt;Mapping configuration&lt;/h2&gt;

&lt;p&gt;When you combine multiple rules in &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; for a particular purpose, this is called a &lt;em&gt;mapping&lt;/em&gt;. In addition to each file containing your rules, you need a configuration file that tells &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; how to process your rules. We write mapping configurations in YAML files titled &lt;code class=&quot;highlighter-rouge&quot;&gt;config.yaml&lt;/code&gt;. “.yaml” is the file extension for YAML which stands for ‘Yet Another Markup Language’ - which might be how you’re feeling right now after having already learned about Comma Separated Value (CSV) files and JavaScript Object Notation (JSON)!!&lt;/p&gt;

&lt;p&gt;Here is a basic configuration for your mapping:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;mappings&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;language_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;My Test Language&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# this is a shared value for all the mappings in this configuration&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;display_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;My Test Language to IPA&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# this is a 'display name'. It is a user-friendly name for your mapping.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;in_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# This is the code for your language input. By convention in g2p this should contain your language's ISO 639-3 code&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;out_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-ipa&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# This is the code for the output of your mapping. In g2p we suffix -ipa to the in_lang for mappings between an orthography and IPA&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mapping&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;authors&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# This is a way to keep track of who has contributed to the mapping&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Aidan Pine&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test_to_ipa.json&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# This is the path to your mapping file. It should be in the same folder as your config.yaml file&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you are familiar with yaml, you will see that you can have more than one mapping under the &lt;code class=&quot;highlighter-rouge&quot;&gt;mappings&lt;/code&gt; key. So to add another mapping to this file, it would look like this:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;mappings&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;language_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;My Test Language&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;display_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;My Test Language to IPA&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;in_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;out_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-ipa&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mapping&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;authors&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Aidan Pine&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test_to_ipa.json&lt;/span&gt; 
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;language_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;My Test Language&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;display_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;My Test Language IPA to Arpabet&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;in_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-ipa&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;out_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-arpabet&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mapping&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;authors&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Aidan Pine&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test_ipa_to_arpabet.json&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you’re not familiar with YAML, and you’re not just copy pasting from here, I recommend having a look at one of the many &lt;a href=&quot;https://gettaurus.org/docs/YAMLTutorial/&quot;&gt;tutorials&lt;/a&gt; on how to use YAML properly before attempting to write your own mapping configuration, or looking at some of the examples of configurations in &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p/mappings/langs/*&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;bringing-it-all-together&quot;&gt;Bringing it all together&lt;/h2&gt;

&lt;p&gt;From following the previous two sections, you should have two files created: &lt;code class=&quot;highlighter-rouge&quot;&gt;test_to_ipa.json&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;config.yaml&lt;/code&gt;. Your &lt;code class=&quot;highlighter-rouge&quot;&gt;config.yaml&lt;/code&gt; file should look like this:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;mappings&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;language_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;My Test Language&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# this is a shared value for all the mappings in this configuration&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;display_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;My Test Language to IPA&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# this is a 'display name'. It is a user-friendly name for your mapping.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;in_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# This is the code for your language input. By convention in g2p this should contain your language's ISO 639-3 code&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;out_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-ipa&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# This is the code for the output of your mapping. By convention in g2p we suffix -ipa to the in_lang for mappings between an orthography and IPA&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mapping&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;authors&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# This is a way to keep track of who has contributed to the mapping&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Aidan Pine&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test_to_ipa.json&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# This is the path to your mapping file. It should be in the same folder as your config.yaml file&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and your &lt;code class=&quot;highlighter-rouge&quot;&gt;test_to_ipa.json&lt;/code&gt; file should look like this:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;in&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;k&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;out&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;kʰ&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;context_after&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;æ&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, type the following command in your command line or integrated terminal: &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p convert &quot;kæt&quot; test test-ipa --config /path/to/config.yaml&lt;/code&gt;, replace &lt;code class=&quot;highlighter-rouge&quot;&gt;/path/to/config.yaml&lt;/code&gt; with the path from your current working directory in the command line to your config.yaml file. You should see the output &lt;code class=&quot;highlighter-rouge&quot;&gt;kʰæt&lt;/code&gt; produced below. Congratulations! You did your first conversion with &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt;. Try changing your rules around or converting other text and experiment to see what happens.&lt;/p&gt;

&lt;h3 id=&quot;footnotes&quot;&gt;Footnotes&lt;/h3&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;See this link for more information on the difference between pip and pip3: &lt;a href=&quot;https://www.pythonpool.com/pip-vs-pip3/&quot;&gt;https://www.pythonpool.com/pip-vs-pip3/&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 23 Oct 2021 00:00:00 +0000</pubDate>
        <link>https://blog.mothertongues.org/g2p-basic-mappings-local/</link>
        <guid isPermaLink="true">https://blog.mothertongues.org/g2p-basic-mappings-local/</guid>
        
        <category>tutorial</category>
        
        <category>explanation</category>
        
        <category>tech-showcase</category>
        
        <category>g2p</category>
        
        
      </item>
    
      <item>
        <title>G2P Part 2: Using G2P Studio</title>
        <description>&lt;p&gt;This is the second blog post in a 7-part series describing how to make a basic mapping with &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt;. For background information on what &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; is, have a look at the &lt;a href=&quot;https://blog.mothertongues.org/g2p-background&quot;&gt;introductory blog post for g2p&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-background&quot;&gt;Background&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;How to write a basic mapping in G2P Studio&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-basic-mappings-local&quot;&gt;Writing mappings on your computer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-advanced-mappings&quot;&gt;Advanced mappings&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-applications&quot;&gt;ReadAlong Studio &amp;amp; Other Applications&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-preprocess&quot;&gt;Preprocessing mappings&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-contributing&quot;&gt;Contributing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;what-you-need-to-know-to-understand-this-post&quot;&gt;What you need to know to understand this post&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;To be able to follow along, you’ll need access to the internet, and to have read the &lt;a href=&quot;https://blog.mothertongues.org/g2p-background&quot;&gt;introductory blog post for g2p&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;whats-the-gist-of-what-were-about-to-do&quot;&gt;What’s the gist of what we’re about to do?&lt;/h2&gt;

&lt;p&gt;In order to use &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; we need to understand the building blocks; &lt;strong&gt;rules&lt;/strong&gt; and &lt;strong&gt;mappings&lt;/strong&gt;. &lt;strong&gt;Rules&lt;/strong&gt; are patterns that describe how to turn some input text into some other output text. When we combine a series of ordered rules together for a specific purpose, we call this a &lt;strong&gt;mapping&lt;/strong&gt;. This blog post will show you how to write rules and mappings to use with &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;how-do-i-follow-along&quot;&gt;How do I follow along?&lt;/h2&gt;

&lt;p&gt;The easiest way to write rules quickly is using the &lt;a href=&quot;https://g2p-studio.herokuapp.com/&quot;&gt;G2P Studio&lt;/a&gt; web application&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. Once landing on the G2P Studio page, you can scroll down to the &lt;a href=&quot;https://g2p-studio.herokuapp.com/#out_delimiter-0:~:text=Custom%20Rules&quot;&gt;Custom Rules&lt;/a&gt; section and start directly editing the spreadsheet available there. You can also follow along by writing your rules and mappings on your computer using a text editor like &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt;. This post only shows how to create rules using the &lt;a href=&quot;https://g2p-studio.herokuapp.com/&quot;&gt;G2P Studio&lt;/a&gt; web application. The &lt;a href=&quot;https://blog.mothertongues.org/g2p-basic-mappings-local&quot;&gt;next blog post&lt;/a&gt; will show you how to write these rules locally on your computer.&lt;/p&gt;

&lt;h1 id=&quot;how-to-get-from-a-to-b-or-a-to-æ-with-g2p&quot;&gt;How to get from ‘a’ to ‘b’ (or ‘a’ to ‘æ’) with g2p&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; is a Python library&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; (i.e. software written in the Python programming language) that helps you convert between different characters based on user-defined rules. The inspiration for how to write these rules was mostly taken from the notion of &lt;a href=&quot;https://en.wikipedia.org/wiki/Phonological_rule&quot;&gt;phonological rewrite rules&lt;/a&gt;, which is a common way of describing &lt;em&gt;multilevel&lt;/em&gt; phonological changes in linguistics. &lt;em&gt;Multilevel&lt;/em&gt; changes is the idea that a word, like ‘cats’ or ‘dogs’ can have multiple ‘levels’ of representation. For example, you might think of the way that those words are written in English orthography (writing system) as one level. Then, you might think of a general pronunciation for those words, written in the phonetic alphabet, as another level. You could also separate that level into more than one level by having a level each for &lt;a href=&quot;https://en.wikipedia.org/wiki/Phonetic_transcription#Narrow_versus_broad_transcription:~:text=orthography.-,Narrow%20versus%20broad%20transcription&quot;&gt;narrow and broad transcriptions&lt;/a&gt;.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Level Name&lt;/th&gt;
      &lt;th&gt;Word #1&lt;/th&gt;
      &lt;th&gt;Word #2&lt;/th&gt;
      &lt;th&gt;Word # 3&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Level 1 (orthography)&lt;/td&gt;
      &lt;td&gt;cat&lt;/td&gt;
      &lt;td&gt;dog&lt;/td&gt;
      &lt;td&gt;back&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Level 2 (broad IPA)&lt;/td&gt;
      &lt;td&gt;kæt&lt;/td&gt;
      &lt;td&gt;dɑɡ&lt;/td&gt;
      &lt;td&gt;bæk&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Level 3 (narrow IPA)&lt;/td&gt;
      &lt;td&gt;kʰæt&lt;/td&gt;
      &lt;td&gt;dɑɡ&lt;/td&gt;
      &lt;td&gt;bæk&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Now, just by looking at these three levels, you can probably see some fairly systematic rules here that you could imagine would get you from one level to the next, even if you don’t know the phonetic alphabet by heart and even if you don’t really know much about English phonology (sound patterns and systems).&lt;/p&gt;

&lt;p&gt;One possible hypothesis would be that all ‘a’ characters in level one turn to ‘æ’, so we might want a rule to express that all instances of ‘a’ turn to /æ/. And, for another example, it looks like between levels 2 and 3, /k/ turns into either [k] or [kʰ] depending on whether it occurs before or after /æ/&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;So, with these hypotheses about the rules to transform from one level to another, how do we start translating this into rules for &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt;? Keep reading to find out!&lt;/p&gt;

&lt;h2 id=&quot;basic-rule-writing&quot;&gt;Basic Rule writing&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; lets you describe these patterns using &lt;strong&gt;an ordered series of rules&lt;/strong&gt;. Each rule must be defined to have a sequence of one or more input characters and a sequence of zero or more output characters. In the &lt;a href=&quot;https://g2p-studio.herokuapp.com/&quot;&gt;G2P Studio&lt;/a&gt;, we write these rules in a spreadsheet-type interface.&lt;/p&gt;

&lt;p&gt;In the screenshot below we can see a very basic rule that will turn all instances of the character &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; into &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;. Each row is a new rule. The &lt;code class=&quot;highlighter-rouge&quot;&gt;In&lt;/code&gt; column describes what characters will be matched, and the &lt;code class=&quot;highlighter-rouge&quot;&gt;Out&lt;/code&gt; column describes what those matched characters will be turned into.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/g/basic-rule-studio-719-c7baf8.png&quot; srcset=&quot;/assets/images/g/basic-rule-studio-400-c7baf8.png 400w, /assets/images/g/basic-rule-studio-600-c7baf8.png 600w, /assets/images/g/basic-rule-studio-719-c7baf8.png 719w&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Context Before&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Context After&lt;/code&gt; columns describe any conditions for the matched text. For example, if I wanted to turn all &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; characters into &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; only if a &lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt; came before the &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;, I would write the rule like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/g/basic-rule-studio-context-731-74df3c.png&quot; srcset=&quot;/assets/images/g/basic-rule-studio-context-400-74df3c.png 400w, /assets/images/g/basic-rule-studio-context-600-74df3c.png 600w, /assets/images/g/basic-rule-studio-context-731-74df3c.png 731w&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;ok-so-how-do-i-actually-get-these-rules-to-do-something&quot;&gt;Ok, so how do I actually get these rules to do something?&lt;/h2&gt;

&lt;p&gt;So, you’ve understood the &lt;a href=&quot;#basic-rule-writing&quot;&gt;basics of writing rules&lt;/a&gt; described above and you want to actually use them to convert something? This section describes exactly how to do that.&lt;/p&gt;

&lt;p&gt;Below is a list of all the rules to capture the transformations between level 1 and level 2 above. There are some rules that we discussed in that section, and some others that might look unfamiliar. For a full description of some of these rules, have a look at the &lt;a href=&quot;https://blog.mothertongues.org/g2p-advanced-mappings&quot;&gt;advanced rule-writing section&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/g/custom-rules-g2p-studio-800-2a352d.png&quot; srcset=&quot;/assets/images/g/custom-rules-g2p-studio-400-2a352d.png 400w, /assets/images/g/custom-rules-g2p-studio-600-2a352d.png 600w, /assets/images/g/custom-rules-g2p-studio-800-2a352d.png 800w, /assets/images/g/custom-rules-g2p-studio-968-2a352d.png 968w&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once you have written your rules in this section, you can write some text in the left text area at the top of the G2P Studio, and &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; will apply your rules and produce the output in the right text area as seen below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/g/custom-rules-output-g2p-studio-800-8fbdf4.png&quot; srcset=&quot;/assets/images/g/custom-rules-output-g2p-studio-400-8fbdf4.png 400w, /assets/images/g/custom-rules-output-g2p-studio-600-8fbdf4.png 600w, /assets/images/g/custom-rules-output-g2p-studio-800-8fbdf4.png 800w, /assets/images/g/custom-rules-output-g2p-studio-977-8fbdf4.png 977w&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can also click on ‘Export’ under the Custom Rules section to export your rules to a CSV file if you want to save them for later.&lt;/p&gt;

&lt;p&gt;Have a read through the next blog post on &lt;a href=&quot;https://blog.mothertongues.org/g2p-basic-mappings-local&quot;&gt;writing rules on your computer without G2P Studio&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;footnotes&quot;&gt;Footnotes&lt;/h3&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;I’m using the free, hobby plan at &lt;a href=&quot;https://www.heroku.com/&quot;&gt;https://www.heroku.com/&lt;/a&gt; to host it though, so occasionally the server goes to sleep. If you first go to the site and it takes a few seconds to boot up, don’t worry! &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;A Python ‘library’ is a collection of code &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;Orthographic characters are wrapped in single quotes, like ‘a’; broad IPA typically uses forward slashes like /k/ and narrow IPA typically uses square brackets like [kʰ] &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 22 Oct 2021 00:00:00 +0000</pubDate>
        <link>https://blog.mothertongues.org/g2p-basic-mappings-gui/</link>
        <guid isPermaLink="true">https://blog.mothertongues.org/g2p-basic-mappings-gui/</guid>
        
        <category>tutorial</category>
        
        <category>explanation</category>
        
        <category>tech-showcase</category>
        
        <category>g2p</category>
        
        
      </item>
    
  </channel>
</rss>
