<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mother Tongues Blog</title>
    <description>Smashing the lore of language technology!</description>
    <link>https://blog.mothertongues.org/</link>
    <atom:link href="https://blog.mothertongues.org/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 01 Nov 2021 22:17:10 +0000</pubDate>
    <lastBuildDate>Mon, 01 Nov 2021 22:17:10 +0000</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>G2P Part 7: Contributing a new mapping to g2p for everyone to use</title>
        <description>&lt;p&gt;This is the last part of the seven-part series on g2p. In this part, we’ll discuss how to contribute your mappings to the main g2p library.&lt;/p&gt;

&lt;h3 id=&quot;g2p-blog-series-index&quot;&gt;G2P Blog Series Index&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-background&quot;&gt;Background&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-basic-mappings-gui&quot;&gt;How to write a basic mapping in G2P Studio&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-basic-mappings-local&quot;&gt;Writing mappings on your computer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-advanced-mappings&quot;&gt;Advanced mappings&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-applications&quot;&gt;ReadAlong Studio &amp;amp; Other Applications&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-preprocess&quot;&gt;Preprocessing mappings&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Contributing&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;advanced-contributing-your-rules-to-the-main-g2p-library&quot;&gt;Advanced: contributing your rules to the main &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; library&lt;/h2&gt;

&lt;p&gt;So, you’ve written some cool rules and you want to contribute, that’s awesome! There are lots of benefits to contributing your mapping to &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt;. First of all, once your mapping is accepted, you’ll have it available and live on &lt;a href=&quot;https://g2p-studio.herokuapp.com&quot;&gt;G2P Studio&lt;/a&gt;. Second, once the next version of &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; is released with your mapping, it will be automatically built in to the &lt;a href=&quot;https://blog.mothertongues.org/convertextract-app&quot;&gt;Convertextract&lt;/a&gt; library. Third, if your mapping is between a language’s writing system and the IPA, you can also get &lt;a href=&quot;https://blog.mothertongues.org/g2p-applications&quot;&gt;ReadAlongs&lt;/a&gt; support for your language.&lt;/p&gt;

&lt;p&gt;So, you write your mapping once, and you get three things for free (G2P studio, convertextract and readalongs). Here’s how:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Fork g2p, see &lt;a href=&quot;https://docs.github.com/en/github/getting-started-with-github/fork-a-repo&quot;&gt;https://docs.github.com/en/github/getting-started-with-github/fork-a-repo&lt;/a&gt; for more details&lt;/li&gt;
  &lt;li&gt;Add a folder for your language using the appropriate &lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_ISO_639-3_codes&quot;&gt;ISO 639.3 code&lt;/a&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p/mappings/langs&lt;/code&gt;, i.e., create the folder &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p/mapping/langs/&amp;lt;yourlangcode&amp;gt;/&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Add a &lt;code class=&quot;highlighter-rouge&quot;&gt;config.yaml&lt;/code&gt; file as described &lt;a href=&quot;https://blog.mothertongues.org/g2p-basic-mappings&quot;&gt;here&lt;/a&gt; in that folder&lt;/li&gt;
  &lt;li&gt;Add your mapping in that same folder&lt;/li&gt;
  &lt;li&gt;If your mapping is for an IPA mapping, you can optionally run &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p update&lt;/code&gt; to update your mapping into &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; and then generate the mapping as described in the &lt;a href=&quot;https://blog.mothertongues.org/g2p-applications&quot;&gt;ReadAlongs post&lt;/a&gt; between your language and English IPA.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p update&lt;/code&gt; to add your mapping to &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Add some test data to &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p/tests/public/data&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Submit your changes by creating a &lt;a href=&quot;https://github.com/roedoejet/g2p/compare&quot;&gt;pull request&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Finally, either myself, or somebody else will review the changes, and you will get credit for those mappings and be added to the &lt;a href=&quot;https://github.com/roedoejet/g2p/graphs/contributors&quot;&gt;list of contributors&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;adding-tests&quot;&gt;Adding tests&lt;/h3&gt;

&lt;p&gt;Testing your work is a really important part of software engineering. It lets us make changes to code and be confident that new features don’t break the expected functionality of &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt;. In order to add tests for your mapping, you can add a CSV/TSV/PSV file with 4 columns to &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p/tests/public/data&lt;/code&gt;. The name of the file should be just the input language code, for example &lt;code class=&quot;highlighter-rouge&quot;&gt;fra.psv&lt;/code&gt; for the French tests. The first column in the file is for the input language code, the second is for the output language code, the third is for the input text and the fourth is for the expected output of that mapping and input. Here is an example between French (fra) and French IPA (fra-ipa) asserting that ‘manger’ results in ‘mɑ̃ʒe’:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-psv&quot;&gt;fra|fra-ipa|manger|mɑ̃ʒe
fra|fra-ipa|écoutons|ekutɔ̃
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is a script for running tests at the root of the &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; project called &lt;code class=&quot;highlighter-rouge&quot;&gt;run_tests.py&lt;/code&gt;. You can run all of the tests here using the following:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;python&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run_tests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;py&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;all&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;or just run the language assertions including your tests like shown above using:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;python&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run_tests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;py&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;langs&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Writing g2p mappings that handle all the special cases can be quite tricky, especially when there are potential interactions between rules. To be confident that your g2p mappings work as you think, you should add a bunch of different words covering most of the spelling phenomena of the language you’re working on, with their expected IPA mapping. Ideally, you should also add some test cases to eng-ipa and eng-arpabet, to make sure the generated mapping works correctly. If you run into difficulties, feel free to post comments on this blog post or on the g2p library GitHub issues page!&lt;/p&gt;
</description>
        <pubDate>Wed, 27 Oct 2021 00:00:00 +0000</pubDate>
        <link>https://blog.mothertongues.org/g2p-contributing/</link>
        <guid isPermaLink="true">https://blog.mothertongues.org/g2p-contributing/</guid>
        
        <category>tutorial</category>
        
        <category>explanation</category>
        
        <category>tech-showcase</category>
        
        <category>g2p</category>
        
        
      </item>
    
      <item>
        <title>G2P Part 6: Solve inconsistencies in your text with a g2p pre-processing mapping</title>
        <description>&lt;p&gt;This is the 6th blog post in a seven-part series about a software tool called &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt;. In this post we’ll discuss how to use &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; to do the common natural language processing task of text normalization.&lt;/p&gt;

&lt;h3 id=&quot;g2p-blog-series-index&quot;&gt;G2P Blog Series Index&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-background&quot;&gt;Background&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-basic-mappings-gui&quot;&gt;How to write a basic mapping in G2P Studio&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-basic-mappings-local&quot;&gt;Writing mappings on your computer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-advanced-mappings&quot;&gt;Advanced mappings&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-applications&quot;&gt;ReadAlong Studio &amp;amp; Other Applications&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Preprocessing mappings&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-contributing&quot;&gt;Contributing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;adding-a-pre-processing-mapping&quot;&gt;Adding a ‘pre-processing’ mapping&lt;/h2&gt;

&lt;p&gt;It’s often not sufficient to just write a mapping between the characters in a language’s orthography and the IPA, as illustrated in &lt;a href=&quot;#use-case-2-a-language-with-multiple-writing-systems&quot;&gt;use case #2&lt;/a&gt; and &lt;a href=&quot;#use-case-3-converting-from-legacy-writing-systems&quot;&gt;use case #3&lt;/a&gt; below. Real-world text input is pretty messy, and if we want ReadAlongs or Convertextract - or any other tool that uses &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; - to work properly, we need to account for as much of that messiness as possible. Generally speaking, solving this kind of messiness is usually called ‘Text Normalization’.&lt;sup id=&quot;fnref:n&quot;&gt;&lt;a href=&quot;#fn:n&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; This ‘normalization’ can either be about ensuring that the same Unicode characters are used consistently, or it can also be about converting symbols into their pronounced form, like &amp;amp; or 123.&lt;/p&gt;

&lt;p&gt;For example, maybe your language uses underlines in its orthography. There are two commonly confusable Unicode characters here: U+0331 COMBINING MACRON BELOW and U+0332 COMBINING LOW LINE, and they look almost identical (cf. g̱ (U+0331) vs g̲ (U+0332)). So, let’s ‘normalize’ to consistently use U+0331.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;in&lt;/th&gt;
      &lt;th&gt;out&lt;/th&gt;
      &lt;th&gt;context_before&lt;/th&gt;
      &lt;th&gt;context_after&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;\u0332&lt;/td&gt;
      &lt;td&gt;\u0331&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Second, maybe we have a text that has a lot of puncutation like ‘&amp;amp;’ in it. We could write a mapping here for that as well (example in Danish):&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;in&lt;/th&gt;
      &lt;th&gt;out&lt;/th&gt;
      &lt;th&gt;context_before&lt;/th&gt;
      &lt;th&gt;context_after&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&amp;amp;&lt;/td&gt;
      &lt;td&gt;og&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;A third example can be seen in the &lt;a href=&quot;https://github.com/roedoejet/g2p/blob/master/g2p/mappings/langs/git/equiv.csv&quot;&gt;Gitksan mapping&lt;/a&gt; where the writing system uses a single quote ‘ to mark &lt;a href=&quot;https://en.wikipedia.org/wiki/Ejective_consonant&quot;&gt;ejectives&lt;/a&gt; and glottal stops, but there are many apostrophe-like confusable characters, like ’ or ʼ. In this mapping we can see that they’re all mapped to the single quote ‘ (U+0027).&lt;/p&gt;

&lt;p&gt;How do we link this up with the rest of our mappings? We recommend calling these mappings &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;yourlang&amp;gt;-equiv&lt;/code&gt;, for “equivalencies” which is more neutral and sometimes preferred than the term “normalization”. When you run &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p update&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; creates a &lt;a href=&quot;https://mathinsight.org/definition/directed_graph#:~:text=A%20directed%20graph%20is%20graph,digraph%20or%20a%20directed%20network.&quot;&gt;directed graph&lt;/a&gt; between all possible mappings. Similar to when &lt;a href=&quot;https://blog.mothertongues.org/g2p-applications&quot;&gt;using g2p for ReadAlongs&lt;/a&gt;, consider we have a &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; pipeline from ‘dan’ to ‘eng-arpabet’ that goes through the &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; graph like so, ‘dan’ → ‘dan-ipa’ → ‘eng-ipa’ → ‘eng-arpabet’. We basically want to add one more conversion along this path that does this normalization step. So, we &lt;a href=&quot;https://blog.mothertongues.org/g2p-basic-mappings-local&quot;&gt;configure a mapping&lt;/a&gt; for a mapping from ‘dan’ → ‘dan-equiv’ containing our normalizations, then we rename the existing mapping to ‘dan-equiv’ → ‘dan-ipa’. Then, we &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p update&lt;/code&gt; and the next time we run a mapping from ‘dan’ → ‘eng-arpabet’, it will pass through the normalization mapping too.&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:n&quot;&gt;
      &lt;p&gt;not to be confused with Unicode Normalization, which is different usage of the same term! &lt;a href=&quot;#fnref:n&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 26 Oct 2021 00:00:00 +0000</pubDate>
        <link>https://blog.mothertongues.org/g2p-preprocess/</link>
        <guid isPermaLink="true">https://blog.mothertongues.org/g2p-preprocess/</guid>
        
        <category>tutorial</category>
        
        <category>explanation</category>
        
        <category>tech-showcase</category>
        
        <category>g2p</category>
        
        
      </item>
    
      <item>
        <title>G2P Part 5: Applications for g2p, an example with ReadAlongs</title>
        <description>&lt;p&gt;This is the 5th post in a seven-part series about g2p. In this post, we discuss using g2p to create interactive text/audio books with ReadAlong Studio.&lt;/p&gt;

&lt;h3 id=&quot;g2p-blog-series-index&quot;&gt;G2P Blog Series Index&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-background&quot;&gt;Background&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-basic-mappings-gui&quot;&gt;How to write a basic mapping in G2P Studio&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-basic-mappings-local&quot;&gt;Writing mappings on your computer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-advanced-mappings&quot;&gt;Advanced mappings&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;ReadAlong Studio &amp;amp; Other Applications&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-preprocess&quot;&gt;Preprocessing mappings&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-contributing&quot;&gt;Contributing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This post will discuss the use of &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; in the &lt;a href=&quot;#readalongs&quot;&gt;ReadAlongs&lt;/a&gt; project for creating interactive audio/text documents.&lt;/p&gt;

&lt;h2 id=&quot;other-applications&quot;&gt;Other Applications&lt;/h2&gt;

&lt;p&gt;There are number of different software tools that are already making use of &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt;. For general purpose use in Python, have a look at &lt;a href=&quot;https://blog.mothertongues.org/g2p-advanced-mappings&quot;&gt;this post&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;convertextract&quot;&gt;Convertextract&lt;/h3&gt;

&lt;p&gt;Convertextract is a tool that lets you use &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; mappings to convert text inside a variety of different documents, including Microsoft Office documents like Powerpoint and Word coduments. Have a look at the &lt;a href=&quot;https://github.com/roedoejet/convertextract&quot;&gt;convertextract repo readme&lt;/a&gt; or at Fineen Davis’ &lt;a href=&quot;https://blog.mothertongues.org/convertextract-app&quot;&gt;blog post&lt;/a&gt; about the Convertextract GUI.&lt;/p&gt;

&lt;h3 id=&quot;readalongs&quot;&gt;ReadAlongs&lt;/h3&gt;

&lt;p&gt;ReadAlongs is a research project from the &lt;a href=&quot;https://nrc.canada.ca/en/research-development/research-collaboration/programs/canadian-indigenous-languages-technology-project&quot;&gt;National Research Council’s Indigenous Language Technology Project&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Communities engaged in language revitalization have potentially many different recordings of their language and some associated text, but mobilizing these materials into something that is educationally useful can be time consuming. It’s also tough from the learner’s perspective to try and follow along the text (maybe a Word Document) just by simply playing the audio. It’s easy to get lost in the recording quickly, and from personal experience, trying to do that usually involves a lot of frustrating rewinding.&lt;/p&gt;

&lt;p&gt;What if we could develop a tool that &lt;em&gt;automatically&lt;/em&gt; figured out what parts of the audio file corresponded to what parts of the text? In &lt;a href=&quot;https://en.wikipedia.org/wiki/Natural_language_processing&quot;&gt;Natural Language Processing&lt;/a&gt;, this is called &lt;em&gt;forced alignment&lt;/em&gt;, and this is fundamentally what the &lt;a href=&quot;https://github.com/ReadAlongs/Studio&quot;&gt;ReadAlongs project&lt;/a&gt; does. But how does it do it? In part, by using a whole bunch of &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; mappings!&lt;/p&gt;

&lt;p&gt;First of all, it’s good to know that forced alignment is essentially a “solved problem” for languages with a lot of data, thanks to people like David Huggins-Daines who is a collaborator on the ReadAlongs project. And, if you know Python, and have sentence-aligned parallel audio/text data in your language, you can train a model using one of the several tools out there developed for this task, like &lt;a href=&quot;https://montreal-forced-aligner.readthedocs.io/en/latest/&quot;&gt;the Montreal Forced Aligner&lt;/a&gt;. But what if you don’t have that much data (or any) and what if you don’t know Python? If your language has a &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; mapping between its writing system and the IPA, you can likely circumvent that whole process. Here’s how:&lt;/p&gt;

&lt;p&gt;We take a model for doing forced alignment on English and we manually write a &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; mapping from the writing system to IPA for the language we want to make a ReadAlong for. For example’s sake let’s say, Kanyen’kéha (Mohawk). This step requires somebody who is both familiar with the writing system used, and with the International Phonetic Alphabet.&lt;/p&gt;

&lt;p&gt;Then, we use the very cool Python library &lt;a href=&quot;https://github.com/dmort27/panphon&quot;&gt;PanPhon&lt;/a&gt; to figure out the mapping between the IPA characters in Mohawk and their &lt;em&gt;closest&lt;/em&gt; IPA equivalents in English. We call this mapping a “Kanyen’kéha IPA to English IPA” mapping. If you have already created your mapping between the orthography and the IPA, you can generate this “Kanyen’kéha IPA to English IPA” using the &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; command line.&lt;/p&gt;

&lt;p&gt;Then, we convert the ReadAlong in question from its original orthographic form all the way to English IPA (well, actually to ‘Arpabet’ which is an ASCII-compliant phonetic transcription standard that the alignment model understands).&lt;/p&gt;

&lt;p&gt;Then, after we “do the alignment” (ie figure out which parts of the audio correspond to which parts of the text), ReadAlongs puts it all back together again and ta-da! There is your aligned audio and text! Keep reading to see how to generate an X-to-English IPA mapping for your language.&lt;/p&gt;

&lt;h4 id=&quot;generate-your-mapping-between-your-languages-ipa-and-english-ipa&quot;&gt;Generate your mapping between your language’s IPA and English IPA&lt;/h4&gt;

&lt;p&gt;After &lt;a href=&quot;https://blog.mothertongues.org/g2p-basic-mappings-local&quot;&gt;installing&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; and once you have made your mapping, update &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; by running &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p update&lt;/code&gt;. When you add or modify any mapping, &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; doesn’t actually see it yet. &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p update&lt;/code&gt; is what scans all the mappings and makes them available to &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt;. Then, you can run &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p generate-mapping &amp;lt;input-code&amp;gt; --ipa&lt;/code&gt;. So in our example for Kanyen’kéha (moh) we would run&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;g2p generate-mapping moh &lt;span class=&quot;nt&quot;&gt;--ipa&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That will automatically generate a moh-ipa to eng-ipa mapping in &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p/mappings/langs/generated&lt;/code&gt; - do not edit this file or its configuration unless you really know what you’re doing, because it will get overwritten. After generation, you can run &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p update&lt;/code&gt; again and your mapping will be &lt;a href=&quot;https://blog.mothertongues.org/g2p-basic-mappings-local&quot;&gt;usable&lt;/a&gt; within &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt;!&lt;/p&gt;

&lt;h4 id=&quot;visualizing-the-process&quot;&gt;Visualizing the process&lt;/h4&gt;

&lt;p&gt;This is actually where the introductory picture to this blog series comes from! In the graphic below, you can see the word ‘bonjour’ in French converted to its IPA transcription. Then, its IPA transcription gets converted into its corresponding &lt;em&gt;English&lt;/em&gt; IPA transcription based on the generated mapping (notice how uvular /ʁ/ gets transformed to alveolo-palatal /ʒ/). Then finally, the English IPA form is converted to Arpabet. So in all, we have an input of ‘bonjour’ that gets output as ‘B AO N ZH UW ZH’ and the aligner runs on that form.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/g/bonjour-g2p-800-cc09ee.png&quot; srcset=&quot;/assets/images/g/bonjour-g2p-400-cc09ee.png 400w, /assets/images/g/bonjour-g2p-600-cc09ee.png 600w, /assets/images/g/bonjour-g2p-800-cc09ee.png 800w, /assets/images/g/bonjour-g2p-1000-cc09ee.png 1000w&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can recreate this type of animation using the G2P studio by selecting the French (&lt;code class=&quot;highlighter-rouge&quot;&gt;fra&lt;/code&gt;) to English Arpabet (&lt;code class=&quot;highlighter-rouge&quot;&gt;eng-arpabet&lt;/code&gt;) mapping, choosing ‘animate’ and then typing your text in the input area as seen below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/g/g2p-animate-800-4e082a.png&quot; srcset=&quot;/assets/images/g/g2p-animate-400-4e082a.png 400w, /assets/images/g/g2p-animate-600-4e082a.png 600w, /assets/images/g/g2p-animate-800-4e082a.png 800w, /assets/images/g/g2p-animate-980-4e082a.png 980w&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;what-can-you-do-with-your-aligned-audiotext&quot;&gt;What can you do with your aligned audio/text?&lt;/h4&gt;

&lt;p&gt;ReadAlongs exports to a variety of formats, including epub (for e-readers), &lt;a href=&quot;https://www.fon.hum.uva.nl/praat/&quot;&gt;Praat&lt;/a&gt; TextGrids, &lt;a href=&quot;https://archive.mpi.nl/tla/elan&quot;&gt;ELAN&lt;/a&gt; files, various subtitle formats, and an embeddable web component for your website.&lt;/p&gt;

&lt;p&gt;Below is an example of the embeddable web component in Danish.&lt;/p&gt;

&lt;div class=&quot;readalong&quot;&gt;
    &lt;!-- ReadAlong Web Component --&gt;
    &lt;link href=&quot;https://fonts.googleapis.com/css?family=Lato|Material+Icons|Material+Icons+Outlined&quot; rel=&quot;stylesheet&quot; /&gt;
    &lt;script type=&quot;module&quot; src=&quot;https://unpkg.com/@roedoejet/readalong/dist/read-along/read-along.esm.js&quot;&gt;&lt;/script&gt;
    &lt;read-along text=&quot;/assets/ras/output.xml&quot; alignment=&quot;/assets/ras/output.smil&quot; audio=&quot;/assets/ras/output.wav&quot;&gt;&lt;/read-along&gt;
    &lt;noscript&gt;Please enable JavaScript to view the ReadAlong&lt;/noscript&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 25 Oct 2021 00:00:00 +0000</pubDate>
        <link>https://blog.mothertongues.org/g2p-applications/</link>
        <guid isPermaLink="true">https://blog.mothertongues.org/g2p-applications/</guid>
        
        <category>tutorial</category>
        
        <category>explanation</category>
        
        <category>tech-showcase</category>
        
        <category>g2p</category>
        
        
      </item>
    
      <item>
        <title>G2P Part 4: advanced mappings with g2p</title>
        <description>&lt;p&gt;This is the 4th blog post in a seven-part series about g2p. This is a relatively long post, where we get in to all the nitty gritty of writing complex mappings in g2p.&lt;/p&gt;

&lt;h3 id=&quot;g2p-blog-series-index&quot;&gt;G2P Blog Series Index&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-background&quot;&gt;Background&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-basic-mappings-gui&quot;&gt;How to write a basic mapping in G2P Studio&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-basic-mappings-local&quot;&gt;Writing mappings on your computer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Advanced mappings&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-applications&quot;&gt;ReadAlong Studio &amp;amp; Other Applications&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-preprocess&quot;&gt;Preprocessing mappings&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-contributing&quot;&gt;Contributing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;advanced-a-deeper-dive-into-writing-tricky-rules&quot;&gt;Advanced: A deeper dive into writing tricky rules&lt;/h2&gt;

&lt;p&gt;You may have noticed that the rules described in the previous posts for converting words like ‘dog’ and ‘cat’ to IPA are woefully incomplete. The real world use cases for &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; often need to account for a lot more messiness than was described in the artificial example above. In fact, for languages like English, &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; is likely &lt;strong&gt;not&lt;/strong&gt; a good solution. The English writing system is notoriously inconsistent, and there already exist a variety of other tools that account for many of the lexical (word-specific) idiosyncracies in deriving the IPA form from the orthographic form. For many Indigenous languages, the writing system is sufficiently close to the spoken form that &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; is a very appropriate solution. In the following sections, I’ll describe some common problems when writing rules, and how to fix them.&lt;/p&gt;

&lt;p&gt;As this post is quite long, please refer to the following index for quick navigation:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#rule-ordering&quot;&gt;Rule Ordering&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#unicode-escape-equences&quot;&gt;Unicode Escape Sequences&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#special-settings-for-your-mapping-configuration&quot;&gt;Special Settings &amp;amp; Configuration&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#defining-sets-of-characters&quot;&gt;Defining variables&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#regular-expressions&quot;&gt;Regular Expresssions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#using-specific-indices&quot;&gt;Using indices&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;rule-ordering&quot;&gt;Rule Ordering&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;The order of your rules in &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; really matters&lt;/strong&gt;! This is because some rules can either create or remove the context for other rules to apply. In linguistics, these rule ordering patterns are usually talked about as either &lt;a href=&quot;https://linguistics.stackexchange.com/questions/6084/whats-the-difference-between-counterbleeding-bleeding-and-feeding&quot;&gt;feeding, bleeding, counter-feeding, or counter-bleeding&lt;/a&gt; relationships. There are potentially valid reasons to want to encode any of these types of relationships in your rules.&lt;/p&gt;

&lt;p&gt;To illustrate a possible problem, let’s consider a &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; mapping for language that converts ‘a̱’ to ‘ə’ and ‘a’ to ‘æ’. ‘a̱’ is a sequence of a regular ‘a’ followed by a combining macron below (\u0331). Because \u0331 (‘a̱’) is easily confusable with \u0332 (‘a̲’), in order to follow the rule of thumb for &lt;a href=&quot;#unicode-escape-sequences&quot;&gt;Unicode escape sequences&lt;/a&gt;, I’ll write the rules as follows:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;in&lt;/th&gt;
      &lt;th&gt;out&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;a&lt;/td&gt;
      &lt;td&gt;æ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;a\u0331&lt;/td&gt;
      &lt;td&gt;ə&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Now, assuming an input to this mapping of ‘a̱’ (a\u0331), we would get ‘æ̱’ (æ\u0331) instead of ‘ə’. Why is that? Because the first rule applies and turns ‘a’ into ‘æ’ before the second rule has a chance to apply. This is called a &lt;em&gt;bleeding&lt;/em&gt; relationship because the first rule &lt;em&gt;bleeds&lt;/em&gt; the context of the second rule from applying. In order to avoid it, we would need to write our rules as follows:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;in&lt;/th&gt;
      &lt;th&gt;out&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;a\u0331&lt;/td&gt;
      &lt;td&gt;ə&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;a&lt;/td&gt;
      &lt;td&gt;æ&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;With this ordering, our input of ‘a̱’ (a\u0331) would turn into ‘ə’ as we expect, and our input of ‘a’ would turn into æ also as expected. Try it out on the &lt;a href=&quot;https://g2p-studio.herokuapp.com&quot;&gt;G2P Studio&lt;/a&gt; if you don’t believe me!&lt;/p&gt;

&lt;h3 id=&quot;unicode-escape-sequences&quot;&gt;Unicode Escape Sequences&lt;/h3&gt;

&lt;p&gt;Sometimes you need rules to convert from characters that either don’t render very well, or render in a confusing way. In those cases, you can use &lt;a href=&quot;https://www.rapidtables.com/code/text/unicode-characters.html&quot;&gt;Unicode escape sequences&lt;/a&gt;. For example, maybe you want to write a rule that converts the standard ASCII ‘g’ to the strict IPA Unicode /ɡ/. As you can likely see in your browser, these characters look very similar, but they’re not the same character! The ASCII ‘g’ is U+0067 and the strict IPA ‘ɡ’ is U+0261. So, you can write a rule as follows:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;in&lt;/th&gt;
      &lt;th&gt;out&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;\u0067&lt;/td&gt;
      &lt;td&gt;\u0261&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;or using &lt;a href=&quot;https://www.json.org/json-en.html&quot;&gt;JSON&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;in&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\u&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;0067&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;out&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\u&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;0261&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is also helpful when you need to write rules between combining characters or other confusable characters. The &lt;strong&gt;rule of thumb&lt;/strong&gt; is, if your rules are clearer using Unicode escape sequences, do it! Otherwise, just use the normal character in place.&lt;/p&gt;

&lt;h4 id=&quot;tip-for-finding-a-characters-codepoint&quot;&gt;Tip for finding a character’s codepoint&lt;/h4&gt;

&lt;p&gt;If you want to find out what a particular character’s \uXXXX notation is, simply paste the character(s) into the search bar of this handy site: &lt;a href=&quot;https://unicode.scarfboy.com/&quot;&gt;https://unicode.scarfboy.com/&lt;/a&gt; and you will get a list of the Unicode codepoints for those characters.&lt;/p&gt;

&lt;p&gt;Note, you might find some resources that write a character’s codepoint as U+0261 instead of \u0261. The U+XXXX format is the one officially adopted by the Unicode consortium, as early as of Unicode 2.0.0. However, the Python programming language uses the &lt;a href=&quot;https://docs.python.org/3/reference/lexical_analysis.html#:~:text=escape%20sequences%20only%20recognized%20in%20string%20literals%20are%3A&quot;&gt;\uXXXX format&lt;/a&gt;. The important part is recognizing that the Unicode codepoint is identified by the XXXX hexadecimal sequence.&lt;/p&gt;

&lt;h3 id=&quot;special-settings-for-your-mapping-configuration&quot;&gt;Special settings for your mapping configuration&lt;/h3&gt;

&lt;p&gt;You can add extra settings to your configuration file to change the way that &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; interprets your mappings. Below is a list of possible settings and their use. It’s best practise to declare all the setting keys below for each individual mapping in your &lt;code class=&quot;highlighter-rouge&quot;&gt;config.yaml&lt;/code&gt;, however default values do exist. Your setting keys must be declared on the same level as all of the other keys (&lt;code class=&quot;highlighter-rouge&quot;&gt;language_name&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;in_lang&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;out_lang&lt;/code&gt; etc). These settings are also available in the G2P Studio as check boxes to select or unselect.&lt;/p&gt;

&lt;h5 id=&quot;rule_ordering-default-as-written&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rule_ordering&lt;/code&gt; (default: ‘as-written’)&lt;/h5&gt;
&lt;p&gt;As described in the earlier part of this post, your rules apply in the order you write them. And as described in the advanced section on &lt;a href=&quot;#rule-ordering&quot;&gt;rule ordering&lt;/a&gt;, sometimes this can make your mapping produce unexpected results!&lt;/p&gt;

&lt;p&gt;If you set your mapping to &lt;code class=&quot;highlighter-rouge&quot;&gt;rule_ordering: 'apply-longest-first'&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; will sort all of your rules based on the length of the input to the rule, so that rules with longer inputs apply before rules with shorter inputs. This prevents some common ‘bleeding’ rule-ordering relationships described in the &lt;a href=&quot;#rule-ordering&quot;&gt;rule ordering&lt;/a&gt; section. So, if you declared your rules as:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;in&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;out&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;in&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ab&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;out&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, with &lt;code class=&quot;highlighter-rouge&quot;&gt;rule_ordering: 'as-written'&lt;/code&gt; (the default), you would get ‘bb’ as the output for the input ‘ab’. Whereas with &lt;code class=&quot;highlighter-rouge&quot;&gt;rule_ordering: 'apply-longest-first'&lt;/code&gt;, you would get ‘c’ as the output for the input ‘ab’.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;mappings&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;language_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;English&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;display_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;English to IPA&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;in_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;out_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng-ipa&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mapping&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;authors&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Aidan Pine&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng_to_ipa.json&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;rule_ordering&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;apply-longest-first'&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# &amp;lt;------- Add this&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;case_sensitive-default-true&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;case_sensitive&lt;/code&gt; (default: true)&lt;/h5&gt;

&lt;p&gt;The default is to treat your rules as case sensitive, but setting &lt;code class=&quot;highlighter-rouge&quot;&gt;case_sensitive: false&lt;/code&gt;, will make your rules case insensitive.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;mappings&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;language_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;English&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;display_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;English to IPA&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;in_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;out_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng-ipa&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mapping&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;authors&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Aidan Pine&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng_to_ipa.json&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;case_sensitive&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# &amp;lt;------- Add this&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;escape_special-default-false&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;escape_special&lt;/code&gt; (default: false)&lt;/h5&gt;

&lt;p&gt;As I will describe later in the section on &lt;a href=&quot;#regular-expressions&quot;&gt;regular expressions&lt;/a&gt;, you can define rules using ‘special’ characters. By default, these characters are interpreted as ‘special’, but if you want all special characters in your mapping to be interpreted as their actual characters, you can set &lt;code class=&quot;highlighter-rouge&quot;&gt;escape_special: true&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;mappings&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;language_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;English&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;display_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;English to IPA&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;in_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;out_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng-ipa&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mapping&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;authors&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Aidan Pine&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng_to_ipa.json&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;escape_special&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# &amp;lt;------- Add this&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;norm_form-default-nfd&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;norm_form&lt;/code&gt; (default: “NFD”)&lt;/h5&gt;

&lt;p&gt;If you’ve never heard of Unicode normalization don’t worry, you’re not alone! But, for writing rules and mappings using &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt;, there can be some surprising ‘gotcha’ moments if you don’t choose the right normalization strategy.&lt;/p&gt;

&lt;p&gt;The basic gist of the problem is that there can be multiple ways to write the &lt;em&gt;same&lt;/em&gt; character in Unicode, depending on whether you use ‘combining characters’ to type or not. For example, on some keyboards, you might type ‘é’ by writing an e first and then another keystroke to type the acute accent that sits above it. The Unicode representation for this would be \u0065 (e) followed by \u0301 (a combining acute accent), however there is an entirely separate Unicode code point that has these two characters &lt;em&gt;pre-composed&lt;/em&gt; (\u00e9), which some keyboard layouts will generate instead.&lt;/p&gt;

&lt;p&gt;Many fonts will render these two different representations identically and it can be really difficult and confounding as a user if both appear in the same text. This causes problems, like text that looks identical will not appear in “find &amp;amp; replace” or search engines will not find the text that you’re looking for, even though something that &lt;em&gt;looks&lt;/em&gt; identical exists. Luckily, there is a standard for normalizing these differences so that all instances of sequences like \u0065\u0301 would be (NF)Composed into \u00e9, or the opposite direction where all instances of \u00e9 would be (NF)Decomposed into \u0065\u0301. For a more in-depth conversation on this, check out &lt;a href=&quot;https://withblue.ink/2019/03/11/why-you-need-to-normalize-unicode-strings.html&quot;&gt;this blog article&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;mappings&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;language_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;English&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;display_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;English to IPA&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;in_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;out_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng-ipa&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mapping&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;authors&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Aidan Pine&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng_to_ipa.json&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;norm_form&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;NFC&quot;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# &amp;lt;------- Add your Unicode normalization strategy here&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;out_delimiter-default-&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;out_delimiter&lt;/code&gt; (default: ‘’)&lt;/h5&gt;

&lt;p&gt;Some mappings require that a delimiting character (or delimiting characters) be inserted whenever a rule applies. So, using the example from the first part of this post, maybe you want &lt;code class=&quot;highlighter-rouge&quot;&gt;kæt&lt;/code&gt; to go to &lt;code class=&quot;highlighter-rouge&quot;&gt;kʰ|æ|t&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;kʰæt&lt;/code&gt;. For this, you would set &lt;code class=&quot;highlighter-rouge&quot;&gt;out_delimiter: &quot;|&quot;&lt;/code&gt; in your mapping.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;mappings&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;language_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;English&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;display_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;English to IPA&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;in_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;out_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng-ipa&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mapping&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;authors&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Aidan Pine&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng_to_ipa.json&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;out_delimiter&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;|&quot;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# &amp;lt;------- Add your delimiter here&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;reverse-default-false&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;reverse&lt;/code&gt; (default: false)&lt;/h5&gt;

&lt;p&gt;Setting &lt;code class=&quot;highlighter-rouge&quot;&gt;reverse: true&lt;/code&gt; will try to reverse the mappings so that all characters defined as &lt;code class=&quot;highlighter-rouge&quot;&gt;out&lt;/code&gt; in your mapping become the input characters and vice versa. Except for a few cases, this is unlikely to work very well for advanced mapings.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;mappings&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;language_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;English&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;display_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;English to IPA&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;in_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;out_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng-ipa&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mapping&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;authors&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Aidan Pine&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng_to_ipa.json&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# &amp;lt;------- Add this&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;prevent_feeding-default-false&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;prevent_feeding&lt;/code&gt; (default: false)&lt;/h5&gt;

&lt;p&gt;Let’s say you have the following rules:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;in&lt;/th&gt;
      &lt;th&gt;out&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;kw&lt;/td&gt;
      &lt;td&gt;kʷ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;k&lt;/td&gt;
      &lt;td&gt;kʲ&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Let’s say the intended output here is that whenever we get a &lt;code class=&quot;highlighter-rouge&quot;&gt;kw&lt;/code&gt; as an input, we get &lt;code class=&quot;highlighter-rouge&quot;&gt;kʷ&lt;/code&gt; and whenever we get &lt;code class=&quot;highlighter-rouge&quot;&gt;k&lt;/code&gt; we get &lt;code class=&quot;highlighter-rouge&quot;&gt;kʲ&lt;/code&gt;. Ordered in the way they are defined, an input of &lt;code class=&quot;highlighter-rouge&quot;&gt;kw&lt;/code&gt; will produce &lt;code class=&quot;highlighter-rouge&quot;&gt;kʲʷ&lt;/code&gt; and ordered the other way, an input of &lt;code class=&quot;highlighter-rouge&quot;&gt;kw&lt;/code&gt; will produce &lt;code class=&quot;highlighter-rouge&quot;&gt;kʲw&lt;/code&gt;. Neither of these are correct though! So, how do we solve this? There is a setting called &lt;code class=&quot;highlighter-rouge&quot;&gt;prevent_feeding&lt;/code&gt; which, if set to true, will prevent the output of one rule from being processed by any subsequent rule. As described in the &lt;a href=&quot;#rule-ordering&quot;&gt;rule ordering section&lt;/a&gt; the process when one rule provides the context for another rule to apply is called ‘feeding’. And so this setting is named &lt;code class=&quot;highlighter-rouge&quot;&gt;prevent_feeding&lt;/code&gt; because it prevents that from happening. Note, setting &lt;code class=&quot;highlighter-rouge&quot;&gt;prevent_feeding: true&lt;/code&gt; for your whole mapping will do this for every rule. If you just want to prevent feeding for one particular rule, you can write your rules in JSON and add the key to the specific rule you want to prevent feeding for.&lt;/p&gt;

&lt;p&gt;Prevent feeding for a single rule (in JSON rule mapping file):&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;in&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;kw&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;out&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;kʷ&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;prevent_feeding&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;in&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;k&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;out&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;kʲ&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Prevent feeding for every rule (in &lt;code class=&quot;highlighter-rouge&quot;&gt;config.yaml&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;mappings&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;language_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;English&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;display_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;English to IPA&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;in_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;out_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng-ipa&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mapping&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;authors&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Aidan Pine&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng_to_ipa.json&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;prevent_feeding&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# &amp;lt;------- Add this&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;defining-sets-of-characters&quot;&gt;Defining sets of characters&lt;/h3&gt;

&lt;p&gt;Some rules are written with repeating sets of characters that can be tedious to write out. As a result, we might want to define certain sets of reusable characters using a &lt;em&gt;variable&lt;/em&gt; name. These can be written using special types of mapping files in &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example, consider a series of rules which contextually apply only between vowels. Let’s say as an example of one of those rules, that &lt;code class=&quot;highlighter-rouge&quot;&gt;dd&lt;/code&gt; turns to &lt;code class=&quot;highlighter-rouge&quot;&gt;ð&lt;/code&gt; when it exists between two vowels. This language has the following vowels in its inventory: &lt;code class=&quot;highlighter-rouge&quot;&gt;a,e,i,o,u,æ,å,ø&lt;/code&gt;. You could write the rules like this&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;in&lt;/th&gt;
      &lt;th&gt;out&lt;/th&gt;
      &lt;th&gt;context_before&lt;/th&gt;
      &lt;th&gt;context_after&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;dd&lt;/td&gt;
      &lt;td&gt;ð&lt;/td&gt;
      &lt;td&gt;(a|e|i|o|u|æ|å|ø)&lt;/td&gt;
      &lt;td&gt;(a|e|i|o|u|æ|å|ø)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;But, if there are lots of rules with these vowels, this could get very tedious, not to mention annoying and error-prone if the characters in the set change at some point. It is also less readable, and leaves the reader of the mapping to infer the meaning of the rule.&lt;/p&gt;

&lt;p&gt;So, in a separate file, by convention it is usually called &lt;code class=&quot;highlighter-rouge&quot;&gt;abbreviations.csv&lt;/code&gt;, you can define a list of sets where each row is a new set. The first column contains the name of the set (by convention this is capitalized), and you can add characters to every following column. So, for example:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;variable name&lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;VOWEL&lt;/td&gt;
      &lt;td&gt;a&lt;/td&gt;
      &lt;td&gt;e&lt;/td&gt;
      &lt;td&gt;i&lt;/td&gt;
      &lt;td&gt;o&lt;/td&gt;
      &lt;td&gt;u&lt;/td&gt;
      &lt;td&gt;æ&lt;/td&gt;
      &lt;td&gt;å&lt;/td&gt;
      &lt;td&gt;ø&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CONSONANT&lt;/td&gt;
      &lt;td&gt;p&lt;/td&gt;
      &lt;td&gt;b&lt;/td&gt;
      &lt;td&gt;t&lt;/td&gt;
      &lt;td&gt;d&lt;/td&gt;
      &lt;td&gt;k&lt;/td&gt;
      &lt;td&gt;g&lt;/td&gt;
      &lt;td&gt;f&lt;/td&gt;
      &lt;td&gt;s&lt;/td&gt;
      &lt;td&gt;h&lt;/td&gt;
      &lt;td&gt;v&lt;/td&gt;
      &lt;td&gt;j&lt;/td&gt;
      &lt;td&gt;r&lt;/td&gt;
      &lt;td&gt;l&lt;/td&gt;
      &lt;td&gt;m&lt;/td&gt;
      &lt;td&gt;n&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;FRONT&lt;/td&gt;
      &lt;td&gt;i&lt;/td&gt;
      &lt;td&gt;e&lt;/td&gt;
      &lt;td&gt;œ&lt;/td&gt;
      &lt;td&gt;ø&lt;/td&gt;
      &lt;td&gt;y&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;BACK&lt;/td&gt;
      &lt;td&gt;u&lt;/td&gt;
      &lt;td&gt;o&lt;/td&gt;
      &lt;td&gt;a&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Then, in your configuration, you can add the file to a specific mapping using &lt;code class=&quot;highlighter-rouge&quot;&gt;abbreviations: abbreviations.csv&lt;/code&gt;. After adding it to your mapping, you can write the above rule like this instead:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;in&lt;/th&gt;
      &lt;th&gt;out&lt;/th&gt;
      &lt;th&gt;context_before&lt;/th&gt;
      &lt;th&gt;context_after&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;dd&lt;/td&gt;
      &lt;td&gt;ð&lt;/td&gt;
      &lt;td&gt;VOWEL&lt;/td&gt;
      &lt;td&gt;VOWEL&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;You can also use abbreviations like this in the G2P studio by writing them in the section at the bottom of the page titled ‘Custom Abbreviations’ They will be automatically applied to your custom rules above.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/g/g2p-abbs-800-7cd2be.png&quot; srcset=&quot;/assets/images/g/g2p-abbs-400-7cd2be.png 400w, /assets/images/g/g2p-abbs-600-7cd2be.png 600w, /assets/images/g/g2p-abbs-800-7cd2be.png 800w, /assets/images/g/g2p-abbs-968-7cd2be.png 968w&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;regular-expressions&quot;&gt;Regular Expressions&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Regular_expression&quot;&gt;Regular expressions&lt;/a&gt; are used ubiquitously in programming to define certain search patterns in text. In fact, this is how &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; rules work! They eventually get compiled into a regular expression too. For the most part, you can add regular expression syntax to your rules. So, suppose you wanted to write a rule that deleted word-final ‘s’, you could write the following:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;in&lt;/th&gt;
      &lt;th&gt;out&lt;/th&gt;
      &lt;th&gt;context_before&lt;/th&gt;
      &lt;th&gt;context_after&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;s&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;\B&lt;/td&gt;
      &lt;td&gt;\b&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;As you can see &lt;a href=&quot;https://cheatography.com/davechild/cheat-sheets/regular-expressions/&quot;&gt;in this handy regular expression cheatsheet&lt;/a&gt; our rule turns ‘s’ into nothing if it is preceded by \B (any character that is not a word boundary) and followed by \b (word boundary).&lt;/p&gt;

&lt;p&gt;Note: There are some ‘gotchas’ with writing regular expressions using g2p. This is a technical note, but if you’re writing some complicated regular expressions and they’re not working, don’t hesitate to &lt;a href=&quot;https://github.com/roedoejet/g2p/issues/new/choose&quot;&gt;raise an issue&lt;/a&gt;. For example there are some active issues around edge cases where regular expressions and &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt;’s custom &lt;a href=&quot;#using-specific-indices&quot;&gt;syntax for indices&lt;/a&gt; don’t play nice together.&lt;/p&gt;

&lt;h3 id=&quot;using-specific-indices&quot;&gt;Using specific indices&lt;/h3&gt;

&lt;p&gt;Even people familiar with using &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; might not be aware that one of its main features is that it preserves indices between input and output segments. Meaning that when we convert from something like ‘kæt’ to ‘kʰæt’ as in the first example, &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; knows that it’s the ‘k’ that turned into the ‘k’ and ‘ʰ’ as seen below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/g/k-to-kh-800-7e64e3.png&quot; srcset=&quot;/assets/images/g/k-to-kh-400-7e64e3.png 400w, /assets/images/g/k-to-kh-600-7e64e3.png 600w, /assets/images/g/k-to-kh-800-7e64e3.png 800w, /assets/images/g/k-to-kh-942-7e64e3.png 942w&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The default interpretation of rule indices by &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; is that it matches the characters between the input and the output one-by-one in a given rule until it reaches the end of either one, then it matches any remaining characters in the longer part (input or output) to the last character of the shorter part. For example, compare the following examples where ‘abc’ is converted to ‘ab’ and gloms the excess input character onto the last output character:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/g/abc-ab-800-3a0e08.png&quot; srcset=&quot;/assets/images/g/abc-ab-400-3a0e08.png 400w, /assets/images/g/abc-ab-600-3a0e08.png 600w, /assets/images/g/abc-ab-800-3a0e08.png 800w, /assets/images/g/abc-ab-942-3a0e08.png 942w&quot; /&gt;&lt;/p&gt;

&lt;p&gt;and where ‘ab’ is converted to ‘abc’ and gloms the excess output character onto the last input character:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/g/ab-abc-800-418b5c.png&quot; srcset=&quot;/assets/images/g/ab-abc-400-418b5c.png 400w, /assets/images/g/ab-abc-600-418b5c.png 600w, /assets/images/g/ab-abc-800-418b5c.png 800w, /assets/images/g/ab-abc-942-418b5c.png 942w&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But what if - for some imaginary reason - we want to show a rule where ‘ab’ turns into ‘bca’, and specifically make note that it was ‘b’ that turned into ‘bc’, and ‘a’ stays as ‘a’? Well, we can use special &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; syntax for explicitly writing these indices. Instead of,&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;in&lt;/th&gt;
      &lt;th&gt;out&lt;/th&gt;
      &lt;th&gt;context_before&lt;/th&gt;
      &lt;th&gt;context_after&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;ab&lt;/td&gt;
      &lt;td&gt;bca&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;we can write&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;in&lt;/th&gt;
      &lt;th&gt;out&lt;/th&gt;
      &lt;th&gt;context_before&lt;/th&gt;
      &lt;th&gt;context_after&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;a{1}b{2}&lt;/td&gt;
      &lt;td&gt;bc{2}a{1}&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Now, our indices will reflect our imaginary need to index ‘a’ with ‘a’ and ‘b’ with ‘bc’:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/g/ab-bca-i-800-bfa620.png&quot; srcset=&quot;/assets/images/g/ab-bca-i-400-bfa620.png 400w, /assets/images/g/ab-bca-i-600-bfa620.png 600w, /assets/images/g/ab-bca-i-800-bfa620.png 800w, /assets/images/g/ab-bca-i-1000-bfa620.png 1000w&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Using the explicit indices syntax will break up your rule into a number of smaller rules that apply the same defaults of above but to explicit sets of characters. You &lt;strong&gt;must&lt;/strong&gt; use curly brackets, but the choice of character you put inside is arbitrary — it just has to match on both sides. By convention, we use natural numbers. This will match all the characters to the left of each pair of curly brackets in the input with the matching index in the output. So here, ‘a’ is matched with ‘a’ and ‘b’ is matched with ‘bc’.&lt;/p&gt;

&lt;p&gt;These can get fairly complicated, so we recommend only using this functionality either for demonstration purposes, or for specific applications which require the preservation of indices.&lt;/p&gt;

&lt;h3 id=&quot;footnotes&quot;&gt;Footnotes&lt;/h3&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;You’ll notice that the syntax here is a little weird, what the heck are all of those pipes (the up-down things like |) doing there? That’s because I’m using &lt;a href=&quot;https://en.wikipedia.org/wiki/Regular_expression&quot;&gt;regular expressions&lt;/a&gt; to express a &lt;strong&gt;OR&lt;/strong&gt; e &lt;strong&gt;OR&lt;/strong&gt; u etc… For more info, check out the &lt;a href=&quot;#regular-expressions&quot;&gt;section on regular expressions&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 24 Oct 2021 00:00:00 +0000</pubDate>
        <link>https://blog.mothertongues.org/g2p-advanced-mappings/</link>
        <guid isPermaLink="true">https://blog.mothertongues.org/g2p-advanced-mappings/</guid>
        
        <category>tutorial</category>
        
        <category>explanation</category>
        
        <category>python</category>
        
        <category>g2p</category>
        
        
      </item>
    
      <item>
        <title>G2P Part 3: Make a basic mapping with g2p</title>
        <description>&lt;p&gt;This is the third blog post in a seven-part series describing how to make a basic mapping with &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; on your computer. If you haven’t already, please read the &lt;a href=&quot;https://blog.mothertongues.org/g2p-background&quot;&gt;introductory blog post for g2p&lt;/a&gt; and &lt;a href=&quot;https://blog.mothertongues.org/g2p-basic-mappings-gui&quot;&gt;the post about basic mappings with G2P Studio&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-background&quot;&gt;Background&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-basic-mappings-gui&quot;&gt;How to write a basic mapping in G2P Studio&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Writing mappings on your computer&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-advanced-mappings&quot;&gt;Advanced mappings&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-applications&quot;&gt;ReadAlong Studio &amp;amp; Other Applications&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-preprocess&quot;&gt;Preprocessing mappings&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-contributing&quot;&gt;Contributing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;what-you-need-to-know-to-understand-this-post&quot;&gt;What you need to know to understand this post&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;To be able to follow along, I suggest having some sort of text editor, like &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You will also need to have &lt;a href=&quot;https://www.python.org/&quot;&gt;Python&lt;/a&gt; installed on your computer. If you need a bit of help, my colleague Eddie Antonio Santos wrote a very good blog article on &lt;a href=&quot;https://eddieantonio.ca/blog/2020/01/26/installing-python-on-macos/&quot;&gt;installing Python on Mac&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;whats-the-gist-of-what-were-about-to-do&quot;&gt;What’s the gist of what we’re about to do?&lt;/h2&gt;

&lt;p&gt;As described in the &lt;a href=&quot;https://blog.mothertongues.org/g2p-basic-mappings-gui&quot;&gt;previous post&lt;/a&gt;, in order to use &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; we need to understand the building blocks; &lt;strong&gt;rules&lt;/strong&gt; and &lt;strong&gt;mappings&lt;/strong&gt;. &lt;strong&gt;Rules&lt;/strong&gt; are patterns that describe how to turn some input text into some other output text. When we combine a series of ordered rules together for a specific purpose, we call this a &lt;strong&gt;mapping&lt;/strong&gt;. This blog post will show you how to write rules and mappings on your computer to use with &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;how-do-i-follow-along&quot;&gt;How do I follow along?&lt;/h2&gt;

&lt;p&gt;You can follow along by writing your rules and mappings on your computer using a text editor like &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You should also install &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; by running &lt;code class=&quot;highlighter-rouge&quot;&gt;pip3 install g2p&lt;/code&gt;&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; in your command line or an &lt;a href=&quot;https://code.visualstudio.com/docs/editor/integrated-terminal&quot;&gt;integrated terminal&lt;/a&gt; within &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt;. See &lt;a href=&quot;https://www.kaggle.com/getting-started/99468&quot;&gt;this post&lt;/a&gt; for more information on installing Python packages with pip.&lt;/p&gt;

&lt;h3 id=&quot;use-in-python-and-the-command-line&quot;&gt;Use in Python and the command line&lt;/h3&gt;

&lt;h4 id=&quot;installation&quot;&gt;Installation&lt;/h4&gt;

&lt;p&gt;There are two ways to install &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;install the latest published version of &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt;, for use as is;&lt;/li&gt;
  &lt;li&gt;install an editable version to create your own mappings or edit &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; yourself.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To install the latest published version of &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt;, we recommend installing it using &lt;a href=&quot;https://en.wikipedia.org/wiki/Pip_(package_manager)&quot;&gt;pip&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;pip&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g2p&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you are going to be creating your own mappings or editing &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; in any way, you must first fork &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; by going to &lt;a href=&quot;https://github.com/roedoejet/g2p&quot;&gt;https://github.com/roedoejet/g2p&lt;/a&gt; and forking the project to your own GitHub space.&lt;/p&gt;

&lt;p&gt;Once you’ve forked &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt;, clone your own fork:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/YourGitHubUsername/g2p.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and then do an &lt;em&gt;editable&lt;/em&gt; pip installation:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;g2p &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; pip &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;usage&quot;&gt;Usage&lt;/h4&gt;

&lt;p&gt;Using &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; within Python can be done programatically using the &lt;code class=&quot;highlighter-rouge&quot;&gt;make_g2p&lt;/code&gt; function:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;g2p&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make_g2p&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transducer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make_g2p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'dan'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'eng-arpabet'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transducer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'hej'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output_string&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;'HH EH Y'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;command-line-interface&quot;&gt;Command Line Interface&lt;/h4&gt;

&lt;p&gt;You can also use &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; from the command line. The basic command for conversions is:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;g2p convert &amp;lt;input_text&amp;gt; &amp;lt;in_lang&amp;gt; &amp;lt;out_lang&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So in practice:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;g2p convert hej dan eng-arpabet
HH EH YY
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;basic-rule-writing&quot;&gt;Basic Rule writing&lt;/h2&gt;

&lt;p&gt;Each rule must be defined to have a sequence of one or more input characters and a sequence of zero or more output characters. We can define these rules in &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; either using a tabular spreadsheet format (CSV) or using a format called JavaScript Object Notation or &lt;a href=&quot;https://www.json.org/json-en.html&quot;&gt;JSON&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For example, rules written in the tabular comma-separated values (CSV) format:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;in&lt;/th&gt;
      &lt;th&gt;out&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;a&lt;/td&gt;
      &lt;td&gt;æ&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;or using &lt;a href=&quot;https://www.json.org/json-en.html&quot;&gt;JSON&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;in&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;out&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;æ&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Both of the above rules capture our first rule that turns an orthographic ‘a’ into a broad IPA /æ/. You can choose to write your rules in &lt;strong&gt;either&lt;/strong&gt; format, although JSON will offer you slightly more flexibility when writing &lt;a href=&quot;https://blog.mothertongues.org/g2p-advanced-mappings&quot;&gt;advanced rules&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If we want to write rules that depend on a particular context, we need a couple more columns (CSV) or keys (JSON) than just &lt;code class=&quot;highlighter-rouge&quot;&gt;in&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;out&lt;/code&gt;. This is where we use &lt;code class=&quot;highlighter-rouge&quot;&gt;context_before&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;context_after&lt;/code&gt;. So, our second rule from above was to turn /k/ to [kʰ] when the character after /k/ is /æ/. Here, we could write the rules like this:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;in&lt;/th&gt;
      &lt;th&gt;out&lt;/th&gt;
      &lt;th&gt;context_before&lt;/th&gt;
      &lt;th&gt;context_after&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;k&lt;/td&gt;
      &lt;td&gt;kʰ&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;æ&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;or like this using JSON:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;in&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;k&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;out&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;kʰ&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;context_after&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;æ&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;mapping-configuration&quot;&gt;Mapping configuration&lt;/h2&gt;

&lt;p&gt;When you combine multiple rules in &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; for a particular purpose, this is called a &lt;em&gt;mapping&lt;/em&gt;. In addition to each file containing your rules, you need a configuration file that tells &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; how to process your rules. We write mapping configurations in YAML files titled &lt;code class=&quot;highlighter-rouge&quot;&gt;config.yaml&lt;/code&gt;. “.yaml” is the file extension for YAML which stands for ‘Yet Another Markup Language’ - which might be how you’re feeling right now after having already learned about Comma Separated Value (CSV) files and JavaScript Object Notation (JSON)!!&lt;/p&gt;

&lt;p&gt;Here is a basic configuration for your mapping:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;mappings&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;language_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;My Test Language&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# this is a shared value for all the mappings in this configuration&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;display_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;My Test Language to IPA&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# this is a 'display name'. It is a user-friendly name for your mapping.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;in_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# This is the code for your language input. By convention in g2p this should contain your language's ISO 639-3 code&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;out_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-ipa&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# This is the code for the output of your mapping. In g2p we suffix -ipa to the in_lang for mappings between an orthography and IPA&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mapping&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;authors&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# This is a way to keep track of who has contributed to the mapping&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Aidan Pine&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test_to_ipa.json&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# This is the path to your mapping file. It should be in the same folder as your config.yaml file&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you are familiar with yaml, you will see that you can have more than one mapping under the &lt;code class=&quot;highlighter-rouge&quot;&gt;mappings&lt;/code&gt; key. So to add another mapping to this file, it would look like this:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;mappings&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;language_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;My Test Language&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;display_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;My Test Language to IPA&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;in_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;out_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-ipa&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mapping&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;authors&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Aidan Pine&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test_to_ipa.json&lt;/span&gt; 
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;language_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;My Test Language&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;display_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;My Test Language IPA to Arpabet&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;in_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-ipa&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;out_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-arpabet&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mapping&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;authors&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Aidan Pine&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test_ipa_to_arpabet.json&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you’re not familiar with YAML, and you’re not just copy pasting from here, I recommend having a look at one of the many &lt;a href=&quot;https://gettaurus.org/docs/YAMLTutorial/&quot;&gt;tutorials&lt;/a&gt; on how to use YAML properly before attempting to write your own mapping configuration, or looking at some of the examples of configurations in &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p/mappings/langs/*&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;bringing-it-all-together&quot;&gt;Bringing it all together&lt;/h2&gt;

&lt;p&gt;From following the previous two sections, you should have two files created: &lt;code class=&quot;highlighter-rouge&quot;&gt;test_to_ipa.json&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;config.yaml&lt;/code&gt;. Your &lt;code class=&quot;highlighter-rouge&quot;&gt;config.yaml&lt;/code&gt; file should look like this:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;mappings&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;language_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;My Test Language&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# this is a shared value for all the mappings in this configuration&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;display_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;My Test Language to IPA&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# this is a 'display name'. It is a user-friendly name for your mapping.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;in_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# This is the code for your language input. By convention in g2p this should contain your language's ISO 639-3 code&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;out_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-ipa&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# This is the code for the output of your mapping. By convention in g2p we suffix -ipa to the in_lang for mappings between an orthography and IPA&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mapping&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;authors&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# This is a way to keep track of who has contributed to the mapping&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Aidan Pine&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test_to_ipa.json&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# This is the path to your mapping file. It should be in the same folder as your config.yaml file&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and your &lt;code class=&quot;highlighter-rouge&quot;&gt;test_to_ipa.json&lt;/code&gt; file should look like this:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;in&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;k&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;out&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;kʰ&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;context_after&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;æ&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, type the following command in your command line or integrated terminal: &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p convert &quot;kæt&quot; test test-ipa --config /path/to/config.yaml&lt;/code&gt;, replace &lt;code class=&quot;highlighter-rouge&quot;&gt;/path/to/config.yaml&lt;/code&gt; with the path from your current working directory in the command line to your config.yaml file. You should see the output &lt;code class=&quot;highlighter-rouge&quot;&gt;kʰæt&lt;/code&gt; produced below. Congratulations! You did your first conversion with &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt;. Try changing your rules around or converting other text and experiment to see what happens.&lt;/p&gt;

&lt;h3 id=&quot;footnotes&quot;&gt;Footnotes&lt;/h3&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;See this link for more information on the difference between pip and pip3: https://www.pythonpool.com/pip-vs-pip3/ &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 23 Oct 2021 00:00:00 +0000</pubDate>
        <link>https://blog.mothertongues.org/g2p-basic-mappings-local/</link>
        <guid isPermaLink="true">https://blog.mothertongues.org/g2p-basic-mappings-local/</guid>
        
        <category>tutorial</category>
        
        <category>explanation</category>
        
        <category>tech-showcase</category>
        
        <category>g2p</category>
        
        
      </item>
    
      <item>
        <title>G2P Part 2: Using G2P Studio</title>
        <description>&lt;p&gt;This is the second blog post in a 7-part series describing how to make a basic mapping with &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt;. For background information on what &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; is, have a look at the &lt;a href=&quot;https://blog.mothertongues.org/g2p-background&quot;&gt;introductory blog post for g2p&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-background&quot;&gt;Background&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;How to write a basic mapping in G2P Studio&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-basic-mappings-local&quot;&gt;Writing mappings on your computer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-advanced-mappings&quot;&gt;Advanced mappings&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-applications&quot;&gt;ReadAlong Studio &amp;amp; Other Applications&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-preprocess&quot;&gt;Preprocessing mappings&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-contributing&quot;&gt;Contributing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;what-you-need-to-know-to-understand-this-post&quot;&gt;What you need to know to understand this post&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;To be able to follow along, you’ll need access to the internet, and to have read the &lt;a href=&quot;https://blog.mothertongues.org/g2p-background&quot;&gt;introductory blog post for g2p&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;whats-the-gist-of-what-were-about-to-do&quot;&gt;What’s the gist of what we’re about to do?&lt;/h2&gt;

&lt;p&gt;In order to use &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; we need to understand the building blocks; &lt;strong&gt;rules&lt;/strong&gt; and &lt;strong&gt;mappings&lt;/strong&gt;. &lt;strong&gt;Rules&lt;/strong&gt; are patterns that describe how to turn some input text into some other output text. When we combine a series of ordered rules together for a specific purpose, we call this a &lt;strong&gt;mapping&lt;/strong&gt;. This blog post will show you how to write rules and mappings to use with &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;how-do-i-follow-along&quot;&gt;How do I follow along?&lt;/h2&gt;

&lt;p&gt;The easiest way to write rules quickly is using the &lt;a href=&quot;https://g2p-studio.herokuapp.com/&quot;&gt;G2P Studio&lt;/a&gt; web application&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. Once landing on the G2P Studio page, you can scroll down to the &lt;a href=&quot;https://g2p-studio.herokuapp.com/#out_delimiter-0:~:text=Custom%20Rules&quot;&gt;Custom Rules&lt;/a&gt; section and start directly editing the spreadsheet available there. You can also follow along by writing your rules and mappings on your computer using a text editor like &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt;. This post only shows how to create rules using the &lt;a href=&quot;https://g2p-studio.herokuapp.com/&quot;&gt;G2P Studio&lt;/a&gt; web application. The &lt;a href=&quot;https://blog.mothertongues.org/g2p-basic-mappings-local&quot;&gt;next blog post&lt;/a&gt; will show you how to write these rules locally on your computer.&lt;/p&gt;

&lt;h1 id=&quot;how-to-get-from-a-to-b-or-a-to-æ-with-g2p&quot;&gt;How to get from ‘a’ to ‘b’ (or ‘a’ to ‘æ’) with g2p&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; is a Python library&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; (i.e. software written in the Python programming language) that helps you convert between different characters based on user-defined rules. The inspiration for how to write these rules was mostly taken from the notion of &lt;a href=&quot;https://en.wikipedia.org/wiki/Phonological_rule&quot;&gt;phonological rewrite rules&lt;/a&gt;, which is a common way of describing &lt;em&gt;multilevel&lt;/em&gt; phonological changes in linguistics. &lt;em&gt;Multilevel&lt;/em&gt; changes is the idea that a word, like ‘cats’ or ‘dogs’ can have multiple ‘levels’ of representation. For example, you might think of the way that those words are written in English orthography (writing system) as one level. Then, you might think of a general pronunciation for those words, written in the phonetic alphabet, as another level. You could also separate that level into more than one level by having a level each for &lt;a href=&quot;https://en.wikipedia.org/wiki/Phonetic_transcription#Narrow_versus_broad_transcription:~:text=orthography.-,Narrow%20versus%20broad%20transcription&quot;&gt;narrow and broad transcriptions&lt;/a&gt;.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Level Name&lt;/th&gt;
      &lt;th&gt;Word #1&lt;/th&gt;
      &lt;th&gt;Word #2&lt;/th&gt;
      &lt;th&gt;Word # 3&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Level 1 (orthography)&lt;/td&gt;
      &lt;td&gt;cat&lt;/td&gt;
      &lt;td&gt;dog&lt;/td&gt;
      &lt;td&gt;back&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Level 2 (broad IPA)&lt;/td&gt;
      &lt;td&gt;kæt&lt;/td&gt;
      &lt;td&gt;dɑɡ&lt;/td&gt;
      &lt;td&gt;bæk&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Level 3 (narrow IPA)&lt;/td&gt;
      &lt;td&gt;kʰæt&lt;/td&gt;
      &lt;td&gt;dɑɡ&lt;/td&gt;
      &lt;td&gt;bæk&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Now, just by looking at these three levels, you can probably see some fairly systematic rules here that you could imagine would get you from one level to the next, even if you don’t know the phonetic alphabet by heart and even if you don’t really know much about English phonology (sound patterns and systems).&lt;/p&gt;

&lt;p&gt;One possible hypothesis would be that all ‘a’ characters in level one turn to ‘æ’, so we might want a rule to express that all instances of ‘a’ turn to /æ/. And, for another example, it looks like between levels 2 and 3, /k/ turns into either [k] or [kʰ] depending on whether it occurs before or after /æ/&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;So, with these hypotheses about the rules to transform from one level to another, how do we start translating this into rules for &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt;? Keep reading to find out!&lt;/p&gt;

&lt;h2 id=&quot;basic-rule-writing&quot;&gt;Basic Rule writing&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; lets you describe these patterns using &lt;strong&gt;an ordered series of rules&lt;/strong&gt;. Each rule must be defined to have a sequence of one or more input characters and a sequence of zero or more output characters. In the &lt;a href=&quot;https://g2p-studio.herokuapp.com/&quot;&gt;G2P Studio&lt;/a&gt;, we write these rules in a spreadsheet-type interface.&lt;/p&gt;

&lt;p&gt;In the screenshot below we can see a very basic rule that will turn all instances of the character &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; into &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;. Each row is a new rule. The &lt;code class=&quot;highlighter-rouge&quot;&gt;In&lt;/code&gt; column describes what characters will be matched, and the &lt;code class=&quot;highlighter-rouge&quot;&gt;Out&lt;/code&gt; column describes what those matched characters will be turned into.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/g/basic-rule-studio-719-c7baf8.png&quot; srcset=&quot;/assets/images/g/basic-rule-studio-400-c7baf8.png 400w, /assets/images/g/basic-rule-studio-600-c7baf8.png 600w, /assets/images/g/basic-rule-studio-719-c7baf8.png 719w&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Context Before&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Context After&lt;/code&gt; columns describe any conditions for the matched text. For example, if I wanted to turn all &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; characters into &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; only if a &lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt; came before the &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;, I would write the rule like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/g/basic-rule-studio-context-731-74df3c.png&quot; srcset=&quot;/assets/images/g/basic-rule-studio-context-400-74df3c.png 400w, /assets/images/g/basic-rule-studio-context-600-74df3c.png 600w, /assets/images/g/basic-rule-studio-context-731-74df3c.png 731w&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;ok-so-how-do-i-actually-get-these-rules-to-do-something&quot;&gt;Ok, so how do I actually get these rules to do something?&lt;/h2&gt;

&lt;p&gt;So, you’ve understood the &lt;a href=&quot;#basic-rule-writing&quot;&gt;basics of writing rules&lt;/a&gt; described above and you want to actually use them to convert something? This section describes exactly how to do that.&lt;/p&gt;

&lt;p&gt;Below is a list of all the rules to capture the transformations between level 1 and level 2 above. There are some rules that we discussed in that section, and some others that might look unfamiliar. For a full description of some of these rules, have a look at the &lt;a href=&quot;https://blog.mothertongues.org/g2p-advanced-mappings&quot;&gt;advanced rule-writing section&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/g/custom-rules-g2p-studio-800-2a352d.png&quot; srcset=&quot;/assets/images/g/custom-rules-g2p-studio-400-2a352d.png 400w, /assets/images/g/custom-rules-g2p-studio-600-2a352d.png 600w, /assets/images/g/custom-rules-g2p-studio-800-2a352d.png 800w, /assets/images/g/custom-rules-g2p-studio-968-2a352d.png 968w&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once you have written your rules in this section, you can write some text in the left text area at the top of the G2P Studio, and &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; will apply your rules and produce the output in the right text area as seen below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/g/custom-rules-output-g2p-studio-800-8fbdf4.png&quot; srcset=&quot;/assets/images/g/custom-rules-output-g2p-studio-400-8fbdf4.png 400w, /assets/images/g/custom-rules-output-g2p-studio-600-8fbdf4.png 600w, /assets/images/g/custom-rules-output-g2p-studio-800-8fbdf4.png 800w, /assets/images/g/custom-rules-output-g2p-studio-977-8fbdf4.png 977w&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can also click on ‘Export’ under the Custom Rules section to export your rules to a CSV file if you want to save them for later.&lt;/p&gt;

&lt;p&gt;Have a read through the next blog post on &lt;a href=&quot;https://blog.mothertongues.org/g2p-basic-mappings-local&quot;&gt;writing rules on your computer without G2P Studio&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;footnotes&quot;&gt;Footnotes&lt;/h3&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;I’m using the free, hobby plan at &lt;a href=&quot;https://www.heroku.com/&quot;&gt;https://www.heroku.com/&lt;/a&gt; to host it though, so occasionally the server goes to sleep. If you first go to the site and it takes a few seconds to boot up, don’t worry! &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;A Python ‘library’ is a collection of code &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;Orthographic characters are wrapped in single quotes, like ‘a’; broad IPA typically uses forward slashes like /k/ and narrow IPA typically uses square brackets like [kʰ] &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 22 Oct 2021 00:00:00 +0000</pubDate>
        <link>https://blog.mothertongues.org/g2p-basic-mappings-gui/</link>
        <guid isPermaLink="true">https://blog.mothertongues.org/g2p-basic-mappings-gui/</guid>
        
        <category>tutorial</category>
        
        <category>explanation</category>
        
        <category>tech-showcase</category>
        
        <category>g2p</category>
        
        
      </item>
    
      <item>
        <title>G2P Part 1: Getting from 'a' to 'b' with g2p - why g2p exists and will let you do awesome things</title>
        <description>&lt;p&gt;This is the first blog post in a seven-part series about a software tool called &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt;. This post describes some of the background context for &lt;em&gt;why&lt;/em&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; was created, and subsequent posts will go into more detail about how to use &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; is a tool for systematically converting certain characters&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; into other ones. This sounds fairly simple, but it can actually be incredibly powerful and useful! For example, maybe you want to &lt;a href=&quot;#use-case-1-getting-the-pronunciation-from-a-words-spelling&quot;&gt;get the pronunciation from a word’s spelling&lt;/a&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; can help with that! Or maybe a language you’re learning or teaching has different writing systems and you want to &lt;a href=&quot;#use-case-2-a-language-with-multiple-writing-systems&quot;&gt;convert between them&lt;/a&gt;. Or, maybe your language has an historic or legacy way of writing and you want to &lt;a href=&quot;#use-case-3-converting-from-legacy-writing-systems&quot;&gt;convert it to the new writing system&lt;/a&gt;. There are also other uses for &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; which I’ll explain in following posts - keep reading to learn the basics of &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;g2p-blog-series-index&quot;&gt;G2P Blog Series Index&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Background&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-basic-mappings-gui&quot;&gt;How to write a basic mapping in G2P Studio&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-basic-mappings-local&quot;&gt;Writing mappings on your computer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-advanced-mappings&quot;&gt;Advanced mappings&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-applications&quot;&gt;ReadAlong Studio &amp;amp; Other Applications&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-preprocess&quot;&gt;Preprocessing mappings&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mothertongues.org/g2p-contributing&quot;&gt;Contributing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;who-is-involved-with-this-project&quot;&gt;Who is involved with this project?&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Maintainer (i.e. the person to bug with questions): &lt;a href=&quot;https://aidanpine.ca&quot;&gt;Aidan Pine&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Lots of &lt;a href=&quot;https://github.com/roedoejet/g2p/graphs/contributors&quot;&gt;other contributors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;what-are-the-motivations-behind-g2p&quot;&gt;What are the motivations behind G2P?&lt;/h1&gt;

&lt;p&gt;There are many reasons why you might want to systematically convert between different characters. Here are a few possible use cases:&lt;/p&gt;

&lt;h3 id=&quot;use-case-1-getting-the-pronunciation-from-a-words-spelling&quot;&gt;Use Case #1: Getting the pronunciation from a word’s spelling&lt;/h3&gt;

&lt;p&gt;Sometimes you want to convert from a language’s writing system (also known as &lt;em&gt;orthography&lt;/em&gt;) to its pronunciation. This is a very common task in &lt;a href=&quot;https://en.wikipedia.org/wiki/Natural_language_processing&quot;&gt;natural language processing&lt;/a&gt; and is essential in the creation of text-to-speech and automatic speech recognition systems. In &lt;a href=&quot;https://blog.mothertongues.org/g2p-applications&quot;&gt;another post in this series&lt;/a&gt;, I will describe the usefulness of &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; specifically with a project called “ReadAlongs”.&lt;/p&gt;

&lt;p&gt;“Letters” in a writing system are usually referred to as “graphemes” and their corresponding meaningful sounds are referred to as “phonemes”; hence “g2p” or “grapheme-to-phoneme”. It gets a little more complicated than that though, because sometimes a grapheme is made of more than one character, as with the &lt;em&gt;digraph&lt;/em&gt; “th” which can be pronounced &lt;em&gt;&lt;a href=&quot;https://www.thoughtco.com/voiced-and-voiceless-consonants-1212092#:~:text=Voiceless%20consonants%20do%20not%20use,as%20in%20%22thing%22&quot;&gt;unvoiced&lt;/a&gt;&lt;/em&gt; as in ‘thin’ or &lt;em&gt;&lt;a href=&quot;https://www.thoughtco.com/voiced-and-voiceless-consonants-1212092#:~:text=Voiced%20Consonants,-Your%20vocal%20cords&amp;amp;text=As%20you%20pronounce%20a%20letter,W%2C%20Y%2C%20and%20Z.&quot;&gt;voiced&lt;/a&gt;&lt;/em&gt; as in ‘that’. The &lt;a href=&quot;https://en.wikipedia.org/wiki/International_Phonetic_Alphabet&quot;&gt;International Phonetic Alphabet&lt;/a&gt; (IPA) is not so ambiguous! In IPA, the ‘th’ in ‘thin’ is written as &lt;strong&gt;θ&lt;/strong&gt; and the ‘th’ in ‘that’ is written as &lt;strong&gt;ð&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;use-case-2-a-language-with-multiple-writing-systems&quot;&gt;Use Case #2: A language with multiple writing systems&lt;/h3&gt;

&lt;p&gt;Some languages have two (or more!) different writing systems. Take Cree for example, where you can either write a word in &lt;em&gt;Standard Roman Orthography&lt;/em&gt; like “ê-wêpâpîhkêwêpinamâhk” or in &lt;em&gt;Syllabics&lt;/em&gt; like &lt;strong&gt;ᐁᐍᐹᐲᐦᑫᐍᐱᐊᒫᕽ&lt;/strong&gt;. My colleague &lt;a href=&quot;https://eddieantonio.ca&quot;&gt;Eddie&lt;/a&gt; has a great blog post about a tool he created to convert between the two &lt;a href=&quot;https://blog.mothertongues.org/why-a-new-cree-syllabics-converter&quot;&gt;here&lt;/a&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; can help with this kind of transformation between writing systems.&lt;/p&gt;

&lt;h3 id=&quot;use-case-3-converting-from-legacy-writing-systems&quot;&gt;Use Case #3: Converting from legacy writing systems&lt;/h3&gt;

&lt;p&gt;Some languages historically used “font hacks” to render the characters in their writing system before they were supported on computers. There’s a longer discussion to be had here, but the tldr version is that when computers were gaining widespread use among speakers of Indigenous languages, they weren’t typically able to &lt;em&gt;render&lt;/em&gt; (i.e., display) characters outside of the 128 characters supported by the &lt;a href=&quot;https://en.wikipedia.org/wiki/ASCII&quot;&gt;American Standard Code for Information Interchange (ASCII)&lt;/a&gt; or even any of the extensions to ASCII that provide a total of 256 character (e.g., &lt;a href=&quot;https://en.wikipedia.org/wiki/ISO/IEC_8859-1&quot;&gt;Latin-1&lt;/a&gt; for Western European languages). To get around this, language communities would come up with their own custom fonts (often referred to as “font hacks” or “font encodings”) where they would &lt;strong&gt;override&lt;/strong&gt; the display of a characters like “©” which existed in Latin-1, as ‘ǧ’ instead (example taken from the Heiltsuk Doulos font). For more information on this topic, please check out &lt;a href=&quot;https://aidanpine.ca/static/cv/pdfs/Pine-Turin-Convertextract-2018.pdf&quot;&gt;‘Seeing the Heiltsuk Orthography from Font Encoding through to Unicode’&lt;/a&gt; or &lt;a href=&quot;https://markturin.sites.olt.ubc.ca/files/2020/06/Schillo_Turin_typeface_2020.pdf&quot;&gt;‘Applications and innovations in typeface design for North American Indigenous languages’&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;using-g2p-studio&quot;&gt;Using g2p studio&lt;/h1&gt;

&lt;p&gt;If you want to use &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; to convert some text in one of the supported languages&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;, simply visit the &lt;a href=&quot;https://g2p-studio.herokuapp.com&quot;&gt;G2P Studio&lt;/a&gt;, select a language from the dropdown, and type in your text, as shown below. That’s all there is to it! To learn how to add support for other languages and use &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; for other cool things, go on to &lt;a href=&quot;https://blog.mothertongues.org/g2p-basic-mappings-gui&quot;&gt;the next part of the series&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/g/studio-basic-789-d809c0.png&quot; srcset=&quot;/assets/images/g/studio-basic-400-d809c0.png 400w, /assets/images/g/studio-basic-600-d809c0.png 600w, /assets/images/g/studio-basic-789-d809c0.png 789w&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;footnotes&quot;&gt;Footnotes&lt;/h3&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;Because the word ‘letter’ usually refers to a character within a specific alphabet or writing system, instead of ‘letter’, I’m going to use the word ‘character’ throughout this post. Similarly, despite the name of this tool being ‘Grapheme-to-Phoneme’, in reality &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; can be used to convert any characters to any other characters, not just graphemes (contrastive units of a writing system) to phonemes (contrastive units of a sound system). &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;At time of writing, this includes the following list along with their &lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_639-3&quot;&gt;ISO-639-3&lt;/a&gt; codes) &lt;a href=&quot;https://en.wikipedia.org/wiki/Algonquin_language&quot;&gt;alq - Anishinàbemiwin&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Atikamekw_language&quot;&gt;atj - Atikamekw&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Michif&quot;&gt;crg - Michif&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/East_Cree&quot;&gt;crj - Southern &amp;amp; Northern East Cree&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Plains_Cree_language&quot;&gt;crx - Plains Cree&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Moose_Cree_language&quot;&gt;crm - Moose Cree&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Swampy_Cree_language&quot;&gt;csw - Swampy Cree&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Highland_Chatino&quot;&gt;ctp - Western Highland Chatino&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Danish_language&quot;&gt;dan - Danish&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/French_language&quot;&gt;fra - French&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Gitxsan_language&quot;&gt;git - Gitksan&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Scottish_Gaelic&quot;&gt;gla - Scottish Gaelic&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Gwich%CA%BCin_language&quot;&gt;gwi - Gwich’in&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/H%C3%A4n_language&quot;&gt;haa - Hän&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Inuinnaqtun&quot;&gt;ikt - Inuinnaqtun&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Inuktitut&quot;&gt;iku - Inuktitut&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Kaska_language&quot;&gt;Kaska&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Kwak%CA%BCwala&quot;&gt;kwk - Kwak’wala&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Raga_language&quot;&gt;lml - Raga&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Mi%EA%9E%8Ckmaq_language&quot;&gt;mic - Mi’kmaq&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Mohawk_language&quot;&gt;moh - Kanien’kéha&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Ojibwe_language&quot;&gt;oji - Anishinaabemowin&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Seneca_language&quot;&gt;see - Seneca&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Tsuut%CA%BCina_language&quot;&gt;srs - Tsuut’ina&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Upper_Tanana_language&quot;&gt;tau - Upper Tanana&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Tutchone_language&quot;&gt;tce - Southern Tutchone&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Tutchone_language&quot;&gt;ttm - Northern Tutchone&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Tagish_language&quot;&gt;tgx - Tagish&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Tlingit_language&quot;&gt;tli - Tlingit&lt;/a&gt; &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 21 Oct 2021 00:00:00 +0000</pubDate>
        <link>https://blog.mothertongues.org/g2p-background/</link>
        <guid isPermaLink="true">https://blog.mothertongues.org/g2p-background/</guid>
        
        <category>tutorial</category>
        
        <category>explanation</category>
        
        <category>tech-showcase</category>
        
        <category>g2p</category>
        
        
      </item>
    
      <item>
        <title>Tutorial: Choosing the right fonts to show Cree syllabics on your website</title>
        <description>&lt;p&gt;&lt;abbr title=&quot;too long; didn't read&quot;&gt;&lt;strong&gt;tl;dr&lt;/strong&gt;&lt;/abbr&gt;: Use this
&lt;code class=&quot;highlighter-rouge&quot;&gt;font-family&lt;/code&gt; CSS declaration to successfully display Western Cree syllabics
for most visitors to your website:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;Gadugi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;Euphemia&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Euphemia UCAS'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Aboriginal Sans'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Noto Sans Canadian Aboriginal'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;sans-serif&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Include the following line to your website’s &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;head&amp;gt;&lt;/code&gt; to automatically download
a syllabics font if no appropriate fonts are installed on your
smartphone/computer/device:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;//fonts.googleapis.com/earlyaccess/notosanscanadianaboriginal.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Read the rest of this article to learn more about choosing syllabics
fonts for the web!&lt;/p&gt;

&lt;h2 id=&quot;what-you-need-to-know-to-understand-this-post&quot;&gt;What you need to know to understand this post&lt;/h2&gt;

&lt;p&gt;You will need to know how to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How to edit your website’s &lt;abbr title=&quot;Cascading Stylesheets&quot;&gt;&lt;a href=&quot;https://www.w3schools.com/css/css_howto.asp#:~:text=With%20an%20external%20style%20sheet,%20you%20can%20change%20the%20look%20of%20an%20entire%20website%20by%20changing%20just%20one%20file!&quot;&gt;CSS&lt;/a&gt;&lt;/abbr&gt;&lt;/li&gt;
  &lt;li&gt;How to add a &lt;a href=&quot;https://www.w3schools.com/tags/tag_link.asp&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;link&amp;gt;&lt;/code&gt;&lt;/a&gt; element to your HTML’s &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;head&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you’ve ever added a custom font from &lt;a href=&quot;https://fonts.google.com/&quot;&gt;Google Fonts&lt;/a&gt; to your
website, you know enough to follow this post!&lt;/p&gt;

&lt;p&gt;It’s also helpful to know the &lt;a href=&quot;https://about.easil.com/support/serif-vs-sans-serif/&quot;&gt;difference between serif and sans-serif
fonts&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;lets-get-started&quot;&gt;Let’s get started!&lt;/h2&gt;

&lt;p&gt;Have you ever wanted to display &lt;strong&gt;Cree syllabics&lt;/strong&gt; on your website, but
when you tried, all you got were these blank boxes, colloquially called
&lt;em&gt;&lt;a href=&quot;https://english.stackexchange.com/a/331483&quot;&gt;tofu&lt;/a&gt;&lt;/em&gt;?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;□□□ □□□□□□! □□□□□□□□□□ □□□□□ «□ □□□□□□□□□»□&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tofu no longer! Let’s discuss the various syllabics fonts that exist out
there, where they are commonly found, and let’s create a &lt;strong&gt;font stack&lt;/strong&gt;:
a list of fonts that your web browser tries in order such that it finds
a font that displays syllabics correctly.&lt;/p&gt;

&lt;aside&gt;
  &lt;strong&gt;Note&lt;/strong&gt;: I am most familiar with &lt;strong&gt;Western Cree
  Syllabics&lt;/strong&gt; (Y-dialect, Th-dialect, N-dialect).
  However most of these fonts &lt;em&gt;might&lt;/em&gt; work for other languages.
  Note that some fonts in this post do not contain &lt;em&gt;all&lt;/em&gt;
  syllabics characters for all languages that use syllabics, and there's
  even some incorrect characters in one font! 😱 So even though this is
  the stack I guarantee to work for Western Cree, for other languages,
  your mileage may vary.
&lt;/aside&gt;

&lt;h2 id=&quot;common-syllabics-fonts&quot;&gt;Common syllabics fonts&lt;/h2&gt;

&lt;p&gt;I will discuss the following fonts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Aboriginal Sans&lt;/strong&gt; and &lt;strong&gt;Aboriginal Serif&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Euphemia&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Gadugi&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Noto Sans Canadian Aboriginal&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://www.eastcree.org/cree/en/resources/how-to/cree-fonts/&quot;&gt;There are many more syllabics fonts out there&lt;/a&gt;, but in this post, I want
to focus on just enough for you to make syllabics work on websites.&lt;/p&gt;

&lt;p&gt;I made an &lt;strong&gt;interactive demonstration&lt;/strong&gt; of these fonts that you can play
with. Go ahead and type any text in Western Cree into the box and it
will be converted to syllabics and displayed in the appropriate font, if
it’s available on your system:&lt;/p&gt;

&lt;p class=&quot;codepen&quot; data-height=&quot;500&quot; data-theme-id=&quot;light&quot; data-default-tab=&quot;result&quot; data-user=&quot;eddieantonio&quot; data-slug-hash=&quot;GRZOBYY&quot; style=&quot;height: 500px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; data-pen-title=&quot;Syllabics font playground&quot;&gt;
  &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/eddieantonio/pen/GRZOBYY&quot;&gt;
  Syllabics font playground&lt;/a&gt; by Eddie Antonio Santos (&lt;a href=&quot;https://codepen.io/eddieantonio&quot;&gt;@eddieantonio&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;But &lt;strong&gt;where&lt;/strong&gt; do these fonts come from? Where should you &lt;strong&gt;expect these fonts to be
available&lt;/strong&gt;?&lt;/p&gt;

&lt;h3 id=&quot;aboriginal-sans-and-aboriginal-serif&quot;&gt;Aboriginal Sans and Aboriginal Serif&lt;/h3&gt;

&lt;p&gt;As the names suggest, they have both serif and sans-serif variants for
writing in Latin script (e.g., English, French, etc.).&lt;/p&gt;

&lt;h4 id=&quot;who-created-these-fonts&quot;&gt;Who created these fonts?&lt;/h4&gt;

&lt;p&gt;These fonts were created by the Language Geek himself, &lt;a href=&quot;http://www.languagegeek.com/&quot;&gt;Chris Harvey&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;where-are-these-fonts-pre-installed&quot;&gt;Where are these fonts pre-installed?&lt;/h4&gt;

&lt;p&gt;As far as I know, no system has Aboriginal Sans or Aboriginal Serif
pre-installed, so you have to &lt;a href=&quot;http://www.languagegeek.com/font/fontdownload.html&quot;&gt;download them yourself from his
website&lt;/a&gt;. Sometimes, they are bundled with certain
&lt;a href=&quot;https://keyman.com/&quot;&gt;Keyman&lt;/a&gt; keyboard layouts.&lt;/p&gt;

&lt;p&gt;If you’ve tried getting syllabics to work on your computer, chances are,
you’ve downloaded either of these fonts!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.languagegeek.com/font/fontdownload.html&quot;&gt;Languagegeek.com&lt;/a&gt; has many other fonts that
display syllabics.&lt;/p&gt;

&lt;h3 id=&quot;gadugi&quot;&gt;Gadugi&lt;/h3&gt;

&lt;p&gt;This is a modern font that displays both syllabics and Cherokee.
“Gadugi” is a Cherokee word that means “&lt;a href=&quot;https://archive.org/details/cherokeeenglishd0000feel/page/92/mode/2up?q=gadugi&quot;&gt;cooperative
labour&lt;/a&gt;”.&lt;/p&gt;

&lt;h4 id=&quot;who-created-this-font&quot;&gt;Who created this font?&lt;/h4&gt;

&lt;p&gt;I believe Microsoft commissioned this font.&lt;/p&gt;

&lt;h4 id=&quot;where-is-this-font-pre-installed&quot;&gt;Where is this font pre-installed?&lt;/h4&gt;

&lt;p&gt;Gadugi has been included in &lt;a href=&quot;https://docs.microsoft.com/en-us/typography/font-list/gadugi#products-that-supply-this-font&quot;&gt;&lt;strong&gt;all versions of Windows since Windows
8&lt;/strong&gt;&lt;/a&gt;. &lt;a href=&quot;https://support.microsoft.com/en-us/office/cloud-fonts-in-office-f7b009fe-037f-45ed-a556-b5fe6ede6adb?ui=en-us&amp;amp;rs=en-us&amp;amp;ad=us#text:~:text=gadugi.ttf&quot;&gt;It’s also available as a “Cloud
font”&lt;/a&gt; on Microsoft Office products.&lt;/p&gt;

&lt;h3 id=&quot;euphemia&quot;&gt;Euphemia&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Euphemia&lt;/strong&gt; or &lt;strong&gt;Euphemia UCAS&lt;/strong&gt;&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; is a sleek font for syllabics. It also
includes glyphs for Latin (e.g., English/French) characters.&lt;/p&gt;

&lt;h4 id=&quot;who-created-this-font-1&quot;&gt;Who created this font?&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://www.tiro.com/syllabics/resources/index.html&quot;&gt;Tiro Typeworks created Euphemia&lt;/a&gt;. Ross Mills from Tiro has also
created the &lt;a href=&quot;https://www.pauktuutit.ca/library/&quot;&gt;Pigiarniq&lt;/a&gt; for Inuktitut, but I will not cover that font
in this blog post.&lt;/p&gt;

&lt;h4 id=&quot;where-is-this-font-pre-installed-1&quot;&gt;Where is this font pre-installed?&lt;/h4&gt;

&lt;p&gt;Euphemia is distributed on &lt;a href=&quot;https://docs.microsoft.com/en-us/typography/font-list/euphemia#products-that-supply-this-font&quot;&gt;&lt;strong&gt;Windows Vista and newer&lt;/strong&gt;&lt;/a&gt;.
It is currently distributed as &lt;strong&gt;Euphemia UCAS&lt;/strong&gt; on Apple systems
(&lt;strong&gt;macOS&lt;/strong&gt;/&lt;strong&gt;iOS&lt;/strong&gt;).&lt;/p&gt;

&lt;h4 id=&quot;issues&quot;&gt;Issues&lt;/h4&gt;

&lt;p&gt;Unfortunately, for East Cree, this font will &lt;strong&gt;NOT&lt;/strong&gt; work, as it has the
&lt;a href=&quot;https://www.eastcree.org/cree/en/resources/how-to/cree-fonts/syllabic-font-orientation/&quot;&gt;incorrect orientation for the ᔓ (&lt;em&gt;sho&lt;/em&gt;) and ᔕ (&lt;em&gt;sha&lt;/em&gt;) syllabics&lt;/a&gt; 😱&lt;/p&gt;

&lt;p&gt;So I would recommend &lt;strong&gt;omitting it from the font stack for Eastern
Cree&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So if you can’t use Euphemia, which font should you use instead?&lt;/p&gt;

&lt;h3 id=&quot;noto-sans-canadian-aboriginal&quot;&gt;Noto Sans Canadian Aboriginal&lt;/h3&gt;

&lt;p&gt;Noto is Google’s project to &lt;a href=&quot;https://www.google.com/get/noto/&quot;&gt;eliminate tofu (□) for all languages of the
world&lt;/a&gt;, hence &lt;em&gt;noto&lt;/em&gt; (“&lt;strong&gt;no&lt;/strong&gt; more &lt;strong&gt;to&lt;/strong&gt;fu”).&lt;/p&gt;

&lt;p&gt;As far as I’m aware, Google does not have a “Noto &lt;em&gt;Serif&lt;/em&gt; Canadian
Aboriginal”.&lt;/p&gt;

&lt;h4 id=&quot;who-created-this-font-2&quot;&gt;Who created this font?&lt;/h4&gt;

&lt;p&gt;As mentioned, &lt;a href=&quot;https://fonts.google.com/earlyaccess#Noto+Sans+Canadian+Aboriginal&quot;&gt;Google created Noto Sans&lt;/a&gt;!&lt;/p&gt;

&lt;h4 id=&quot;where-is-this-font-pre-installed-2&quot;&gt;Where is this font pre-installed?&lt;/h4&gt;

&lt;p&gt;Noto Sans Canadian Aboriginal can be found on Google products, such as
&lt;strong&gt;Android phones&lt;/strong&gt;, &lt;strong&gt;Android tablets&lt;/strong&gt;, and &lt;strong&gt;Chromebooks&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Importantly, Google allows website authors to &lt;strong&gt;&lt;a href=&quot;https://fonts.google.com/earlyaccess#Noto+Sans+Canadian+Aboriginal&quot;&gt;embed Noto on your
website&lt;/a&gt;&lt;/strong&gt;, just as you can embed other fonts via their &lt;a href=&quot;https://fonts.google.com/&quot;&gt;Google Fonts&lt;/a&gt;
service.&lt;/p&gt;

&lt;p&gt;Most modern web browsers will &lt;strong&gt;automatically download&lt;/strong&gt; Noto Sans if
you included it in your font stack and no appropriate font is found.&lt;/p&gt;

&lt;h2 id=&quot;how-to-get-the-right-fonts-to-appear-on-your-webpage&quot;&gt;How to get the right fonts to appear on your webpage&lt;/h2&gt;

&lt;p&gt;Now that we know about what fonts are out there, lets construct
a &lt;code class=&quot;highlighter-rouge&quot;&gt;font-family&lt;/code&gt; declaration that will support syllabics on as many
devices as possible.&lt;/p&gt;

&lt;p&gt;Recall that the &lt;code class=&quot;highlighter-rouge&quot;&gt;font-family&lt;/code&gt; declaration is a list of fonts that the
web browser &lt;strong&gt;will try in order&lt;/strong&gt;. The first font in the list that is
installed will be used.&lt;/p&gt;

&lt;p&gt;Let’s start with the &lt;strong&gt;fallbacks&lt;/strong&gt; first. Let’s say our users’ device
does not have a font that supports syllabics installed on their
computer. Since Google allows &lt;strong&gt;Noto Sans Canadian Aboriginal&lt;/strong&gt; to be
automatically downloaded on your website when needed, let’s start with
this &lt;code class=&quot;highlighter-rouge&quot;&gt;font-family&lt;/code&gt; declaration:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Noto Sans Canadian Aboriginal'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sans-serif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To get your browser to download the appropriate fonts, add this to your
website’s &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;head&amp;gt;&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;//fonts.googleapis.com/earlyaccess/notosanscanadianaboriginal.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;add-support-for-aboriginal-sans&quot;&gt;Add support for Aboriginal Sans&lt;/h3&gt;

&lt;p&gt;Perhaps your reader has installed &lt;strong&gt;Aboriginal Sans&lt;/strong&gt; to their computer.
Update your &lt;code class=&quot;highlighter-rouge&quot;&gt;font-family&lt;/code&gt; declaration as follows:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Aboriginal Sans'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Noto Sans Canadian Aboriginal'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sans-serif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This way, the web browser will try using Aboriginal Sans if it’s
installed, and &lt;em&gt;then&lt;/em&gt; attempt to download Noto Sans.&lt;/p&gt;

&lt;h3 id=&quot;add-support-for-maciphoneipad-users&quot;&gt;Add support for Mac/iPhone/iPad users&lt;/h3&gt;

&lt;p&gt;(omit this step for &lt;a href=&quot;https://www.eastcree.org/cree/en/resources/how-to/cree-fonts/syllabic-font-orientation/&quot;&gt;East Cree&lt;/a&gt;!)&lt;/p&gt;

&lt;p&gt;Now let’s support users of Apple devices. Prepend &lt;strong&gt;Euphemia UCAS&lt;/strong&gt; to
the &lt;code class=&quot;highlighter-rouge&quot;&gt;font-family&lt;/code&gt; declaration:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Euphemia UCAS'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Aboriginal Sans'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Noto Sans Canadian Aboriginal'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sans-serif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;add-support-for-windows-users&quot;&gt;Add support for Windows Users&lt;/h3&gt;

&lt;p&gt;Recall that earlier versions of Windows include &lt;strong&gt;Euphemia&lt;/strong&gt;; later
versions support &lt;strong&gt;Gadugi&lt;/strong&gt;. Prepend the following rules to try using
Gadugi first.&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Gadugi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Euphemia&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Euphemia UCAS'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Aboriginal Sans'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Noto Sans Canadian Aboriginal'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sans-serif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;finally-specify-your-latin-fonts&quot;&gt;Finally, specify your Latin fonts&lt;/h3&gt;

&lt;p&gt;If you’re displaying Latin text (e.g., English, French, Cree SRO, etc.),
then this font goes &lt;strong&gt;first&lt;/strong&gt;. Recall that many of the syllabics fonts
contain glyphs for Latin characters, so we will have to list
our preferred Latin font &lt;strong&gt;first&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;For this example, say I want to use &lt;strong&gt;Open Sans&lt;/strong&gt; (which you can
embed from &lt;a href=&quot;https://fonts.google.com/&quot;&gt;Google Fonts&lt;/a&gt;). Prepend &lt;strong&gt;Open Sans&lt;/strong&gt; to the front of
the list:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Open Sans'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Gadugi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Euphemia&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Euphemia UCAS'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Aboriginal Sans'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Noto Sans Canadian Aboriginal'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sans-serif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You’re done! You’re ready to display syllabics on the web!&lt;/p&gt;

&lt;h2 id=&quot;finished&quot;&gt;Finished!&lt;/h2&gt;

&lt;p&gt;With these declarations, you should be able to display syllabics on your
website, and be reasonably confident that everybody can read it.&lt;/p&gt;

&lt;p&gt;Here’s a complete example that uses our syllabics font stack in
addition to a few fonts from Google Fonts to round things out:&lt;/p&gt;

&lt;p class=&quot;codepen&quot; data-height=&quot;265&quot; data-theme-id=&quot;light&quot; data-default-tab=&quot;css,result&quot; data-user=&quot;eddieantonio&quot; data-slug-hash=&quot;mdPqoxK&quot; style=&quot;height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; data-pen-title=&quot;Syllabics font stack complete example&quot;&gt;
  &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/eddieantonio/pen/mdPqoxK&quot;&gt;
  Syllabics font stack complete example&lt;/a&gt; by Eddie Antonio Santos (&lt;a href=&quot;https://codepen.io/eddieantonio&quot;&gt;@eddieantonio&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://static.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;UCAS, or “Unified Canadian Aboriginal Syllabics”, the name of &lt;a href=&quot;https://unicode.org/charts/PDF/U1400.pdf&quot;&gt;the Unicode block&lt;/a&gt; that this font covers. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 03 Sep 2020 00:00:00 +0000</pubDate>
        <link>https://blog.mothertongues.org/tutorial-syllabics-fonts/</link>
        <guid isPermaLink="true">https://blog.mothertongues.org/tutorial-syllabics-fonts/</guid>
        
        <category>intermediate</category>
        
        <category>syllabics</category>
        
        <category>Cree</category>
        
        <category>fonts</category>
        
        <category>html</category>
        
        <category>css</category>
        
        
        <category>Tutorial</category>
        
      </item>
    
      <item>
        <title>How to use the new Convertextract application for 'quality control' of ELAN annotations</title>
        <description>&lt;h1 id=&quot;tldr&quot;&gt;TL;DR&lt;/h1&gt;

&lt;p&gt;Have you ever wanted to &lt;em&gt;NOT&lt;/em&gt; spend hours tediously checking that &lt;strong&gt;k + ‘&lt;/strong&gt; is written as &lt;strong&gt;k̓&lt;/strong&gt; and not &lt;strong&gt;k’&lt;/strong&gt;?
If you said &lt;strong&gt;YES!&lt;/strong&gt;, &lt;em&gt;Convertextract&lt;/em&gt; is the app for you. With minimal technical knowledge, you can now systemically make your &lt;a href=&quot;https://archive.mpi.nl/tla/elan&quot;&gt;ELAN&lt;/a&gt; annotations consistent.&lt;/p&gt;

&lt;h1 id=&quot;what-you-need-to-know-to-understand-this-post&quot;&gt;What you need to know to understand this post&lt;/h1&gt;

&lt;p&gt;I assume that you know some background about the &lt;a href=&quot;https://github.com/roedoejet/g2p&quot;&gt;g2p library&lt;/a&gt;.
For the purposes of using these tools, a library is a collection of code and documentation, but if you would like to dig deeper you can check out this &lt;a href=&quot;https://en.wikipedia.org/wiki/Library_(computing)&quot;&gt;Wikipedia article&lt;/a&gt; 
The g2p library uses existing and custom mappings (i.e. arbitrary input-&amp;gt;output conversions). For example, you might want &lt;strong&gt;k’&lt;/strong&gt; (input) to be converted to &lt;strong&gt;k̓&lt;/strong&gt; (output). The Mapping is the roadmap for converting.
These conversions are &lt;strong&gt;arbitrary&lt;/strong&gt;, so depending on your use case you may need to create new mappings. Most of the existing mappings convert &lt;em&gt;Graphemes&lt;/em&gt; (a character in the writing system of a language) to &lt;em&gt;Phonemes&lt;/em&gt; (their equivalent sound in the language), hence the name ‘g2p’. 
To see existing mappings click &lt;a href=&quot;https://g2p-studio.herokuapp.com&quot;&gt;here&lt;/a&gt;
To keep this post simple, I will not explain how to add new g2p mappings. The documentation for adding mappings is &lt;a href=&quot;https://github.com/roedoejet/g2p#writing-mapping-files&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;who-is-involved-with-this-project&quot;&gt;Who is involved with this project?&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Kwak̓wala Corpus Collection group&lt;/p&gt;

    &lt;p&gt;Sara Child &lt;a href=&quot;mailto:saratlilinukw@gmail.com&quot;&gt;saratlilinukw@gmail.com&lt;/a&gt;
  Daisy Rosenblum &lt;a href=&quot;mailto:daisy.rosenblum@ubc.ca&quot;&gt;daisy.rosenblum@ubc.ca&lt;/a&gt;
  Caroline Running Wolf &lt;a href=&quot;mailto:caroline.oldcoyote@gmail.com&quot;&gt;caroline.oldcoyote@gmail.com&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;App developer: &lt;a href=&quot;https://aidanpine.ca&quot;&gt;Aidan Pine&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Support for adding mappings/parsers: &lt;a href=&quot;mailto:fineen.davis@gmail.com&quot;&gt;Fineen Davis&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;what-is-needed-to-replicate-the-content-in-the-post&quot;&gt;What is needed to replicate the content in the post?&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://g2p-studio.herokuapp.com&quot;&gt;g2p&lt;/a&gt; Mapping of the desired conversions&lt;/li&gt;
  &lt;li&gt;Language text to be converted&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/roedoejet/convertextract/&quot;&gt;Convertextract&lt;/a&gt; app (read the post for installation!)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;what-are-the-motivations-behind-this-technology&quot;&gt;What are the motivations behind this technology?&lt;/h1&gt;

&lt;p&gt;As a Student Intern on the NRC’s &lt;a href=&quot;https://nrc.canada.ca/en/research-development/research-collaboration/programs/canadian-indigenous-languages-technology-project&quot;&gt;Indigenous Language Technology (ILT) project&lt;/a&gt;, I was approached by the Kwak̓wala Corpus Collection group to help create a systemic way to streamline the quality control process for their ELAN annotation data. Having many different people with many different orthographic conventions (i.e. different ways of writing the same thing) all working on annotating Kwak̓wala language data had resulted in inconsistencies.&lt;/p&gt;

&lt;p&gt;For example, there was four ways that people were writing &lt;strong&gt;t̓s&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;t’s&lt;/strong&gt;, &lt;strong&gt;t̕s&lt;/strong&gt;, &lt;strong&gt;ts̓&lt;/strong&gt;, &lt;strong&gt;ts’&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, I added mappings in the g2p library that took the alternative forms and &lt;em&gt;streamlined&lt;/em&gt; them therefore producing only one form in the output.Then I added support for ELAN files in the Convertextract library, so that the process became automated. Aidan Pine then turned Convertextract into an app!&lt;/p&gt;

&lt;h1 id=&quot;how-to-use-the-new-convertextract-app-for-quality-control-of-elan-annotations&quot;&gt;How to use the new Convertextract app for ‘quality control’ of ELAN annotations&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/roedoejet/convertextract&quot;&gt;Convertextract&lt;/a&gt;, created by Aidan Pine, is a &lt;code class=&quot;highlighter-rouge&quot;&gt;python&lt;/code&gt; library which extracts text data and finds/replaces specific text based on arbitrary correspondences. 
Until now, only basic &lt;a href=&quot;https://en.wikipedia.org/wiki/Command-line_interface&quot;&gt;CLI&lt;/a&gt; (Command Line Interface) was supported. Using Convertextract in the CLI allowed the user to convert a file based on pre-existing Mappings in the &lt;a href=&quot;https://github.com/roedoejet/g2p/tree/master/g2p/mappings/langs&quot;&gt;g2p library&lt;/a&gt; or based on a custom Mapping (not described here). However, the downside is that some programming knowledge is needed to use the CLI.
The latest update now includes a &lt;a href=&quot;https://en.wikipedia.org/wiki/Graphical_user_interface&quot;&gt;GUI&lt;/a&gt; (Graphical User Interface) in the form of an app (for Mac computers &lt;strong&gt;only&lt;/strong&gt;). The app makes Convertextract more accessible for non-programmers.&lt;/p&gt;

&lt;h3 id=&quot;1-g2p-mapping&quot;&gt;1. G2P mapping&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Convertextract&lt;/em&gt; will carry out the streamlining for you, but it has to know what to convert. The g2p Mapping is this roadmap. See the section &lt;em&gt;What you need to know to understand this post&lt;/em&gt; for more information on how to see if your language is supported.&lt;/p&gt;

&lt;h3 id=&quot;2-language-data&quot;&gt;2. Language data&lt;/h3&gt;

&lt;p&gt;You language data must be in one of the supported file formats. The most recent addition is &lt;code class=&quot;highlighter-rouge&quot;&gt;.eaf&lt;/code&gt; files, which allows ELAN annotations to be used!
For a full list of supported file types click &lt;a href=&quot;https://github.com/roedoejet/convertextract/tree/master/convertextract/parsers&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;3-convertextract-application&quot;&gt;3. Convertextract application&lt;/h3&gt;

&lt;h4 id=&quot;installation&quot;&gt;Installation&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt; The app works on &lt;strong&gt;Mac only!!!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To download the app: &lt;a href=&quot;https://github.com/roedoejet/convertextract/releases&quot;&gt;https://github.com/roedoejet/convertextract/releases&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In your downloads folder, find the .zip file and double click on it to unzip.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Downloads&amp;gt;&lt;strong&gt;convertextract&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Right-click on the application in the dist folder and select &lt;em&gt;Open&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Downloads&amp;gt;convertextract&amp;gt;dist&amp;gt;&lt;strong&gt;Convertextract&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Note: If you try to double click to open the app, you will get a security message. Right-clicking to open will allow you to override the security message.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&quot;using-the-app&quot;&gt;Using the app&lt;/h4&gt;

&lt;p&gt;This is what the app looks like when you open it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/g/gui-800-e3246b.png&quot; alt=&quot;convertextract GUI&quot; srcset=&quot;/assets/images/g/gui-400-e3246b.png 400w, /assets/images/g/gui-600-e3246b.png 600w, /assets/images/g/gui-800-e3246b.png 800w, /assets/images/g/gui-807-e3246b.png 807w&quot; /&gt;&lt;/p&gt;

&lt;p&gt;All you have to do is add your language data, choose the encoding (usually ‘utf-8’ should suffice), and pick your g2p mapping!
The output will be exported as a copy of the input file + &lt;em&gt;_converted.ext&lt;/em&gt; in the filename.&lt;/p&gt;

&lt;h5 id=&quot;example-case&quot;&gt;Example case&lt;/h5&gt;

&lt;p&gt;When typing, there is more than one way to write &lt;strong&gt;k̓&lt;/strong&gt; in the Kwak̓wala language. Convertextract takes all of these possibilities and generates &lt;em&gt;one&lt;/em&gt; output for the sake of consistency.&lt;/p&gt;

&lt;p&gt;I used the following inputs for &lt;em&gt;Convertextract&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Encoding: &lt;code class=&quot;highlighter-rouge&quot;&gt;utf-8&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Input_language: &lt;code class=&quot;highlighter-rouge&quot;&gt;kwk-umista &lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Output_language: &lt;code class=&quot;highlighter-rouge&quot;&gt;kwk-umista-con&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Performing ‘&lt;em&gt;quality control&lt;/em&gt;’&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;Input language&lt;/th&gt;
      &lt;th&gt;Output language&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Language code&lt;/td&gt;
      &lt;td&gt;kwk-umista&lt;/td&gt;
      &lt;td&gt;kwk-umista-con&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Sample text&lt;/td&gt;
      &lt;td&gt;&lt;em&gt;kwak’wala&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;&lt;em&gt;kwak̓wala&lt;/em&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;&lt;em&gt;kwak]wala&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;&lt;em&gt;kwak̓wala&lt;/em&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;If you need help setting up the app or have any questions at all, please feel free to comment below or send me an email!&lt;/p&gt;

</description>
        <pubDate>Thu, 13 Aug 2020 00:00:00 +0000</pubDate>
        <link>https://blog.mothertongues.org/convertextract-app/</link>
        <guid isPermaLink="true">https://blog.mothertongues.org/convertextract-app/</guid>
        
        <category>basic</category>
        
        
        <category>Tutorial</category>
        
        <category>Blog</category>
        
      </item>
    
      <item>
        <title>Why I made yet another Cree syllabics converter</title>
        <description>&lt;p&gt;The Western Cree languages—&lt;strong&gt;Plains Cree&lt;/strong&gt;, &lt;strong&gt;Woods Cree&lt;/strong&gt;, and &lt;strong&gt;Swampy Cree&lt;/strong&gt;—are written using two systems: one with letters borrowed from the
English alphabet, in a system known as the &lt;strong&gt;standard Roman orthography&lt;/strong&gt; (&lt;strong&gt;SRO&lt;/strong&gt;), and &lt;strong&gt;ᓀᐦᐃᔭᐏ ᒐᐦᑭᐯᐦᐃᑲᓇ&lt;/strong&gt; (Cree syllabics). SRO is relatively easy to type on a modern computer, but syllabics are more difficult, because of the lack of a well-established syllabics input layout. It’s easier to just use a &lt;strong&gt;converter&lt;/strong&gt; which, given Cree text in SRO, produces Cree text in syllabics. In this post, I describe my criticisms of the converters that existed prior to July 2018, and introduce &lt;a href=&quot;https://syllabics.app/&quot;&gt;syllabics.app&lt;/a&gt;—a syllabics converter that I developed in reaction to the former converters.&lt;/p&gt;

&lt;h2 id=&quot;what-you-need-to-know-to-understand-this-post&quot;&gt;What you need to know to understand this post&lt;/h2&gt;

&lt;p&gt;For the latter part of this blog post, where I discuss using the
converter in your own project, I assume you know how to use:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/cree-sro-syllabics&quot;&gt;npm&lt;/a&gt; for installing JavaScript packages; or&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://packaging.python.org/tutorials/installing-packages/#use-pip-for-installing&quot;&gt;pip&lt;/a&gt; for installing Python packages&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you don’t care about embedding my converter in your coding project,
then there’s no prior technical knowledge needed!&lt;/p&gt;

&lt;h2 id=&quot;what-are-the-freely-available-transliterators&quot;&gt;What are the freely available transliterators?&lt;/h2&gt;

&lt;p&gt;A quick Google search will net you at least the following SRO to syllabics transliterators.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.creedictionary.com/converter/maskwacis.php&quot;&gt;The Maskwacîs Plains Cree Syllabic Converter&lt;/a&gt;&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://syllabics.atlas-ling.ca/&quot;&gt;The Algonquian Linguistic Atlas Cree Syllabics Converter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.syllabics.net/convert/plainscree&quot;&gt;Syllabics.net’s Plains Cree Syllabics Converter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, none of these transliterators are perfect.&lt;/p&gt;

&lt;h2 id=&quot;the-issues&quot;&gt;The issues&lt;/h2&gt;

&lt;h3 id=&quot;word-final-hk&quot;&gt;Word final “hk”&lt;/h3&gt;

&lt;p&gt;In syllabics, a word that ends with an “hk”—or «ᐠ» in syllabics—are
supposed end with «ᕽ» instead. However, this replacement can never occur in the middle of a word.&lt;/p&gt;

&lt;p&gt;For example, the word “ê-wêpâpîhkêwêpinamâhk” (&lt;em&gt;we (and not you) are setting it swinging&lt;/em&gt;), contains both a final “hk” and a “hk” cluster in the middle of the word. Its syllabic transcription is &lt;strong&gt;ᐁᐍᐹᐲᐦᑫᐍᐱᐊᒫᕽ&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://syllabics.atlas-ling.ca/&quot;&gt;The Algonquian Linguistic Atlas’s converter&lt;/a&gt; and &lt;a href=&quot;http://www.syllabics.net/convert/plainscree&quot;&gt;syllabics.net’s converter&lt;/a&gt; both handle the conversion of “hk” to «ᐠ», without erroneously converting the sequence in the middle of a word. Notably, the community of &lt;strong&gt;Maskwacîs&lt;/strong&gt; does not follow this convention. Therefore, the &lt;a href=&quot;http://www.creedictionary.com/converter/maskwacis.php&quot;&gt;Maskwacîs Converter&lt;/a&gt; produces &lt;strong&gt;ᐁ ᐁᐧᐸᐱᐦᑫᐁᐧᐱᓇᒪᐦᐠ&lt;/strong&gt;, unlike what is expected in other Cree communities.&lt;/p&gt;

&lt;h3 id=&quot;transliterating-non-cree-words&quot;&gt;Transliterating non-Cree words&lt;/h3&gt;

&lt;p&gt;Some transliterators attempt to convert every Latin character, even if it doesn’t make sense. Take the case of “Maskêkosihk Trail”—a road that goes from Edmonton to &lt;a href=&quot;http://enochnation.ca/&quot;&gt;Enoch Cree Nation&lt;/a&gt;. The City of Edmonton unveiled the street sign, and, in the process, they unveiled an embarrassment:&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;/assets/images/g/why-cree-syllabics--mayor-and-okimaw-780-7a1851.jpg&quot; srcset=&quot;/assets/images/g/why-cree-syllabics--mayor-and-okimaw-400-7a1851.jpg 400w, /assets/images/g/why-cree-syllabics--mayor-and-okimaw-600-7a1851.jpg 600w, /assets/images/g/why-cree-syllabics--mayor-and-okimaw-780-7a1851.jpg 780w&quot; /&gt;

  &lt;figcaption&gt;
    “Maskêkosihk trail” erroneously converted as «ᒪᐢᑫᑯᓯᐦᐠ ᐟrᐊᐃl»
    &lt;cite&gt; Image source: &lt;a href=&quot;https://www.cbc.ca/news/canada/edmonton/renamed-maskekosihk-trail-part-of-city-s-ongoing-reconciliation-commitment-1.3446162&quot;&gt;CBC&lt;/a&gt;
    &lt;/cite&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Not only does the syllabics transliteration of the sign contain the “hk”
cluster as mentioned above,&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; but it half-transliterates &lt;em&gt;the English word&lt;/em&gt; “trail” into syllabics. The result is that “trail” is rendered as «ᐟrᐊᐃl», which &lt;em&gt;contains Latin characters in the transliteration!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In my opinion, an SRO to syllabics transliterator should refuse to transliterate words that do not have the structure of a Cree word. However, all three of the mentioned transliterators do attempt to transliterate “trail” with differing results:&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Maskwacîs Cree Dictionary&lt;/td&gt;
      &lt;td&gt;ᐟrᐊᐃl&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Algonquian Linguistic Atlas&lt;/td&gt;
      &lt;td&gt;ᐟᕒᐊᐃᐪ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Syllabics.net&lt;/td&gt;
      &lt;td&gt;ᐟᕒᐊᐃᓬ&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;long-vowels&quot;&gt;Long vowels&lt;/h3&gt;

&lt;p&gt;Long vowels (êîôâ) are distinct from short vowels (ioa) in Cree. Long vowels are written with a dot above in syllabics. The exception is for “ê” because it is always long; as a result, some writers also drop the diacritic when writing “e” in SRO as well. It’s important to differentiate between long and short vowels, because it makes distinctions between words. For example, nipiy/ᓂᐱᕀ means “water” while nîpiy/ᓃᐱᕀ means “leaf”. However, there is such a thing as “plain” script, where the vowel dots are omitted, and &lt;a href=&quot;https://en.wikipedia.org/wiki/Canadian_Aboriginal_syllabics#Pointing&quot;&gt;pointed&lt;/a&gt; script where the vowels have all dots.&lt;/p&gt;

&lt;p&gt;Another complication is that the “standard” Roman orthography in practice has multiple conventions for writing long vowels: using a macron (◌̄) and using a circumflex (◌̂).&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;How do the various converters handle long vowel diacritics? &lt;a href=&quot;http://www.creedictionary.com/converter/maskwacis.php&quot;&gt;The Maskwacîs converter&lt;/a&gt; does not produce dots for long vowels at all, however it accepts both macrons and circumflexes as input. The &lt;a href=&quot;https://syllabics.atlas-ling.ca/&quot;&gt;Algonquian Lingustic Atlas’s converter&lt;/a&gt; not only produces dots, but supports input in either macrons or circumflexes. The &lt;a href=&quot;http://www.syllabics.net/convert/plainscree&quot;&gt;syllabics.net converter&lt;/a&gt; does worst of all, handling &lt;em&gt;only&lt;/em&gt; macrons for long vowels. It simply spits out characters written with circumflexes. Additionally, it does not handle “ê” without an diacritics, which all other converters do.&lt;/p&gt;

&lt;h3 id=&quot;other-odds-and-ends&quot;&gt;Other odds and ends&lt;/h3&gt;

&lt;p&gt;Other issues for syllabics converters include how they deal with dashes, how they deal with combining diacritics, rather than pre-composed characters, and whether they produce the correct Unicode characters for the syllabics rather than very convincing look-alikes. There’s also the &lt;a href=&quot;https://crk-orthography.readthedocs.io/en/stable/glossary.html#term-sandhi&quot;&gt;sandhi orthographic rule&lt;/a&gt;, but honestly, I’m not sure I fully comprehend how to apply this rule myself.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;Here’s a breakdown of the previous issues, and whether each transliterator can handle it correctly.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt; &lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Word-final “hk”&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Non-Cree words&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Long vowels&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Maskwacîs Cree Dictionary&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;*&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;❌&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;❌&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Algonquian Linguistic Atlas&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;✅&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;❌&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;✅&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Syllabics.net&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;✅&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;❌&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;❌&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;wheres-the-source-code&quot;&gt;Where’s the source code?&lt;/h2&gt;

&lt;p&gt;The most pressing issue to me personally is that I cannot find &lt;strong&gt;source code&lt;/strong&gt; for any of these converters! This means that if other people want to incorporate a converter into their own app without an active internet connection, &lt;strong&gt;they can’t&lt;/strong&gt;. They have to either reverse-engineer the converters online, or write their own code to do the conversion.&lt;/p&gt;

&lt;h2 id=&quot;cree-sro-syllabics-an-open-source-python-and-javascript-library-for-syllabics-conversion&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cree-sro-syllabics&lt;/code&gt;: an open-source Python and JavaScript library for syllabics conversion&lt;/h2&gt;

&lt;p&gt;My solution was to create a code library that is &lt;strong&gt;free and open source&lt;/strong&gt;. It is available both for &lt;a href=&quot;https://pypi.org/project/cree-sro-syllabics/&quot;&gt;Python&lt;/a&gt; and &lt;a href=&quot;https://www.npmjs.com/package/cree-sro-syllabics&quot;&gt;JavaScript&lt;/a&gt;, and you can try it out right now!&lt;/p&gt;

&lt;p&gt;It handles all the issues previously mentioned. Try it with the following test cases:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://syllabics.app/#!sro:Maskekosihk%20trail&quot;&gt;Maskekosihk trail&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://syllabics.app/#!sro:êwêpâpîhkêwêpinamahk&quot;&gt;êwêpâpîhkêwêpinamahk&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://syllabics.app/#!sro:ēwēpâpīhkēwēpinamahk&quot;&gt;ēwēpâpīhkēwēpinamahk&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://syllabics.app/#!sro:ewepapihkewepinamahk&quot;&gt;ewepapihkewepinamahk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The source code for &lt;code class=&quot;highlighter-rouge&quot;&gt;cree-sro-syllabics&lt;/code&gt; can be found on their respective GitHub repositories:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/eddieantonio/cree-sro-syllabics&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cree-sro-syllabics&lt;/code&gt; for Python&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/eddieantonio/cree-sro-syllabics.js&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cree-sro-syllabics&lt;/code&gt; for JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But it can also be seamlessly incorporated into a Python project that uses &lt;code class=&quot;highlighter-rouge&quot;&gt;pip&lt;/code&gt; by installing it with:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install cree-sro-syllabics
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Or, you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt; to install &lt;code class=&quot;highlighter-rouge&quot;&gt;cree-sro-syllabics&lt;/code&gt; in your JavaScript project:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install cree-sro-syllabics --save
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Or you can &lt;a href=&quot;https://raw.githubusercontent.com/eddieantonio/cree-sro-syllabics.js/master/cree-sro-syllabics.js&quot;&gt;copy-paste the &lt;code class=&quot;highlighter-rouge&quot;&gt;.js&lt;/code&gt; file&lt;/a&gt; to your project.&lt;/p&gt;

&lt;h2 id=&quot;use-cases&quot;&gt;Use cases&lt;/h2&gt;

&lt;p&gt;Most folks will just use &lt;a href=&quot;https://syllabics.app/&quot;&gt;syllabics.app&lt;/a&gt; to convert a few words or
sentences of Cree.&lt;/p&gt;

&lt;p&gt;However, software developers can embed the converter in clever ways in their application. For example, I’ve used the converter in &lt;a href=&quot;https://itwewina.dev/&quot;&gt;itwêwina — the Plains Cree dictionary&lt;/a&gt;. Although the underlying dictionary content is written entirely in SRO, we can present all Cree text in syllabics. In addition, we support searches in syllabics by using &lt;code class=&quot;highlighter-rouge&quot;&gt;cree-sro-syllabics&lt;/code&gt; to convert the search string to SRO first, then search our dictionary content.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How can &lt;em&gt;you&lt;/em&gt; use &lt;code class=&quot;highlighter-rouge&quot;&gt;cree-sro-syllabics&lt;/code&gt;?&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This blog post has been adapted from a &lt;a href=&quot;https://eddieantonio.ca/blog/2018/07/30/why-i-made-yet-another-cree-syllabics-converter/&quot;&gt;post on Eddie’s blog&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;This is the same converter bundled in the &lt;a href=&quot;http://www.creedictionary.com/software/index.php&quot;&gt;Cree Dictionary app&lt;/a&gt;. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;
      &lt;p&gt;This may not be a mistake; they &lt;em&gt;could&lt;/em&gt; be using Maskwacîs’s conventions, but I’m really not sure. &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;I strongly suspect the sign designer used the Maskwacîs transliterator to get this result. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;Anecdotally, I find that most writers near Edmonton and Maskwacîs prefer circumflexes to macrons; however noted Algonquian linguist Arok Wolvengrey prefers macrons. Heck, Jean Okimāsis writes her surname with a macron! &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 07 Aug 2020 00:00:00 +0000</pubDate>
        <link>https://blog.mothertongues.org/why-a-new-cree-syllabics-converter/</link>
        <guid isPermaLink="true">https://blog.mothertongues.org/why-a-new-cree-syllabics-converter/</guid>
        
        <category>basic</category>
        
        
        <category>Blog</category>
        
      </item>
    
  </channel>
</rss>
