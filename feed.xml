<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mother Tongues Blog</title>
    <description>Smashing the lore of language technology!</description>
    <link>https://blog.mothertongues.org/</link>
    <atom:link href="https://blog.mothertongues.org/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 16 Sep 2020 22:12:11 +0000</pubDate>
    <lastBuildDate>Wed, 16 Sep 2020 22:12:11 +0000</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>Tutorial: Choosing the right fonts to show Cree syllabics on your website</title>
        <description>&lt;p&gt;&lt;abbr title=&quot;too long; didn't read&quot;&gt;&lt;strong&gt;tl;dr&lt;/strong&gt;&lt;/abbr&gt;: Use this
&lt;code class=&quot;highlighter-rouge&quot;&gt;font-family&lt;/code&gt; CSS declaration to successfully display Western Cree syllabics
for most visitors to your website:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;Gadugi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;Euphemia&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Euphemia UCAS'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Aboriginal Sans'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Noto Sans Canadian Aboriginal'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;sans-serif&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Include the following line to your website‚Äôs &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;head&amp;gt;&lt;/code&gt; to automatically download
a syllabics font if no appropriate fonts are installed on your
smartphone/computer/device:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;//fonts.googleapis.com/earlyaccess/notosanscanadianaboriginal.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Read the rest of this article to learn more about choosing syllabics
fonts for the web!&lt;/p&gt;

&lt;h2 id=&quot;what-you-need-to-know-to-understand-this-post&quot;&gt;What you need to know to understand this post&lt;/h2&gt;

&lt;p&gt;You will need to know how to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How to edit your website‚Äôs &lt;abbr title=&quot;Cascading Stylesheets&quot;&gt;&lt;a href=&quot;https://www.w3schools.com/css/css_howto.asp#:~:text=With%20an%20external%20style%20sheet,%20you%20can%20change%20the%20look%20of%20an%20entire%20website%20by%20changing%20just%20one%20file!&quot;&gt;CSS&lt;/a&gt;&lt;/abbr&gt;&lt;/li&gt;
  &lt;li&gt;How to add a &lt;a href=&quot;https://www.w3schools.com/tags/tag_link.asp&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;link&amp;gt;&lt;/code&gt;&lt;/a&gt; element to your HTML‚Äôs &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;head&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you‚Äôve ever added a custom font from &lt;a href=&quot;https://fonts.google.com/&quot;&gt;Google Fonts&lt;/a&gt; to your
website, you know enough to follow this post!&lt;/p&gt;

&lt;p&gt;It‚Äôs also helpful to know the &lt;a href=&quot;https://about.easil.com/support/serif-vs-sans-serif/&quot;&gt;difference between serif and sans-serif
fonts&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;lets-get-started&quot;&gt;Let‚Äôs get started!&lt;/h2&gt;

&lt;p&gt;Have you ever wanted to display &lt;strong&gt;Cree syllabics&lt;/strong&gt; on your website, but
when you tried, all you got were these blank boxes, colloquially called
&lt;em&gt;&lt;a href=&quot;https://english.stackexchange.com/a/331483&quot;&gt;tofu&lt;/a&gt;&lt;/em&gt;?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;‚ñ°‚ñ°‚ñ° ‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°! ‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ° ‚ñ°‚ñ°‚ñ°‚ñ°‚ñ° ¬´‚ñ°‚ÄØ‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°¬ª‚ñ°&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tofu no longer! Let‚Äôs discuss the various syllabics fonts that exist out
there, where they are commonly found, and let‚Äôs create a &lt;strong&gt;font stack&lt;/strong&gt;:
a list of fonts that your web browser tries in order such that it finds
a font that displays syllabics correctly.&lt;/p&gt;

&lt;aside&gt;
  &lt;strong&gt;Note&lt;/strong&gt;: I am most familiar with &lt;strong&gt;Western Cree
  Syllabics&lt;/strong&gt; (Y-dialect, Th-dialect, N-dialect).
  However most of these fonts &lt;em&gt;might&lt;/em&gt; work for other languages.
  Note that some fonts in this post do not contain &lt;em&gt;all&lt;/em&gt;
  syllabics characters for all languages that use syllabics, and there's
  even some incorrect characters in one font! üò± So even though this is
  the stack I guarantee to work for Western Cree, for other languages,
  your mileage may vary.
&lt;/aside&gt;

&lt;h2 id=&quot;common-syllabics-fonts&quot;&gt;Common syllabics fonts&lt;/h2&gt;

&lt;p&gt;I will discuss the following fonts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Aboriginal Sans&lt;/strong&gt; and &lt;strong&gt;Aboriginal Serif&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Euphemia&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Gadugi&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Noto Sans Canadian Aboriginal&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://www.eastcree.org/cree/en/resources/how-to/cree-fonts/&quot;&gt;There are many more syllabics fonts out there&lt;/a&gt;, but in this post, I want
to focus on just enough for you to make syllabics work on websites.&lt;/p&gt;

&lt;p&gt;I made an &lt;strong&gt;interactive demonstration&lt;/strong&gt; of these fonts that you can play
with. Go ahead and type any text in Western Cree into the box and it
will be converted to syllabics and displayed in the appropriate font, if
it‚Äôs available on your system:&lt;/p&gt;

&lt;p class=&quot;codepen&quot; data-height=&quot;500&quot; data-theme-id=&quot;light&quot; data-default-tab=&quot;result&quot; data-user=&quot;eddieantonio&quot; data-slug-hash=&quot;GRZOBYY&quot; style=&quot;height: 500px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; data-pen-title=&quot;Syllabics font playground&quot;&gt;
  &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/eddieantonio/pen/GRZOBYY&quot;&gt;
  Syllabics font playground&lt;/a&gt; by Eddie Antonio Santos (&lt;a href=&quot;https://codepen.io/eddieantonio&quot;&gt;@eddieantonio&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;But &lt;strong&gt;where&lt;/strong&gt; do these fonts come from? Where should you &lt;strong&gt;expect these fonts to be
available&lt;/strong&gt;?&lt;/p&gt;

&lt;h3 id=&quot;aboriginal-sans-and-aboriginal-serif&quot;&gt;Aboriginal Sans and Aboriginal Serif&lt;/h3&gt;

&lt;p&gt;As the names suggest, they have both serif and sans-serif variants for
writing in Latin script (e.g., English, French, etc.).&lt;/p&gt;

&lt;h4 id=&quot;who-created-these-fonts&quot;&gt;Who created these fonts?&lt;/h4&gt;

&lt;p&gt;These fonts were created by the Language Geek himself, &lt;a href=&quot;http://www.languagegeek.com/&quot;&gt;Chris Harvey&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;where-are-these-fonts-pre-installed&quot;&gt;Where are these fonts pre-installed?&lt;/h4&gt;

&lt;p&gt;As far as I know, no system has Aboriginal Sans or Aboriginal Serif
pre-installed, so you have to &lt;a href=&quot;http://www.languagegeek.com/font/fontdownload.html&quot;&gt;download them yourself from his
website&lt;/a&gt;. Sometimes, they are bundled with certain
&lt;a href=&quot;https://keyman.com/&quot;&gt;Keyman&lt;/a&gt; keyboard layouts.&lt;/p&gt;

&lt;p&gt;If you‚Äôve tried getting syllabics to work on your computer, chances are,
you‚Äôve downloaded either of these fonts!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.languagegeek.com/font/fontdownload.html&quot;&gt;Languagegeek.com&lt;/a&gt; has many other fonts that
display syllabics.&lt;/p&gt;

&lt;h3 id=&quot;gadugi&quot;&gt;Gadugi&lt;/h3&gt;

&lt;p&gt;This is a modern font that displays both syllabics and Cherokee.
‚ÄúGadugi‚Äù is a Cherokee word that means ‚Äú&lt;a href=&quot;https://archive.org/details/cherokeeenglishd0000feel/page/92/mode/2up?q=gadugi&quot;&gt;cooperative
labour&lt;/a&gt;‚Äù.&lt;/p&gt;

&lt;h4 id=&quot;who-created-this-font&quot;&gt;Who created this font?&lt;/h4&gt;

&lt;p&gt;I believe Microsoft commissioned this font.&lt;/p&gt;

&lt;h4 id=&quot;where-is-this-font-pre-installed&quot;&gt;Where is this font pre-installed?&lt;/h4&gt;

&lt;p&gt;Gadugi has been included in &lt;a href=&quot;https://docs.microsoft.com/en-us/typography/font-list/gadugi#products-that-supply-this-font&quot;&gt;&lt;strong&gt;all versions of Windows since Windows
8&lt;/strong&gt;&lt;/a&gt;. &lt;a href=&quot;https://support.microsoft.com/en-us/office/cloud-fonts-in-office-f7b009fe-037f-45ed-a556-b5fe6ede6adb?ui=en-us&amp;amp;rs=en-us&amp;amp;ad=us#text:~:text=gadugi.ttf&quot;&gt;It‚Äôs also available as a ‚ÄúCloud
font‚Äù&lt;/a&gt; on Microsoft Office products.&lt;/p&gt;

&lt;h3 id=&quot;euphemia&quot;&gt;Euphemia&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Euphemia&lt;/strong&gt; or &lt;strong&gt;Euphemia UCAS&lt;/strong&gt;&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; is a sleek font for syllabics. It also
includes glyphs for Latin (e.g., English/French) characters.&lt;/p&gt;

&lt;h4 id=&quot;who-created-this-font-1&quot;&gt;Who created this font?&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://www.tiro.com/syllabics/resources/index.html&quot;&gt;Tiro Typeworks created Euphemia&lt;/a&gt;. Ross Mills from Tiro has also
created the &lt;a href=&quot;https://www.pauktuutit.ca/library/&quot;&gt;Pigiarniq&lt;/a&gt; for Inuktitut, but I will not cover that font
in this blog post.&lt;/p&gt;

&lt;h4 id=&quot;where-is-this-font-pre-installed-1&quot;&gt;Where is this font pre-installed?&lt;/h4&gt;

&lt;p&gt;Euphemia is distributed on &lt;a href=&quot;https://docs.microsoft.com/en-us/typography/font-list/euphemia#products-that-supply-this-font&quot;&gt;&lt;strong&gt;Windows Vista and newer&lt;/strong&gt;&lt;/a&gt;.
It is currently distributed as &lt;strong&gt;Euphemia UCAS&lt;/strong&gt; on Apple systems
(&lt;strong&gt;macOS&lt;/strong&gt;/&lt;strong&gt;iOS&lt;/strong&gt;).&lt;/p&gt;

&lt;h4 id=&quot;issues&quot;&gt;Issues&lt;/h4&gt;

&lt;p&gt;Unfortunately, for East Cree, this font will &lt;strong&gt;NOT&lt;/strong&gt; work, as it has the
&lt;a href=&quot;https://www.eastcree.org/cree/en/resources/how-to/cree-fonts/syllabic-font-orientation/&quot;&gt;incorrect orientation for the ·îì (&lt;em&gt;sho&lt;/em&gt;) and ·îï (&lt;em&gt;sha&lt;/em&gt;) syllabics&lt;/a&gt; üò±&lt;/p&gt;

&lt;p&gt;So I would recommend &lt;strong&gt;omitting it from the font stack for Eastern
Cree&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So if you can‚Äôt use Euphemia, which font should you use instead?&lt;/p&gt;

&lt;h3 id=&quot;noto-sans-canadian-aboriginal&quot;&gt;Noto Sans Canadian Aboriginal&lt;/h3&gt;

&lt;p&gt;Noto is Google‚Äôs project to &lt;a href=&quot;https://www.google.com/get/noto/&quot;&gt;eliminate tofu (‚ñ°) for all languages of the
world&lt;/a&gt;, hence &lt;em&gt;noto&lt;/em&gt; (‚Äú&lt;strong&gt;no&lt;/strong&gt; more &lt;strong&gt;to&lt;/strong&gt;fu‚Äù).&lt;/p&gt;

&lt;p&gt;As far as I‚Äôm aware, Google does not have a ‚ÄúNoto &lt;em&gt;Serif&lt;/em&gt; Canadian
Aboriginal‚Äù.&lt;/p&gt;

&lt;h4 id=&quot;who-created-this-font-2&quot;&gt;Who created this font?&lt;/h4&gt;

&lt;p&gt;As mentioned, &lt;a href=&quot;https://fonts.google.com/earlyaccess#Noto+Sans+Canadian+Aboriginal&quot;&gt;Google created Noto Sans&lt;/a&gt;!&lt;/p&gt;

&lt;h4 id=&quot;where-is-this-font-pre-installed-2&quot;&gt;Where is this font pre-installed?&lt;/h4&gt;

&lt;p&gt;Noto Sans Canadian Aboriginal can be found on Google products, such as
&lt;strong&gt;Android phones&lt;/strong&gt;, &lt;strong&gt;Android tablets&lt;/strong&gt;, and &lt;strong&gt;Chromebooks&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Importantly, Google allows website authors to &lt;strong&gt;&lt;a href=&quot;https://fonts.google.com/earlyaccess#Noto+Sans+Canadian+Aboriginal&quot;&gt;embed Noto on your
website&lt;/a&gt;&lt;/strong&gt;, just as you can embed other fonts via their &lt;a href=&quot;https://fonts.google.com/&quot;&gt;Google Fonts&lt;/a&gt;
service.&lt;/p&gt;

&lt;p&gt;Most modern web browsers will &lt;strong&gt;automatically download&lt;/strong&gt; Noto Sans if
you included it in your font stack and no appropriate font is found.&lt;/p&gt;

&lt;h2 id=&quot;how-to-get-the-right-fonts-to-appear-on-your-webpage&quot;&gt;How to get the right fonts to appear on your webpage&lt;/h2&gt;

&lt;p&gt;Now that we know about what fonts are out there, lets construct
a &lt;code class=&quot;highlighter-rouge&quot;&gt;font-family&lt;/code&gt; declaration that will support syllabics on as many
devices as possible.&lt;/p&gt;

&lt;p&gt;Recall that the &lt;code class=&quot;highlighter-rouge&quot;&gt;font-family&lt;/code&gt; declaration is a list of fonts that the
web browser &lt;strong&gt;will try in order&lt;/strong&gt;. The first font in the list that is
installed will be used.&lt;/p&gt;

&lt;p&gt;Let‚Äôs start with the &lt;strong&gt;fallbacks&lt;/strong&gt; first. Let‚Äôs say our users‚Äô device
does not have a font that supports syllabics installed on their
computer. Since Google allows &lt;strong&gt;Noto Sans Canadian Aboriginal&lt;/strong&gt; to be
automatically downloaded on your website when needed, let‚Äôs start with
this &lt;code class=&quot;highlighter-rouge&quot;&gt;font-family&lt;/code&gt; declaration:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Noto Sans Canadian Aboriginal'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sans-serif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To get your browser to download the appropriate fonts, add this to your
website‚Äôs &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;head&amp;gt;&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;//fonts.googleapis.com/earlyaccess/notosanscanadianaboriginal.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;add-support-for-aboriginal-sans&quot;&gt;Add support for Aboriginal Sans&lt;/h3&gt;

&lt;p&gt;Perhaps your reader has installed &lt;strong&gt;Aboriginal Sans&lt;/strong&gt; to their computer.
Update your &lt;code class=&quot;highlighter-rouge&quot;&gt;font-family&lt;/code&gt; declaration as follows:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Aboriginal Sans'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Noto Sans Canadian Aboriginal'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sans-serif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This way, the web browser will try using Aboriginal Sans if it‚Äôs
installed, and &lt;em&gt;then&lt;/em&gt; attempt to download Noto Sans.&lt;/p&gt;

&lt;h3 id=&quot;add-support-for-maciphoneipad-users&quot;&gt;Add support for Mac/iPhone/iPad users&lt;/h3&gt;

&lt;p&gt;(omit this step for &lt;a href=&quot;https://www.eastcree.org/cree/en/resources/how-to/cree-fonts/syllabic-font-orientation/&quot;&gt;East Cree&lt;/a&gt;!)&lt;/p&gt;

&lt;p&gt;Now let‚Äôs support users of Apple devices. Prepend &lt;strong&gt;Euphemia UCAS&lt;/strong&gt; to
the &lt;code class=&quot;highlighter-rouge&quot;&gt;font-family&lt;/code&gt; declaration:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Euphemia UCAS'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Aboriginal Sans'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Noto Sans Canadian Aboriginal'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sans-serif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;add-support-for-windows-users&quot;&gt;Add support for Windows Users&lt;/h3&gt;

&lt;p&gt;Recall that earlier versions of Windows include &lt;strong&gt;Euphemia&lt;/strong&gt;; later
versions support &lt;strong&gt;Gadugi&lt;/strong&gt;. Prepend the following rules to try using
Gadugi first.&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Gadugi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Euphemia&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Euphemia UCAS'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Aboriginal Sans'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Noto Sans Canadian Aboriginal'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sans-serif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;finally-specify-your-latin-fonts&quot;&gt;Finally, specify your Latin fonts&lt;/h3&gt;

&lt;p&gt;If you‚Äôre displaying Latin text (e.g., English, French, Cree SRO, etc.),
then this font goes &lt;strong&gt;first&lt;/strong&gt;. Recall that many of the syllabics fonts
contain glyphs for Latin characters, so we will have to list
our preferred Latin font &lt;strong&gt;first&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;For this example, say I want to use &lt;strong&gt;Open Sans&lt;/strong&gt; (which you can
embed from &lt;a href=&quot;https://fonts.google.com/&quot;&gt;Google Fonts&lt;/a&gt;). Prepend &lt;strong&gt;Open Sans&lt;/strong&gt; to the front of
the list:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Open Sans'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Gadugi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Euphemia&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Euphemia UCAS'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Aboriginal Sans'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Noto Sans Canadian Aboriginal'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sans-serif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You‚Äôre done! You‚Äôre ready to display syllabics on the web!&lt;/p&gt;

&lt;h2 id=&quot;finished&quot;&gt;Finished!&lt;/h2&gt;

&lt;p&gt;With these declarations, you should be able to display syllabics on your
website, and be reasonably confident that everybody can read it.&lt;/p&gt;

&lt;p&gt;Here‚Äôs a complete example that uses our syllabics font stack in
addition to a few fonts from Google Fonts to round things out:&lt;/p&gt;

&lt;p class=&quot;codepen&quot; data-height=&quot;265&quot; data-theme-id=&quot;light&quot; data-default-tab=&quot;css,result&quot; data-user=&quot;eddieantonio&quot; data-slug-hash=&quot;mdPqoxK&quot; style=&quot;height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; data-pen-title=&quot;Syllabics font stack complete example&quot;&gt;
  &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/eddieantonio/pen/mdPqoxK&quot;&gt;
  Syllabics font stack complete example&lt;/a&gt; by Eddie Antonio Santos (&lt;a href=&quot;https://codepen.io/eddieantonio&quot;&gt;@eddieantonio&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://static.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;UCAS, or ‚ÄúUnified Canadian Aboriginal Syllabics‚Äù, the name of &lt;a href=&quot;https://unicode.org/charts/PDF/U1400.pdf&quot;&gt;the Unicode block&lt;/a&gt; that this font covers.¬†&lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 03 Sep 2020 00:00:00 +0000</pubDate>
        <link>https://blog.mothertongues.org/tutorial-syllabics-fonts/</link>
        <guid isPermaLink="true">https://blog.mothertongues.org/tutorial-syllabics-fonts/</guid>
        
        <category>intermediate</category>
        
        <category>syllabics</category>
        
        <category>Cree</category>
        
        <category>fonts</category>
        
        <category>html</category>
        
        <category>css</category>
        
        
        <category>Tutorial</category>
        
      </item>
    
      <item>
        <title>How to use the new Convertextract application for 'quality control' of ELAN annotations</title>
        <description>&lt;h1 id=&quot;tldr&quot;&gt;TL;DR&lt;/h1&gt;

&lt;p&gt;Have you ever wanted to &lt;em&gt;NOT&lt;/em&gt; spend hours tediously checking that &lt;strong&gt;k + ‚Äò&lt;/strong&gt; is written as &lt;strong&gt;kÃì&lt;/strong&gt; and not &lt;strong&gt;k‚Äô&lt;/strong&gt;?
If you said &lt;strong&gt;YES!&lt;/strong&gt;, &lt;em&gt;Convertextract&lt;/em&gt; is the app for you. With minimal technical knowledge, you can now systemically make your &lt;a href=&quot;https://archive.mpi.nl/tla/elan&quot;&gt;ELAN&lt;/a&gt; annotations consistent.&lt;/p&gt;

&lt;h1 id=&quot;what-you-need-to-know-to-understand-this-post&quot;&gt;What you need to know to understand this post&lt;/h1&gt;

&lt;p&gt;I assume that you know some background about the &lt;a href=&quot;https://github.com/roedoejet/g2p&quot;&gt;g2p library&lt;/a&gt;.
For the purposes of using these tools, a library is a collection of code and documentation, but if you would like to dig deeper you can check out this &lt;a href=&quot;https://en.wikipedia.org/wiki/Library_(computing)&quot;&gt;Wikipedia article&lt;/a&gt; 
The g2p library uses existing and custom mappings (i.e. arbitrary input-&amp;gt;output conversions). For example, you might want &lt;strong&gt;k‚Äô&lt;/strong&gt; (input) to be converted to &lt;strong&gt;kÃì&lt;/strong&gt; (output). The Mapping is the roadmap for converting.
These conversions are &lt;strong&gt;arbitrary&lt;/strong&gt;, so depending on your use case you may need to create new mappings. Most of the existing mappings convert &lt;em&gt;Graphemes&lt;/em&gt; (a character in the writing system of a language) to &lt;em&gt;Phonemes&lt;/em&gt; (their equivalent sound in the language), hence the name ‚Äòg2p‚Äô. 
To see existing mappings click &lt;a href=&quot;https://g2p-studio.herokuapp.com&quot;&gt;here&lt;/a&gt;
To keep this post simple, I will not explain how to add new g2p mappings. The documentation for adding mappings is &lt;a href=&quot;https://github.com/roedoejet/g2p#writing-mapping-files&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;who-is-involved-with-this-project&quot;&gt;Who is involved with this project?&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;KwakÃìwala Corpus Collection group&lt;/p&gt;

    &lt;p&gt;Sara Child &lt;a href=&quot;mailto:saratlilinukw@gmail.com&quot;&gt;saratlilinukw@gmail.com&lt;/a&gt;
  Daisy Rosenblum &lt;a href=&quot;mailto:daisy.rosenblum@ubc.ca&quot;&gt;daisy.rosenblum@ubc.ca&lt;/a&gt;
  Caroline Running Wolf &lt;a href=&quot;mailto:caroline.oldcoyote@gmail.com&quot;&gt;caroline.oldcoyote@gmail.com&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;App developer: &lt;a href=&quot;https://aidanpine.ca&quot;&gt;Aidan Pine&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Support for adding mappings/parsers: &lt;a href=&quot;mailto:fineen.davis@gmail.com&quot;&gt;Fineen Davis&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;what-is-needed-to-replicate-the-content-in-the-post&quot;&gt;What is needed to replicate the content in the post?&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://g2p-studio.herokuapp.com&quot;&gt;g2p&lt;/a&gt; Mapping of the desired conversions&lt;/li&gt;
  &lt;li&gt;Language text to be converted&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/roedoejet/convertextract/&quot;&gt;Convertextract&lt;/a&gt; app (read the post for installation!)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;what-are-the-motivations-behind-this-technology&quot;&gt;What are the motivations behind this technology?&lt;/h1&gt;

&lt;p&gt;As a Student Intern on the NRC‚Äôs &lt;a href=&quot;https://nrc.canada.ca/en/research-development/research-collaboration/programs/canadian-indigenous-languages-technology-project&quot;&gt;Indigenous Language Technology (ILT) project&lt;/a&gt;, I was approached by the KwakÃìwala Corpus Collection group to help create a systemic way to streamline the quality control process for their ELAN annotation data. Having many different people with many different orthographic conventions (i.e. different ways of writing the same thing) all working on annotating KwakÃìwala language data had resulted in inconsistencies.&lt;/p&gt;

&lt;p&gt;For example, there was four ways that people were writing &lt;strong&gt;tÃìs&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;t‚Äôs&lt;/strong&gt;, &lt;strong&gt;tÃïs&lt;/strong&gt;, &lt;strong&gt;tsÃì&lt;/strong&gt;, &lt;strong&gt;ts‚Äô&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, I added mappings in the g2p library that took the alternative forms and &lt;em&gt;streamlined&lt;/em&gt; them therefore producing only one form in the output.Then I added support for ELAN files in the Convertextract library, so that the process became automated. Aidan Pine then turned Convertextract into an app!&lt;/p&gt;

&lt;h1 id=&quot;how-to-use-the-new-convertextract-app-for-quality-control-of-elan-annotations&quot;&gt;How to use the new Convertextract app for ‚Äòquality control‚Äô of ELAN annotations&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/roedoejet/convertextract&quot;&gt;Convertextract&lt;/a&gt;, created by Aidan Pine, is a &lt;code class=&quot;highlighter-rouge&quot;&gt;python&lt;/code&gt; library which extracts text data and finds/replaces specific text based on arbitrary correspondences. 
Until now, only basic &lt;a href=&quot;https://en.wikipedia.org/wiki/Command-line_interface&quot;&gt;CLI&lt;/a&gt; (Command Line Interface) was supported. Using Convertextract in the CLI allowed the user to convert a file based on pre-existing Mappings in the &lt;a href=&quot;https://github.com/roedoejet/g2p/tree/master/g2p/mappings/langs&quot;&gt;g2p library&lt;/a&gt; or based on a custom Mapping (not described here). However, the downside is that some programming knowledge is needed to use the CLI.
The latest update now includes a &lt;a href=&quot;https://en.wikipedia.org/wiki/Graphical_user_interface&quot;&gt;GUI&lt;/a&gt; (Graphical User Interface) in the form of an app (for Mac computers &lt;strong&gt;only&lt;/strong&gt;). The app makes Convertextract more accessible for non-programmers.&lt;/p&gt;

&lt;h3 id=&quot;1-g2p-mapping&quot;&gt;1. G2P mapping&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Convertextract&lt;/em&gt; will carry out the streamlining for you, but it has to know what to convert. The g2p Mapping is this roadmap. See the section &lt;em&gt;What you need to know to understand this post&lt;/em&gt; for more information on how to see if your language is supported.&lt;/p&gt;

&lt;h3 id=&quot;2-language-data&quot;&gt;2. Language data&lt;/h3&gt;

&lt;p&gt;You language data must be in one of the supported file formats. The most recent addition is &lt;code class=&quot;highlighter-rouge&quot;&gt;.eaf&lt;/code&gt; files, which allows ELAN annotations to be used!
For a full list of supported file types click &lt;a href=&quot;https://github.com/roedoejet/convertextract/tree/master/convertextract/parsers&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;3-convertextract-application&quot;&gt;3. Convertextract application&lt;/h3&gt;

&lt;h4 id=&quot;installation&quot;&gt;Installation&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt; The app works on &lt;strong&gt;Mac only!!!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To download the app: &lt;a href=&quot;https://github.com/roedoejet/convertextract/releases&quot;&gt;https://github.com/roedoejet/convertextract/releases&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In your downloads folder, find the .zip file and double click on it to unzip.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Downloads&amp;gt;&lt;strong&gt;convertextract&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Right-click on the application in the dist folder and select &lt;em&gt;Open&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Downloads&amp;gt;convertextract&amp;gt;dist&amp;gt;&lt;strong&gt;Convertextract&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Note: If you try to double click to open the app, you will get a security message. Right-clicking to open will allow you to override the security message.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&quot;using-the-app&quot;&gt;Using the app&lt;/h4&gt;

&lt;p&gt;This is what the app looks like when you open it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/g/gui-800-e3246b.png&quot; alt=&quot;convertextract GUI&quot; srcset=&quot;/assets/images/g/gui-400-e3246b.png 400w, /assets/images/g/gui-600-e3246b.png 600w, /assets/images/g/gui-800-e3246b.png 800w, /assets/images/g/gui-807-e3246b.png 807w&quot; /&gt;&lt;/p&gt;

&lt;p&gt;All you have to do is add your language data, choose the encoding (usually ‚Äòutf-8‚Äô should suffice), and pick your g2p mapping!
The output will be exported as a copy of the input file + &lt;em&gt;_converted.ext&lt;/em&gt; in the filename.&lt;/p&gt;

&lt;h5 id=&quot;example-case&quot;&gt;Example case&lt;/h5&gt;

&lt;p&gt;When typing, there is more than one way to write &lt;strong&gt;kÃì&lt;/strong&gt; in the KwakÃìwala language. Convertextract takes all of these possibilities and generates &lt;em&gt;one&lt;/em&gt; output for the sake of consistency.&lt;/p&gt;

&lt;p&gt;I used the following inputs for &lt;em&gt;Convertextract&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Encoding: &lt;code class=&quot;highlighter-rouge&quot;&gt;utf-8&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Input_language: &lt;code class=&quot;highlighter-rouge&quot;&gt;kwk-umista &lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Output_language: &lt;code class=&quot;highlighter-rouge&quot;&gt;kwk-umista-con&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Performing ‚Äò&lt;em&gt;quality control&lt;/em&gt;‚Äô&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;¬†&lt;/th&gt;
      &lt;th&gt;Input language&lt;/th&gt;
      &lt;th&gt;Output language&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Language code&lt;/td&gt;
      &lt;td&gt;kwk-umista&lt;/td&gt;
      &lt;td&gt;kwk-umista-con&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Sample text&lt;/td&gt;
      &lt;td&gt;&lt;em&gt;kwak‚Äôwala&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;&lt;em&gt;kwakÃìwala&lt;/em&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;¬†&lt;/td&gt;
      &lt;td&gt;&lt;em&gt;kwak]wala&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;&lt;em&gt;kwakÃìwala&lt;/em&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;If you need help setting up the app or have any questions at all, please feel free to comment below or send me an email!&lt;/p&gt;

</description>
        <pubDate>Thu, 13 Aug 2020 00:00:00 +0000</pubDate>
        <link>https://blog.mothertongues.org/convertextract-app/</link>
        <guid isPermaLink="true">https://blog.mothertongues.org/convertextract-app/</guid>
        
        <category>basic</category>
        
        
        <category>Tutorial</category>
        
        <category>Blog</category>
        
      </item>
    
      <item>
        <title>Why I made yet another Cree syllabics converter</title>
        <description>&lt;p&gt;The Western Cree languages‚Äî&lt;strong&gt;Plains Cree&lt;/strong&gt;, &lt;strong&gt;Woods Cree&lt;/strong&gt;, and &lt;strong&gt;Swampy Cree&lt;/strong&gt;‚Äîare written using two systems: one with letters borrowed from the
English alphabet, in a system known as the &lt;strong&gt;standard Roman orthography&lt;/strong&gt; (&lt;strong&gt;SRO&lt;/strong&gt;), and &lt;strong&gt;·ìÄ·ê¶·êÉ·î≠·êè‚ÄØ·íê·ê¶·ë≠·êØ·ê¶·êÉ·ë≤·ìá&lt;/strong&gt; (Cree syllabics). SRO is relatively easy to type on a modern computer, but syllabics are more difficult, because of the lack of a well-established syllabics input layout. It‚Äôs easier to just use a &lt;strong&gt;converter&lt;/strong&gt; which, given Cree text in SRO, produces Cree text in syllabics. In this post, I describe my criticisms of the converters that existed prior to July 2018, and introduce &lt;a href=&quot;https://syllabics.app/&quot;&gt;syllabics.app&lt;/a&gt;‚Äîa syllabics converter that I developed in reaction to the former converters.&lt;/p&gt;

&lt;h2 id=&quot;what-you-need-to-know-to-understand-this-post&quot;&gt;What you need to know to understand this post&lt;/h2&gt;

&lt;p&gt;For the latter part of this blog post, where I discuss using the
converter in your own project, I assume you know how to use:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/cree-sro-syllabics&quot;&gt;npm&lt;/a&gt; for installing JavaScript packages; or&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://packaging.python.org/tutorials/installing-packages/#use-pip-for-installing&quot;&gt;pip&lt;/a&gt; for installing Python packages&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you don‚Äôt care about embedding my converter in your coding project,
then there‚Äôs no prior technical knowledge needed!&lt;/p&gt;

&lt;h2 id=&quot;what-are-the-freely-available-transliterators&quot;&gt;What are the freely available transliterators?&lt;/h2&gt;

&lt;p&gt;A quick Google search will net you at least the following SRO to syllabics transliterators.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.creedictionary.com/converter/maskwacis.php&quot;&gt;The Maskwac√Æs Plains Cree Syllabic Converter&lt;/a&gt;&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://syllabics.atlas-ling.ca/&quot;&gt;The Algonquian Linguistic Atlas Cree Syllabics Converter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.syllabics.net/convert/plainscree&quot;&gt;Syllabics.net‚Äôs Plains Cree Syllabics Converter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, none of these transliterators are perfect.&lt;/p&gt;

&lt;h2 id=&quot;the-issues&quot;&gt;The issues&lt;/h2&gt;

&lt;h3 id=&quot;word-final-hk&quot;&gt;Word final ‚Äúhk‚Äù&lt;/h3&gt;

&lt;p&gt;In syllabics, a word that ends with an ‚Äúhk‚Äù‚Äîor ¬´·ê†¬ª in syllabics‚Äîare
supposed end with ¬´·ïΩ¬ª instead. However, this replacement can never occur in the middle of a word.&lt;/p&gt;

&lt;p&gt;For example, the word ‚Äú√™-w√™p√¢p√Æhk√™w√™pinam√¢hk‚Äù (&lt;em&gt;we (and not you) are setting it swinging&lt;/em&gt;), contains both a final ‚Äúhk‚Äù and a ‚Äúhk‚Äù cluster in the middle of the word. Its syllabic transcription is &lt;strong&gt;·êÅ·êç·êπ·ê≤·ê¶·ë´·êç·ê±·êä·í´·ïΩ&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://syllabics.atlas-ling.ca/&quot;&gt;The Algonquian Linguistic Atlas‚Äôs converter&lt;/a&gt; and &lt;a href=&quot;http://www.syllabics.net/convert/plainscree&quot;&gt;syllabics.net‚Äôs converter&lt;/a&gt; both handle the conversion of ‚Äúhk‚Äù to ¬´·ê†¬ª, without erroneously converting the sequence in the middle of a word. Notably, the community of &lt;strong&gt;Maskwac√Æs&lt;/strong&gt; does not follow this convention. Therefore, the &lt;a href=&quot;http://www.creedictionary.com/converter/maskwacis.php&quot;&gt;Maskwac√Æs Converter&lt;/a&gt; produces &lt;strong&gt;·êÅ ·êÅ·êß·ê∏·ê±·ê¶·ë´·êÅ·êß·ê±·ìá·í™·ê¶·ê†&lt;/strong&gt;, unlike what is expected in other Cree communities.&lt;/p&gt;

&lt;h3 id=&quot;transliterating-non-cree-words&quot;&gt;Transliterating non-Cree words&lt;/h3&gt;

&lt;p&gt;Some transliterators attempt to convert every Latin character, even if it doesn‚Äôt make sense. Take the case of ‚ÄúMask√™kosihk Trail‚Äù‚Äîa road that goes from Edmonton to &lt;a href=&quot;http://enochnation.ca/&quot;&gt;Enoch Cree Nation&lt;/a&gt;. The City of Edmonton unveiled the street sign, and, in the process, they unveiled an embarrassment:&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;/assets/images/g/why-cree-syllabics--mayor-and-okimaw-780-7a1851.jpg&quot; srcset=&quot;/assets/images/g/why-cree-syllabics--mayor-and-okimaw-400-7a1851.jpg 400w, /assets/images/g/why-cree-syllabics--mayor-and-okimaw-600-7a1851.jpg 600w, /assets/images/g/why-cree-syllabics--mayor-and-okimaw-780-7a1851.jpg 780w&quot; /&gt;

  &lt;figcaption&gt;
    ‚ÄúMask√™kosihk trail‚Äù erroneously converted as ¬´·í™·ê¢·ë´·ëØ·ìØ·ê¶·ê† ·êür·êä·êÉl¬ª
    &lt;cite&gt; Image source: &lt;a href=&quot;https://www.cbc.ca/news/canada/edmonton/renamed-maskekosihk-trail-part-of-city-s-ongoing-reconciliation-commitment-1.3446162&quot;&gt;CBC&lt;/a&gt;
    &lt;/cite&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Not only does the syllabics transliteration of the sign contain the ‚Äúhk‚Äù
cluster as mentioned above,&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; but it half-transliterates &lt;em&gt;the English word&lt;/em&gt; ‚Äútrail‚Äù into syllabics. The result is that ‚Äútrail‚Äù is rendered as ¬´·êür·êä·êÉl¬ª, which &lt;em&gt;contains Latin characters in the transliteration!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In my opinion, an SRO to syllabics transliterator should refuse to transliterate words that do not have the structure of a Cree word. However, all three of the mentioned transliterators do attempt to transliterate ‚Äútrail‚Äù with differing results:&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Maskwac√Æs Cree Dictionary&lt;/td&gt;
      &lt;td&gt;·êür·êä·êÉl&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Algonquian Linguistic Atlas&lt;/td&gt;
      &lt;td&gt;·êü·ïí·êä·êÉ·ê™&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Syllabics.net&lt;/td&gt;
      &lt;td&gt;·êü·ïí·êä·êÉ·ì¨&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;long-vowels&quot;&gt;Long vowels&lt;/h3&gt;

&lt;p&gt;Long vowels (√™√Æ√¥√¢) are distinct from short vowels (ioa) in Cree. Long vowels are written with a dot above in syllabics. The exception is for ‚Äú√™‚Äù because it is always long; as a result, some writers also drop the diacritic when writing ‚Äúe‚Äù in SRO as well. It‚Äôs important to differentiate between long and short vowels, because it makes distinctions between words. For example, nipiy/·ìÇ·ê±·ïÄ means ‚Äúwater‚Äù while n√Æpiy/·ìÉ·ê±·ïÄ means ‚Äúleaf‚Äù. However, there is such a thing as ‚Äúplain‚Äù script, where the vowel dots are omitted, and &lt;a href=&quot;https://en.wikipedia.org/wiki/Canadian_Aboriginal_syllabics#Pointing&quot;&gt;pointed&lt;/a&gt; script where the vowels have all dots.&lt;/p&gt;

&lt;p&gt;Another complication is that the ‚Äústandard‚Äù Roman orthography in practice has multiple conventions for writing long vowels: using a macron (‚óåÃÑ) and using a circumflex (‚óåÃÇ).&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;How do the various converters handle long vowel diacritics? &lt;a href=&quot;http://www.creedictionary.com/converter/maskwacis.php&quot;&gt;The Maskwac√Æs converter&lt;/a&gt; does not produce dots for long vowels at all, however it accepts both macrons and circumflexes as input. The &lt;a href=&quot;https://syllabics.atlas-ling.ca/&quot;&gt;Algonquian Lingustic Atlas‚Äôs converter&lt;/a&gt; not only produces dots, but supports input in either macrons or circumflexes. The &lt;a href=&quot;http://www.syllabics.net/convert/plainscree&quot;&gt;syllabics.net converter&lt;/a&gt; does worst of all, handling &lt;em&gt;only&lt;/em&gt; macrons for long vowels. It simply spits out characters written with circumflexes. Additionally, it does not handle ‚Äú√™‚Äù without an diacritics, which all other converters do.&lt;/p&gt;

&lt;h3 id=&quot;other-odds-and-ends&quot;&gt;Other odds and ends&lt;/h3&gt;

&lt;p&gt;Other issues for syllabics converters include how they deal with dashes, how they deal with combining diacritics, rather than pre-composed characters, and whether they produce the correct Unicode characters for the syllabics rather than very convincing look-alikes. There‚Äôs also the &lt;a href=&quot;https://crk-orthography.readthedocs.io/en/stable/glossary.html#term-sandhi&quot;&gt;sandhi orthographic rule&lt;/a&gt;, but honestly, I‚Äôm not sure I fully comprehend how to apply this rule myself.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;Here‚Äôs a breakdown of the previous issues, and whether each transliterator can handle it correctly.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;¬†&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Word-final ‚Äúhk‚Äù&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Non-Cree words&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Long vowels&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Maskwac√Æs Cree Dictionary&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;*&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;‚ùå&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;‚ùå&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Algonquian Linguistic Atlas&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;‚úÖ&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;‚ùå&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;‚úÖ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Syllabics.net&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;‚úÖ&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;‚ùå&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;‚ùå&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;wheres-the-source-code&quot;&gt;Where‚Äôs the source code?&lt;/h2&gt;

&lt;p&gt;The most pressing issue to me personally is that I cannot find &lt;strong&gt;source code&lt;/strong&gt; for any of these converters! This means that if other people want to incorporate a converter into their own app without an active internet connection, &lt;strong&gt;they can‚Äôt&lt;/strong&gt;. They have to either reverse-engineer the converters online, or write their own code to do the conversion.&lt;/p&gt;

&lt;h2 id=&quot;cree-sro-syllabics-an-open-source-python-and-javascript-library-for-syllabics-conversion&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cree-sro-syllabics&lt;/code&gt;: an open-source Python and JavaScript library for syllabics conversion&lt;/h2&gt;

&lt;p&gt;My solution was to create a code library that is &lt;strong&gt;free and open source&lt;/strong&gt;. It is available both for &lt;a href=&quot;https://pypi.org/project/cree-sro-syllabics/&quot;&gt;Python&lt;/a&gt; and &lt;a href=&quot;https://www.npmjs.com/package/cree-sro-syllabics&quot;&gt;JavaScript&lt;/a&gt;, and you can try it out right now!&lt;/p&gt;

&lt;p&gt;It handles all the issues previously mentioned. Try it with the following test cases:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://syllabics.app/#!sro:Maskekosihk%20trail&quot;&gt;Maskekosihk trail&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://syllabics.app/#!sro:√™w√™p√¢p√Æhk√™w√™pinamahk&quot;&gt;√™w√™p√¢p√Æhk√™w√™pinamahk&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://syllabics.app/#!sro:ƒìwƒìp√¢pƒ´hkƒìwƒìpinamahk&quot;&gt;ƒìwƒìp√¢pƒ´hkƒìwƒìpinamahk&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://syllabics.app/#!sro:ewepapihkewepinamahk&quot;&gt;ewepapihkewepinamahk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The source code for &lt;code class=&quot;highlighter-rouge&quot;&gt;cree-sro-syllabics&lt;/code&gt; can be found on their respective GitHub repositories:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/eddieantonio/cree-sro-syllabics&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cree-sro-syllabics&lt;/code&gt; for Python&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/eddieantonio/cree-sro-syllabics.js&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cree-sro-syllabics&lt;/code&gt; for JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But it can also be seamlessly incorporated into a Python project that uses &lt;code class=&quot;highlighter-rouge&quot;&gt;pip&lt;/code&gt; by installing it with:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install cree-sro-syllabics
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Or, you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt; to install &lt;code class=&quot;highlighter-rouge&quot;&gt;cree-sro-syllabics&lt;/code&gt; in your JavaScript project:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install cree-sro-syllabics --save
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Or you can &lt;a href=&quot;https://raw.githubusercontent.com/eddieantonio/cree-sro-syllabics.js/master/cree-sro-syllabics.js&quot;&gt;copy-paste the &lt;code class=&quot;highlighter-rouge&quot;&gt;.js&lt;/code&gt; file&lt;/a&gt; to your project.&lt;/p&gt;

&lt;h2 id=&quot;use-cases&quot;&gt;Use cases&lt;/h2&gt;

&lt;p&gt;Most folks will just use &lt;a href=&quot;https://syllabics.app/&quot;&gt;syllabics.app&lt;/a&gt; to convert a few words or
sentences of Cree.&lt;/p&gt;

&lt;p&gt;However, software developers can embed the converter in clever ways in their application. For example, I‚Äôve used the converter in &lt;a href=&quot;https://itwewina.dev/&quot;&gt;itw√™wina ‚Äî the Plains Cree dictionary&lt;/a&gt;. Although the underlying dictionary content is written entirely in SRO, we can present all Cree text in syllabics. In addition, we support searches in syllabics by using &lt;code class=&quot;highlighter-rouge&quot;&gt;cree-sro-syllabics&lt;/code&gt; to convert the search string to SRO first, then search our dictionary content.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How can &lt;em&gt;you&lt;/em&gt; use &lt;code class=&quot;highlighter-rouge&quot;&gt;cree-sro-syllabics&lt;/code&gt;?&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This blog post has been adapted from a &lt;a href=&quot;https://eddieantonio.ca/blog/2018/07/30/why-i-made-yet-another-cree-syllabics-converter/&quot;&gt;post on Eddie‚Äôs blog&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;This is the same converter bundled in the &lt;a href=&quot;http://www.creedictionary.com/software/index.php&quot;&gt;Cree Dictionary app&lt;/a&gt;.¬†&lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;
      &lt;p&gt;This may not be a mistake; they &lt;em&gt;could&lt;/em&gt; be using Maskwac√Æs‚Äôs conventions, but I‚Äôm really not sure.¬†&lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;I strongly suspect the sign designer used the Maskwac√Æs transliterator to get this result.¬†&lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;Anecdotally, I find that most writers near Edmonton and Maskwac√Æs prefer circumflexes to macrons; however noted Algonquian linguist Arok Wolvengrey prefers macrons. Heck, Jean OkimƒÅsis writes her surname with a macron!¬†&lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 07 Aug 2020 00:00:00 +0000</pubDate>
        <link>https://blog.mothertongues.org/why-a-new-cree-syllabics-converter/</link>
        <guid isPermaLink="true">https://blog.mothertongues.org/why-a-new-cree-syllabics-converter/</guid>
        
        <category>basic</category>
        
        
        <category>Blog</category>
        
      </item>
    
      <item>
        <title>Getting from 'a' to 'b' with g2p</title>
        <description>&lt;p&gt;This blog post describes the background context for a software tool called &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; which is shorthand for ‚ÄòGrapheme-to-Phoneme‚Äô, but if you don‚Äôt know those terms, don‚Äôt worry, this post will explain it. Essentially, &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; is a tool for systematically converting between two types of text. Common use cases include converting between a &lt;a href=&quot;#use-case-1-getting-the-pronunciation-from-a-words-spelling&quot;&gt;writing system and the phonetic alphabet&lt;/a&gt;, between two &lt;a href=&quot;#use-case-2-a-language-with-multiple-writing-systems&quot;&gt;writing systems for the same language&lt;/a&gt;, or between a legacy &lt;a href=&quot;#use-case-3-converting-from-legacy-writing-systems&quot;&gt;‚Äòfont-hacked‚Äô writing system and its current Unicode-supported version&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;what-you-need-to-know-to-understand-this-post&quot;&gt;What you need to know to understand this post&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;To understand the advanced section, you will need to know some &lt;a href=&quot;https://www.python.org/&quot;&gt;Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;who-is-involved-with-this-project&quot;&gt;Who is involved with this project?&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Maintainer (i.e. the person to bug with questions): &lt;a href=&quot;https://aidanpine.ca&quot;&gt;Aidan Pine&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Lots of &lt;a href=&quot;https://github.com/roedoejet/g2p/graphs/contributors&quot;&gt;other contributors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;what-are-the-motivations-behind-g2p&quot;&gt;What are the motivations behind G2P?&lt;/h1&gt;

&lt;p&gt;There are many reasons why you might want to systematically convert between different characters&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. Here are a few possible use cases:&lt;/p&gt;

&lt;h3 id=&quot;use-case-1-getting-the-pronunciation-from-a-words-spelling&quot;&gt;Use Case #1: Getting the pronunciation from a word‚Äôs spelling&lt;/h3&gt;

&lt;p&gt;Sometimes you want to convert between a language‚Äôs writing system (also known as &lt;em&gt;orthography&lt;/em&gt;) and its pronunciation. ‚ÄúLetters‚Äù in a writing system are usually referred to as ‚Äúgraphemes‚Äù and their corresponding meaningful sounds are referred to as ‚Äúphonemes‚Äù; hence ‚Äúg2p‚Äù or ‚Äúgrapheme-to-phoneme‚Äù.&lt;/p&gt;

&lt;p&gt;It gets a little more complicated than that though, because sometimes a grapheme is made of more than one character, as in ‚Äúth‚Äù which can be pronounced &lt;em&gt;&lt;a href=&quot;https://www.thoughtco.com/voiced-and-voiceless-consonants-1212092#:~:text=Voiceless%20consonants%20do%20not%20use,as%20in%20%22thing%22&quot;&gt;unvoiced&lt;/a&gt;.)&lt;/em&gt; as in ‚Äòthin‚Äô or &lt;em&gt;&lt;a href=&quot;https://www.thoughtco.com/voiced-and-voiceless-consonants-1212092#:~:text=Voiced%20Consonants,-Your%20vocal%20cords&amp;amp;text=As%20you%20pronounce%20a%20letter,W%2C%20Y%2C%20and%20Z.&quot;&gt;voiced&lt;/a&gt;&lt;/em&gt; as in ‚Äòthat‚Äô.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/International_Phonetic_Alphabet&quot;&gt;International Phonetic Alphabet&lt;/a&gt; is not so ambiguous, and writes the ‚Äòth‚Äô in ‚Äòthin‚Äô as &lt;strong&gt;Œ∏&lt;/strong&gt; and the ‚Äòth‚Äô in ‚Äòthat‚Äô as &lt;strong&gt;√∞&lt;/strong&gt;. Knowing how to convert between the written and spoken form of a language is useful in a variety of computational tasks, but I will describe the usefulness specifically with a project called ‚ÄúReadAlongs‚Äù &lt;a href=&quot;#readalongs&quot;&gt;below&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;use-case-2-a-language-with-multiple-writing-systems&quot;&gt;Use Case #2: A language with multiple writing systems&lt;/h3&gt;

&lt;p&gt;Some languages have two (or more!) different writing systems. Take Cree for example, where you can either write a word in &lt;em&gt;Standard Roman Orthography&lt;/em&gt; like ‚Äú√™-w√™p√¢p√Æhk√™w√™pinam√¢hk‚Äù or in &lt;em&gt;Syllabics&lt;/em&gt; like &lt;strong&gt;·êÅ·êç·êπ·ê≤·ê¶·ë´·êç·ê±·êä·í´·ïΩ&lt;/strong&gt;. My colleague &lt;a href=&quot;https://eddieantonio.ca&quot;&gt;Eddie&lt;/a&gt; has a great blog post about a tool he created to convert between the two &lt;a href=&quot;https://blog.mothertongues.org/why-a-new-cree-syllabics-converter&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;use-case-3-converting-from-legacy-writing-systems&quot;&gt;Use Case #3: Converting from legacy writing systems&lt;/h3&gt;

&lt;p&gt;Some languages historically used ‚Äòfont hacks‚Äô to render the characters in their writing system before they were supported standardly on computers. There‚Äôs a longer discussion to be had here, but the coles‚Äô notes version is that when computers were gaining popularity, they weren‚Äôt typically able to &lt;em&gt;render&lt;/em&gt; (ie display) characters outside of the 128 characters supported by the &lt;a href=&quot;https://en.wikipedia.org/wiki/ASCII&quot;&gt;American Standard Code for Information Interchange (ASCII)&lt;/a&gt;. To get around this, language communities would come up with their own custom fonts (often referred to as ‚Äòfont hacks‚Äô or ‚Äòfont encodings‚Äô) where they would render characters like ‚Äò¬©‚Äô which existed in ASCII as ‚ÄògÃå‚Äô instead (example taken from the Heiltsuk Doulos font). For more information on this topic, please check out &lt;a href=&quot;http://aidanpine.ca/static/cv/pdfs/Pine-Turin-Convertextract-2018.pdf&quot;&gt;‚ÄòSeeing the Heiltsuk Orthography from Font Encoding through to Unicode‚Äô&lt;/a&gt; or &lt;a href=&quot;https://markturin.sites.olt.ubc.ca/files/2020/06/Schillo_Turin_typeface_2020.pdf&quot;&gt;‚ÄòApplications and innovations in typeface design for North American Indigenous languages‚Äô&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;how-to-get-from-a-to-b-or-a-to-√¶-with-g2p&quot;&gt;How to get from ‚Äòa‚Äô to ‚Äòb‚Äô (or ‚Äòa‚Äô to ‚Äò√¶‚Äô) with g2p&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; is a Python library&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; that helps you convert between different characters based on user-defined rules. The inspiration for how to write these rules was mostly taken from the notion of &lt;a href=&quot;https://en.wikipedia.org/wiki/Phonological_rule&quot;&gt;phonological rewrite rules&lt;/a&gt;, which is a common way of describing ‚Äòmulti-level‚Äô phonological changes in linguistics. What is meant by that is the idea that a word, like ‚Äòcats‚Äô or ‚Äòdogs‚Äô can have multiple ‚Äòlevels‚Äô of representation. For example, you might think of the way that those words are written in English orthography (writing system) as one level. Then, you might think of a general pronunciation for those words, written in the phonetic alphabet, as another level. You could also separate that level into more than one level by having a level each for &lt;a href=&quot;https://en.wikipedia.org/wiki/Phonetic_transcription#Narrow_versus_broad_transcription:~:text=orthography.-,Narrow%20versus%20broad%20transcription&quot;&gt;narrow and broad transcriptions&lt;/a&gt;.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Level Name&lt;/th&gt;
      &lt;th&gt;Word #1&lt;/th&gt;
      &lt;th&gt;Word #2&lt;/th&gt;
      &lt;th&gt;Word # 3&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Level 1 (orthography)&lt;/td&gt;
      &lt;td&gt;cat&lt;/td&gt;
      &lt;td&gt;dog&lt;/td&gt;
      &lt;td&gt;back&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Level 2 (broad IPA)&lt;/td&gt;
      &lt;td&gt;k√¶t&lt;/td&gt;
      &lt;td&gt;d…ë…°&lt;/td&gt;
      &lt;td&gt;b√¶k&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Level 3 (narrow IPA)&lt;/td&gt;
      &lt;td&gt;k ∞√¶t&lt;/td&gt;
      &lt;td&gt;d…ë…°&lt;/td&gt;
      &lt;td&gt;b√¶k&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Now, just by looking at these three levels, you can probably see some fairly systematic rules here that you could imagine would get you from one level to the next, even if you don‚Äôt know the phonetic alphabet by-heart and even if you don‚Äôt really know about the English phonology (sound patterns and systems).&lt;/p&gt;

&lt;p&gt;First of all, it looks like all of the ‚Äòa‚Äô characters in level one turn to ‚Äò√¶‚Äô, so we might want a rule to express that all instances of ‚Äòa‚Äô turn to /√¶/. And, for another example, it looks like between levels 2 and 3, /k/ turns into either [k] or [k ∞] depending on whether it occurs before or after /√¶/&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;. So, with these hypotheses about the rules to transform from one level to another, how do we start translating this into rules for &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt;?&lt;/p&gt;

&lt;h2 id=&quot;basic-rule-writing&quot;&gt;Basic Rule writing&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; lets you describe these patterns using an ordered list of rules. Each rule must be defined to have an sequence of one or more input characters and a sequence of zero or more output characters. We can define these rules in &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; either using a tabular, spreadsheet format (csv) or using a format called JavaScript Object Notation or &lt;a href=&quot;https://www.json.org/json-en.html&quot;&gt;JSON&lt;/a&gt;. To actually write these rules along with this blog post, I recommend getting some sort of text editor, like &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt;. You could also write the spreadsheet-type rules in your favourite spreadsheet editor.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;in&lt;/th&gt;
      &lt;th&gt;out&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;a&lt;/td&gt;
      &lt;td&gt;√¶&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;or using &lt;a href=&quot;https://www.json.org/json-en.html&quot;&gt;JSON&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;in&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;out&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;√¶&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Both of the above rules capture our first, rule that turns an orthographic ‚Äòa‚Äô into a broad IPA /√¶/. You can choose to write your rules in &lt;strong&gt;either&lt;/strong&gt; format, although JSON will offer you slightly more flexibility when writing &lt;a href=&quot;#advanced-a-deeper-dive-into-writing-tricky-rules&quot;&gt;advanced rules&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If we want to write rules that depend on a particular context, we need a couple more columns (csv) or keys (JSON) than just &lt;code class=&quot;highlighter-rouge&quot;&gt;in&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;out&lt;/code&gt;. This is where we use &lt;code class=&quot;highlighter-rouge&quot;&gt;context_before&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;context_after&lt;/code&gt;. So, our second rule from above was to turn /k/ to [k ∞] when the character after /k/ is /√¶/. Here, we could write the rules like this:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;in&lt;/th&gt;
      &lt;th&gt;out&lt;/th&gt;
      &lt;th&gt;context_before&lt;/th&gt;
      &lt;th&gt;context_after&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;k&lt;/td&gt;
      &lt;td&gt;k ∞&lt;/td&gt;
      &lt;td&gt;¬†&lt;/td&gt;
      &lt;td&gt;√¶&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;or like this using JSON:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;in&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;k&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;out&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;k ∞&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;context_after&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;√¶&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;ok-so-how-do-i-actually-get-started-here&quot;&gt;Ok, so how do I actually get started here?&lt;/h2&gt;

&lt;p&gt;So, you‚Äôve understood the &lt;a href=&quot;#basic-rule-writing&quot;&gt;basics of writing rules&lt;/a&gt; either described above and you want to actually use them to convert something! This section describes exactly how to do that.&lt;/p&gt;

&lt;p&gt;The easiest way to write rules quickly is using the &lt;a href=&quot;https://g2p-studio.herokuapp.com/&quot;&gt;G2P Studio&lt;/a&gt; web application&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;. Once landing on the G2P Studio page, you can scroll down to the &lt;a href=&quot;https://g2p-studio.herokuapp.com/#out_delimiter-0:~:text=Custom%20Rules&quot;&gt;Custom Rules&lt;/a&gt; section and start directly editing the spreadsheet available there. Below is a list of all the rules to capture the transformations between level 1 and level 2 above. There are some rules that we discussed in that section, and some others that might look unfamiliar. For a full description of some of these rules, have a look at the &lt;a href=&quot;#a-deeper-dive-into-writing-tricky-rules&quot;&gt;advanced rule-writing section&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/g/custom-rules-g2p-studio-800-2a352d.png&quot; srcset=&quot;/assets/images/g/custom-rules-g2p-studio-400-2a352d.png 400w, /assets/images/g/custom-rules-g2p-studio-600-2a352d.png 600w, /assets/images/g/custom-rules-g2p-studio-800-2a352d.png 800w, /assets/images/g/custom-rules-g2p-studio-968-2a352d.png 968w&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then, you can write some text in the left text-area at the top of the G2P Studio, and g2p will apply your rules and produce the output in the right text area as seen below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/g/custom-rules-output-g2p-studio-800-8fbdf4.png&quot; srcset=&quot;/assets/images/g/custom-rules-output-g2p-studio-400-8fbdf4.png 400w, /assets/images/g/custom-rules-output-g2p-studio-600-8fbdf4.png 600w, /assets/images/g/custom-rules-output-g2p-studio-800-8fbdf4.png 800w, /assets/images/g/custom-rules-output-g2p-studio-977-8fbdf4.png 977w&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can then click on ‚ÄòExport‚Äô under the Custom Rules section to export your rules to a CSV file if you want to save them for later.&lt;/p&gt;

&lt;h2 id=&quot;mapping-configuration&quot;&gt;Mapping configuration&lt;/h2&gt;

&lt;p&gt;When you combine multiple rules in &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; for a particular purpose, this is called a &lt;em&gt;mapping&lt;/em&gt;. In addition to each file containing your rules, you need a configuration file that tells &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; how to process your rules. We write mapping configurations in files titled &lt;code class=&quot;highlighter-rouge&quot;&gt;config.yaml&lt;/code&gt;. You will need some sort of text editor, like &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;VS Code&lt;/a&gt; in order to edit your configuration file.&lt;/p&gt;

&lt;p&gt;Here is a basic configuration for your mapping:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;mappings&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;language_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;English&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# this is a shared value for all the mappings in this configuration&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;display_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;English to IPA&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# this is a 'display name'. It is a user-friendly name for your mapping.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;in_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# This is the code for your language input. By convention in g2p this should contain your language's ISO 639-3 code&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;out_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng-ipa&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# This is the code for the output of your mapping. By convention in g2p we suffix -ipa to the in_lang for mappings between an orthography and IPA&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mapping&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;authors&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# This is a way to keep track of who has contributed to the mapping&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Aidan Pine&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng_to_ipa.json&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# This is the path to your mapping file. It should be in the same folder as your config.yaml file&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you are familiar with yaml, you will see that you can have more than one mapping under the &lt;code class=&quot;highlighter-rouge&quot;&gt;mappings&lt;/code&gt; key. So to add another mapping to this file, it would look like this:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;mappings&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;language_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;English&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;display_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;English to IPA&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;in_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;out_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng-ipa&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mapping&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;authors&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Aidan Pine&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng_to_ipa.json&lt;/span&gt; 
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;language_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;English&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;display_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;English IPA to Arpabet&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;in_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng-ipa&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;out_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng-arpabet&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mapping&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;authors&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Aidan Pine&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng_ipa_to_arpabet.json&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;special-settings&quot;&gt;Special settings&lt;/h3&gt;

&lt;p&gt;You can add extra settings to your configuration file to change the way that &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; interprets your mappings. Below is a list of possible settings and their use. All of the settings keys below must be declared for each individual mapping in your &lt;code class=&quot;highlighter-rouge&quot;&gt;config.yaml&lt;/code&gt; and must be declared on the same level as all of the other keys (&lt;code class=&quot;highlighter-rouge&quot;&gt;language_name&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;in_lang&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;out_lang&lt;/code&gt; etc). These settings can also be set in the &lt;code class=&quot;highlighter-rouge&quot;&gt;G2P Studio&lt;/code&gt; instead of in a &lt;code class=&quot;highlighter-rouge&quot;&gt;config.yml&lt;/code&gt; file.&lt;/p&gt;

&lt;h5 id=&quot;as_is-default-true&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;as_is&lt;/code&gt; (default: True)&lt;/h5&gt;
&lt;p&gt;As described in the earlier part of this post, your rules apply in the order you write them. And as described in the advanced section on &lt;a href=&quot;#rule-ordering&quot;&gt;rule ordering&lt;/a&gt;, sometimes this can make your mapping produce unexpected results!&lt;/p&gt;

&lt;p&gt;If you set your mapping to &lt;code class=&quot;highlighter-rouge&quot;&gt;as_is: false&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; will sort all of your rules based on the length of the input to the rule, so that rules with longer inputs apply before rules with shorter inputs. This prevents some common ‚Äòbleeding‚Äô rule-ordering relationships described in the &lt;a href=&quot;#rule-ordering&quot;&gt;rule ordering&lt;/a&gt; section. So, if you declared your rules as:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;in&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;out&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;in&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ab&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;out&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, with &lt;code class=&quot;highlighter-rouge&quot;&gt;as_is&lt;/code&gt; set to True (the default), you would get ‚Äòbb‚Äô as the output for the input ‚Äòab‚Äô. Whereas with &lt;code class=&quot;highlighter-rouge&quot;&gt;as_is&lt;/code&gt; set to False, you would get ‚Äòc‚Äô as the output for the input ‚Äòab‚Äô.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;mappings&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;language_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;English&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;display_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;English to IPA&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;in_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;out_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng-ipa&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mapping&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;authors&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Aidan Pine&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng_to_ipa.json&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;as_is&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# &amp;lt;------- Add this&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;case_sensitive-default-true&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;case_sensitive&lt;/code&gt; (default: True)&lt;/h5&gt;

&lt;p&gt;The default is to treat your rules as case sensitive, but setting this to False, will make your rules case insensitive.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;mappings&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;language_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;English&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;display_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;English to IPA&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;in_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;out_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng-ipa&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mapping&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;authors&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Aidan Pine&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng_to_ipa.json&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;case_sensitive&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# &amp;lt;------- Add this&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;escape_special-default-false&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;escape_special&lt;/code&gt; (default: False)&lt;/h5&gt;

&lt;p&gt;As described in the section on &lt;a href=&quot;#regular-expressions&quot;&gt;regular expressions&lt;/a&gt;, you can define rules using ‚Äòspecial‚Äô characters. By default, these characters are interpreted as ‚Äòspecial‚Äô, but if you want all special characters in your mapping to be interpreted as their actual characters, you can set &lt;code class=&quot;highlighter-rouge&quot;&gt;escape_special&lt;/code&gt; to true.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;mappings&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;language_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;English&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;display_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;English to IPA&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;in_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;out_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng-ipa&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mapping&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;authors&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Aidan Pine&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng_to_ipa.json&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;escape_special&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# &amp;lt;------- Add this&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;norm_form-default-nfd&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;norm_form&lt;/code&gt; (default: ‚ÄúNFD‚Äù)&lt;/h5&gt;

&lt;p&gt;If you‚Äôve never heard of Unicode normalization don‚Äôt worry, you‚Äôre not alone! But, for writing rules and mappings using &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt;, there can be some surprising ‚Äògotcha‚Äô moments if you don‚Äôt choose the right normalization strategy.&lt;/p&gt;

&lt;p&gt;The basic gist of the problem is that there can be multiple ways to write the &lt;em&gt;same&lt;/em&gt; character in Unicode, depending on whether you use ‚Äòcombining characters‚Äô to type or not. For example, on some keyboards, you might type ‚ÄòeÃÅ‚Äô by writing an e first and then another keystroke to type the acute accent that sits above it. The Unicode representation for this would likely be \u0065 (e) followed by \u0301 (a combining acute accent), however there is an entirely separate Unicode code point that has these two characters &lt;em&gt;pre-composed&lt;/em&gt; (\u00e9).&lt;/p&gt;

&lt;p&gt;Many fonts will render these two different representations identically and it can be really difficult and confounding as a user if both appear in the same text. Often times find/replace won‚Äôt work and frustrating things like that. Luckily, there is a standard for normalizing these differences so that all instances of sequences like \u0065\u0301 would be (NF)Composed into \u00e9, or the opposite direction where all instances of \u00e9 would be (NF)Decomposed into \u0065\u0301. For a more in-depth conversation on this, check out &lt;a href=&quot;https://withblue.ink/2019/03/11/why-you-need-to-normalize-unicode-strings.html&quot;&gt;this blog article&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;mappings&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;language_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;English&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;display_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;English to IPA&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;in_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;out_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng-ipa&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mapping&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;authors&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Aidan Pine&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng_to_ipa.json&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;norm_form&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;NFC&quot;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# &amp;lt;------- Add your Unicode normalization strategy here&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;out_delimiter-default-&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;out_delimiter&lt;/code&gt; (default: ‚Äò‚Äô)&lt;/h5&gt;

&lt;p&gt;Some mappings require that a delimiting character (or characters) be inserted in between when a rule applies. So, using the first example, maybe you want &lt;code class=&quot;highlighter-rouge&quot;&gt;k√¶t&lt;/code&gt; to go to &lt;code class=&quot;highlighter-rouge&quot;&gt;k ∞|√¶|t&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;k ∞√¶t&lt;/code&gt;. For this, you would set &lt;code class=&quot;highlighter-rouge&quot;&gt;out_delimiter: &quot;|&quot;&lt;/code&gt; in your mapping.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;mappings&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;language_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;English&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;display_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;English to IPA&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;in_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;out_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng-ipa&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mapping&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;authors&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Aidan Pine&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng_to_ipa.json&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;out_delimiter&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;|&quot;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# &amp;lt;------- Add your delimiter here&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;reverse-default-false&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;reverse&lt;/code&gt; (default: False)&lt;/h5&gt;

&lt;p&gt;Setting this to reverse will try to reverse the mappings so that all characters defined as &lt;code class=&quot;highlighter-rouge&quot;&gt;out&lt;/code&gt; in your mapping become the input characters and vice versa. Except for a few cases, this is unlikely to work very well for advanced mapings.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;mappings&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;language_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;English&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;display_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;English to IPA&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;in_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;out_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng-ipa&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mapping&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;authors&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Aidan Pine&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng_to_ipa.json&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# &amp;lt;------- Add this&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;prevent_feeding-default-false&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;prevent_feeding&lt;/code&gt; (default: False)&lt;/h5&gt;

&lt;p&gt;Let‚Äôs say you have the following rules:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;in&lt;/th&gt;
      &lt;th&gt;out&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;kw&lt;/td&gt;
      &lt;td&gt;k ∑&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;k&lt;/td&gt;
      &lt;td&gt;k ≤&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Ordered in the way they are defined, an input of &lt;code class=&quot;highlighter-rouge&quot;&gt;kw&lt;/code&gt; will produce &lt;code class=&quot;highlighter-rouge&quot;&gt;k ≤ ∑&lt;/code&gt; and ordered the other way, an input of &lt;code class=&quot;highlighter-rouge&quot;&gt;kw&lt;/code&gt; will produce &lt;code class=&quot;highlighter-rouge&quot;&gt;k ≤w&lt;/code&gt;. Neither of these are correct though! For this mapping, we want &lt;code class=&quot;highlighter-rouge&quot;&gt;k ∑&lt;/code&gt; as the output. So, how do we solve this? There is a setting called &lt;code class=&quot;highlighter-rouge&quot;&gt;prevent_feeding&lt;/code&gt; which, if set to true, will prevent the output of one rule from being processed by any subsequent rule. As described in &lt;a href=&quot;#rule-ordering&quot;&gt;rule order&lt;/a&gt; this process when one rule provides the context for another rule to apply is called ‚Äòfeeding‚Äô and so this setting will prevent that from happening. Note, setting &lt;code class=&quot;highlighter-rouge&quot;&gt;prevent_feeding: true&lt;/code&gt; for your whole mapping will do this for every rule. If you just want to prevent feeding for one particular rule, you can write your rules in JSON and add the key to the specific rule you want to prevent feeding for.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;in&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;kw&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;out&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;k ∑&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;prevent_feeding&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;in&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;k&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;out&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;k ≤&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;mappings&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;language_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;English&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;display_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;English to IPA&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;in_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;out_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng-ipa&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mapping&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;authors&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Aidan Pine&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eng_to_ipa.json&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;prevent_feeding&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# &amp;lt;------- Add this&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;advanced-a-deeper-dive-into-writing-tricky-rules&quot;&gt;Advanced: A deeper dive into writing tricky rules&lt;/h2&gt;

&lt;p&gt;You may have noticed that the rules described above for converting words like ‚Äòdog‚Äô and ‚Äòcat‚Äô to IPA are woefully incomplete. The real world use cases for &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; often need to account for a lot more messiness than was described in the artificial example above. In fact, for languages like English, &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; is likely &lt;strong&gt;not&lt;/strong&gt; a good solution. The English writing system is notoriously inconsistent, and there already exist a variety of other tools that account for all of the lexical (word-specific) idiosyncracies in deriving the IPA-form from the orthographic form. For many Indigenous languages, the writing system is sufficiently close to the spoken form that &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; is a very appropriate solution. In the following sections, I‚Äôll describe some common problems when writing rules, and how to fix them.&lt;/p&gt;

&lt;h3 id=&quot;unicode-escape-sequences&quot;&gt;Unicode Escape Sequences&lt;/h3&gt;

&lt;p&gt;Sometimes you need rules to convert from characters that either don‚Äôt render very well, or render in a confusing way. In those cases, you can alternatively use &lt;a href=&quot;https://www.rapidtables.com/code/text/unicode-characters.html&quot;&gt;Unicode escape sequences&lt;/a&gt;. For example, maybe you want to write a rule that converts the standard ASCII ‚Äòg‚Äô to the strict IPA Unicode /…°/. As you can likely see on your browser, these characters look very similar, but they‚Äôre not! The ASCII ‚Äòg‚Äô is U+0067 and the strict IPA ‚Äò…°‚Äô is U+0261. So, you can write a rule as follows:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;in&lt;/th&gt;
      &lt;th&gt;out&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;\u0067&lt;/td&gt;
      &lt;td&gt;\u0261&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;or using &lt;a href=&quot;https://www.json.org/json-en.html&quot;&gt;JSON&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;in&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\u&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;0067&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;out&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\u&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;0261&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is also helpful when you need to write rules between combining characters or other confusable characters. The &lt;strong&gt;rule of thumb&lt;/strong&gt; is, if your rules are clearer using Unicode escape sequences, do it! Otherwise, just use the normal character in place.&lt;/p&gt;

&lt;h3 id=&quot;rule-ordering&quot;&gt;Rule Ordering&lt;/h3&gt;

&lt;p&gt;The order of your rules in &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; really matters! This is because some rules can either create or remove the context for other rules to apply. In linguistics, these rule ordering patterns are usually talked about as either &lt;a href=&quot;https://linguistics.stackexchange.com/questions/6084/whats-the-difference-between-counterbleeding-bleeding-and-feeding&quot;&gt;feeding, bleeding, counter-feeding, or counter-bleeding&lt;/a&gt; relationships. There are potentially valid reasons to want to encode any of these types of relationships in your rules.&lt;/p&gt;

&lt;p&gt;To illustrate a possible problem, let‚Äôs consider a &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; mapping for language that converts ‚ÄòaÃ±‚Äô to ‚Äò…ô‚Äô and ‚Äòa‚Äô to ‚Äò√¶‚Äô. ‚ÄòaÃ±‚Äô is a sequence of a normal a followed by a combining macron below (\u0331). Because \u0331 (‚ÄòaÃ±‚Äô) is easily confusable with \u0332 (‚ÄòaÃ≤‚Äô), in order to follow the rule of thumb for &lt;a href=&quot;#unicode-escape-sequences&quot;&gt;Unicode escape sequences&lt;/a&gt;, I‚Äôll write the rules as follows:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;in&lt;/th&gt;
      &lt;th&gt;out&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;a&lt;/td&gt;
      &lt;td&gt;√¶&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;a\u0331&lt;/td&gt;
      &lt;td&gt;…ô&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Now, assuming an input to this mapping of ‚ÄòaÃ±‚Äô (a\u0331), we would get ‚Äò√¶Ã±‚Äô (√¶\u0331) instead of ‚Äò…ô‚Äô. Why is that? Because the first rule applies and turns ‚Äòa‚Äô into ‚Äò√¶‚Äô before the second rule has a chance to apply. This is called a ‚Äòbleeding‚Äô relationship. In order to avoid it, we would need to write our rules as follows:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;in&lt;/th&gt;
      &lt;th&gt;out&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;a\u0331&lt;/td&gt;
      &lt;td&gt;…ô&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;a&lt;/td&gt;
      &lt;td&gt;√¶&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;With this ordering, our input of ‚ÄòaÃ±‚Äô (a\u0331) would turn into ‚Äò…ô‚Äô as we expect, and our input of ‚Äòa‚Äô would turn into √¶ also as expected. Try it out on the &lt;a href=&quot;https://g2p-studio.herokuapp.com&quot;&gt;G2P Studio&lt;/a&gt; if you don‚Äôt believe me!&lt;/p&gt;

&lt;h3 id=&quot;defining-sets-of-characters&quot;&gt;Defining sets of characters&lt;/h3&gt;

&lt;p&gt;Some rules are written with repeating sets of characters that can be tedious to write out. For this, we might want to define certain sets of characters using a &lt;em&gt;variable&lt;/em&gt; name. These can be written using special types of mapping files in &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example, consider a series of rules which contextually apply only between vowels. Let‚Äôs say as an example of one of those rules, that &lt;code class=&quot;highlighter-rouge&quot;&gt;dd&lt;/code&gt; turns to &lt;code class=&quot;highlighter-rouge&quot;&gt;√∞&lt;/code&gt; when it exists between two vowels. This language has the following vowels in its inventory: &lt;code class=&quot;highlighter-rouge&quot;&gt;a,e,i,o,u,√¶,√•,√∏&lt;/code&gt;. You could write the rules like this&lt;sup id=&quot;fnref:5&quot;&gt;&lt;a href=&quot;#fn:5&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;in&lt;/th&gt;
      &lt;th&gt;out&lt;/th&gt;
      &lt;th&gt;context_before&lt;/th&gt;
      &lt;th&gt;context_after&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;dd&lt;/td&gt;
      &lt;td&gt;√∞&lt;/td&gt;
      &lt;td&gt;(a|e|i|o|u|√¶|√•|√∏)&lt;/td&gt;
      &lt;td&gt;(a|e|i|o|u|√¶|√•|√∏)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;But, if there are lots of rules with these vowels, this could get very tedious, not to mention annoying if the characters in the set change at some point. It is also less readable, and leaves the reader of the mapping to infer the meaning of the rule.&lt;/p&gt;

&lt;p&gt;So, in a separate file, by convention it is usually called &lt;code class=&quot;highlighter-rouge&quot;&gt;abbreviations.csv&lt;/code&gt;, you can define a list of sets where each row is a new set. The first column contains the name of the set (by convention this is capitalized), and you can add characters to every following column. So, for example:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;variable name&lt;/th&gt;
      &lt;th&gt;¬†&lt;/th&gt;
      &lt;th&gt;¬†&lt;/th&gt;
      &lt;th&gt;¬†&lt;/th&gt;
      &lt;th&gt;¬†&lt;/th&gt;
      &lt;th&gt;¬†&lt;/th&gt;
      &lt;th&gt;¬†&lt;/th&gt;
      &lt;th&gt;¬†&lt;/th&gt;
      &lt;th&gt;¬†&lt;/th&gt;
      &lt;th&gt;¬†&lt;/th&gt;
      &lt;th&gt;¬†&lt;/th&gt;
      &lt;th&gt;¬†&lt;/th&gt;
      &lt;th&gt;¬†&lt;/th&gt;
      &lt;th&gt;¬†&lt;/th&gt;
      &lt;th&gt;¬†&lt;/th&gt;
      &lt;th&gt;¬†&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;VOWEL&lt;/td&gt;
      &lt;td&gt;a&lt;/td&gt;
      &lt;td&gt;e&lt;/td&gt;
      &lt;td&gt;i&lt;/td&gt;
      &lt;td&gt;o&lt;/td&gt;
      &lt;td&gt;u&lt;/td&gt;
      &lt;td&gt;√¶&lt;/td&gt;
      &lt;td&gt;√•&lt;/td&gt;
      &lt;td&gt;√∏&lt;/td&gt;
      &lt;td&gt;¬†&lt;/td&gt;
      &lt;td&gt;¬†&lt;/td&gt;
      &lt;td&gt;¬†&lt;/td&gt;
      &lt;td&gt;¬†&lt;/td&gt;
      &lt;td&gt;¬†&lt;/td&gt;
      &lt;td&gt;¬†&lt;/td&gt;
      &lt;td&gt;¬†&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CONSONANT&lt;/td&gt;
      &lt;td&gt;p&lt;/td&gt;
      &lt;td&gt;b&lt;/td&gt;
      &lt;td&gt;t&lt;/td&gt;
      &lt;td&gt;d&lt;/td&gt;
      &lt;td&gt;k&lt;/td&gt;
      &lt;td&gt;g&lt;/td&gt;
      &lt;td&gt;f&lt;/td&gt;
      &lt;td&gt;s&lt;/td&gt;
      &lt;td&gt;h&lt;/td&gt;
      &lt;td&gt;v&lt;/td&gt;
      &lt;td&gt;j&lt;/td&gt;
      &lt;td&gt;r&lt;/td&gt;
      &lt;td&gt;l&lt;/td&gt;
      &lt;td&gt;m&lt;/td&gt;
      &lt;td&gt;n&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;FRONT&lt;/td&gt;
      &lt;td&gt;i&lt;/td&gt;
      &lt;td&gt;e&lt;/td&gt;
      &lt;td&gt;≈ì&lt;/td&gt;
      &lt;td&gt;√∏&lt;/td&gt;
      &lt;td&gt;y&lt;/td&gt;
      &lt;td&gt;¬†&lt;/td&gt;
      &lt;td&gt;¬†&lt;/td&gt;
      &lt;td&gt;¬†&lt;/td&gt;
      &lt;td&gt;¬†&lt;/td&gt;
      &lt;td&gt;¬†&lt;/td&gt;
      &lt;td&gt;¬†&lt;/td&gt;
      &lt;td&gt;¬†&lt;/td&gt;
      &lt;td&gt;¬†&lt;/td&gt;
      &lt;td&gt;¬†&lt;/td&gt;
      &lt;td&gt;¬†&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;BACK&lt;/td&gt;
      &lt;td&gt;u&lt;/td&gt;
      &lt;td&gt;o&lt;/td&gt;
      &lt;td&gt;a&lt;/td&gt;
      &lt;td&gt;¬†&lt;/td&gt;
      &lt;td&gt;¬†&lt;/td&gt;
      &lt;td&gt;¬†&lt;/td&gt;
      &lt;td&gt;¬†&lt;/td&gt;
      &lt;td&gt;¬†&lt;/td&gt;
      &lt;td&gt;¬†&lt;/td&gt;
      &lt;td&gt;¬†&lt;/td&gt;
      &lt;td&gt;¬†&lt;/td&gt;
      &lt;td&gt;¬†&lt;/td&gt;
      &lt;td&gt;¬†&lt;/td&gt;
      &lt;td&gt;¬†&lt;/td&gt;
      &lt;td&gt;¬†&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Then, in your configuration, you can add the file to a specific mapping using &lt;code class=&quot;highlighter-rouge&quot;&gt;abbreviations: abbreviations.csv&lt;/code&gt;. After adding it to your mapping, you can write the above rule like this instead:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;in&lt;/th&gt;
      &lt;th&gt;out&lt;/th&gt;
      &lt;th&gt;context_before&lt;/th&gt;
      &lt;th&gt;context_after&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;dd&lt;/td&gt;
      &lt;td&gt;√∞&lt;/td&gt;
      &lt;td&gt;VOWEL&lt;/td&gt;
      &lt;td&gt;VOWEL&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;You can also use abbreviations like this in the G2P studio by writing them in the section at the bottom of the page titled ‚ÄòCustom Abbreviations‚Äô They will be automatically applied to your custom rules above.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/g/g2p-abbs-800-7cd2be.png&quot; srcset=&quot;/assets/images/g/g2p-abbs-400-7cd2be.png 400w, /assets/images/g/g2p-abbs-600-7cd2be.png 600w, /assets/images/g/g2p-abbs-800-7cd2be.png 800w, /assets/images/g/g2p-abbs-968-7cd2be.png 968w&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;regular-expressions&quot;&gt;Regular Expressions&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Regular_expression&quot;&gt;Regular expressions&lt;/a&gt; are used ubiquitously in programming to do define certain search patterns in text. In fact, this is how &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; rules work! They eventually get compiled into a regular expression too. For the most part, you can add basic regular expressions to your rules&lt;/p&gt;

&lt;h3 id=&quot;using-specific-indices&quot;&gt;Using specific indices&lt;/h3&gt;

&lt;p&gt;‚Ä¶more to come‚Ä¶&lt;/p&gt;

&lt;h2 id=&quot;applications&quot;&gt;Applications&lt;/h2&gt;

&lt;p&gt;There are number of different software tools that are already making use of &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt;. For general purpose use in Python, have a look at &lt;a href=&quot;#advanced-use-in-python&quot;&gt;this section&lt;/a&gt;. G2P is also used extensively in the &lt;a href=&quot;#readalongs&quot;&gt;ReadAlongs&lt;/a&gt; project for creating interactive audio/text documents and in &lt;a href=&quot;#convertextract&quot;&gt;Convertextract&lt;/a&gt;, a tool for going &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; transformations in Microsoft Office documents while preserving the original document formatting.&lt;/p&gt;

&lt;h3 id=&quot;readalongs&quot;&gt;ReadAlongs&lt;/h3&gt;

&lt;p&gt;‚Ä¶more to come‚Ä¶&lt;/p&gt;

&lt;h3 id=&quot;convertextract&quot;&gt;Convertextract&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.mothertongues.org/convertextract-app&quot;&gt;Convertextract&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;advanced-use-in-python&quot;&gt;Advanced: use in Python&lt;/h3&gt;

&lt;p&gt;‚Ä¶more to come‚Ä¶&lt;/p&gt;

&lt;h2 id=&quot;advanced-contributing-your-rules-to-the-main-g2p-library&quot;&gt;Advanced: contributing your rules to the main &lt;code class=&quot;highlighter-rouge&quot;&gt;g2p&lt;/code&gt; library&lt;/h2&gt;

&lt;p&gt;You‚Äôve written some cool rules and you want to contribute, that‚Äôs awesome!&lt;/p&gt;

&lt;p&gt;‚Ä¶more to come‚Ä¶&lt;/p&gt;

&lt;h2 id=&quot;advanced-adding-a-pre-processing-mapping&quot;&gt;Advanced: adding a ‚Äòpre-processing‚Äô mapping&lt;/h2&gt;

&lt;p&gt;‚Ä¶more to come‚Ä¶&lt;/p&gt;

&lt;h3 id=&quot;footnotes&quot;&gt;Footnotes&lt;/h3&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;Because the word ‚Äòletter‚Äô usually refers to a character within a specific alphabet or writing system, instead of ‚Äòletter‚Äô, I‚Äôm going to use the word ‚Äòcharacter‚Äô throughout this post.¬†&lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;A Python ‚Äòlibrary‚Äô is a collection of code¬†&lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;Orthographic characters are circumfixed with apostrophes like ‚Äòa‚Äô, broad IPA typically uses forward slashes like /k/ and narrow IPA typically uses square brackets like [k ∞]¬†&lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;
      &lt;p&gt;I‚Äôm using the free, hobby plan at &lt;a href=&quot;https://www.heroku.com/&quot;&gt;https://www.heroku.com/&lt;/a&gt; to host it though, so occasionally the server goes to sleep. If you first go to the site and it takes a few seconds to boot up, don‚Äôt worry!¬†&lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:5&quot;&gt;
      &lt;p&gt;You‚Äôll notice that the syntax here is a little weird, what the heck are all of those pipes (the up-down things like |) doing there? That‚Äôs because I‚Äôm using &lt;a href=&quot;https://en.wikipedia.org/wiki/Regular_expression&quot;&gt;regular expressions&lt;/a&gt; to express a &lt;strong&gt;OR&lt;/strong&gt; e &lt;strong&gt;OR&lt;/strong&gt; u etc‚Ä¶ For more info, check out the &lt;a href=&quot;#regular-expressions&quot;&gt;section on regular expressions&lt;/a&gt;¬†&lt;a href=&quot;#fnref:5&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 07 Aug 2020 00:00:00 +0000</pubDate>
        <link>https://blog.mothertongues.org/g2p/</link>
        <guid isPermaLink="true">https://blog.mothertongues.org/g2p/</guid>
        
        <category>tutorial</category>
        
        <category>explanation</category>
        
        <category>tech-showcase</category>
        
        
      </item>
    
      <item>
        <title>Standard post template</title>
        <description>&lt;p&gt;This blog post describes what a basic template for a post on this blog should look like. Feel free to just copy past the headers into your post and replace the text! The instructions for each section are italicized, and the answers for this specific blog post are following the italicized text.&lt;/p&gt;

&lt;h1 id=&quot;tldr&quot;&gt;TL;DR&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;We recommend having a section at the top that gives an extremely short summary of the post (ideally 2 or 3 sentences). This should be high-level, and shouldn‚Äôt assume any technical knowledge.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is a template of a blog post to follow when writing other blog posts - how meta!&lt;/p&gt;

&lt;h1 id=&quot;what-you-need-to-know-to-understand-this-post&quot;&gt;What you need to know to understand this post&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Your post should have a list of technical skills that you think are needed to understand the blog post. This will help the reader know if they‚Äôll be able to benefit from reading it or whether they should study up on something first.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Knowledge of writing &lt;a href=&quot;https://www.markdowntutorial.com/&quot;&gt;markdown&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;who-is-involved-with-this-project&quot;&gt;Who is involved with this project?&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Beyond the author‚Äôs information which will be part of this post, there should be a list of everybody involved with the technology discussed in the post, if applicable. The list of contacts should be clear&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Author/Blog Maintainer: &lt;a href=&quot;https://aidanpine.ca&quot;&gt;Aidan Pine&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;what-is-needed-to-replicate-the-content-in-the-post&quot;&gt;What is needed to replicate the content in the post?&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Is the technology or tip you‚Äôre describing reproducible? If so, what are the requirements? For example, is it available for any language, given 20 hours of audio data?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You will need to follow the steps of &lt;a href=&quot;https://blog.mothertongues.org/become-an-author&quot;&gt;becoming an author&lt;/a&gt; and &lt;a href=&quot;https://blog.mothertongues.org/write-a-post&quot;&gt;writing a post&lt;/a&gt; before using this template.&lt;/p&gt;

&lt;h1 id=&quot;what-are-the-motivations-behind-this-projecttechnologytip&quot;&gt;What are the motivations behind this project/technology/tip?&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Was this project funded? By whom? What were the explicit goals of the technology in question, or are they left unstated?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://mothertongues.org&quot;&gt;Mother Tongues&lt;/a&gt; was created to release open-source software for language revitalization and includes tools for &lt;a href=&quot;https://docs.mothertongues.org&quot;&gt;dictionaries&lt;/a&gt; and [orthography converters][https://github.com/roedoejet/convertextract]. Please read the &lt;a href=&quot;https://blog.mothertongues.org/about&quot;&gt;About section&lt;/a&gt; for more information.&lt;/p&gt;

&lt;h1 id=&quot;main-post--replace-title&quot;&gt;Main Post &amp;lt;‚Äì replace title&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Here is where the main post should go - because this is just a template, there‚Äôs nothing here!&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-to-add-an-image-to-your-post&quot;&gt;How to add an image to your post&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Place your image in &lt;code class=&quot;highlighter-rouge&quot;&gt;assets/images/&lt;/code&gt;. I recommend prefixing your image
  name with your post title, followed by two dashes. For example, the post title for this very
  post you are reading right now is &lt;code class=&quot;highlighter-rouge&quot;&gt;post-template&lt;/code&gt;. I have an image
  called &lt;code class=&quot;highlighter-rouge&quot;&gt;ime-development.jpg&lt;/code&gt;, so I‚Äôll copy it as
  &lt;code class=&quot;highlighter-rouge&quot;&gt;assets/images/post-template--ime-development.jpg&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Embed your picture using the &lt;code class=&quot;highlighter-rouge&quot;&gt;{% picture %}&lt;/code&gt; tag. In your post,
where you want your image, embed it as follows:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{% picture post-template--ime-development.jpg --alt An early draft storyboard of how to use the IME %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It will produce the following image:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/g/post-template--ime-development-800-af046f.jpg&quot; alt=&quot;An early draft storyboard of how to use the IME&quot; srcset=&quot;/assets/images/g/post-template--ime-development-400-af046f.jpg 400w, /assets/images/g/post-template--ime-development-600-af046f.jpg 600w, /assets/images/g/post-template--ime-development-800-af046f.jpg 800w, /assets/images/g/post-template--ime-development-1000-af046f.jpg 1000w&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The text after the &lt;code class=&quot;highlighter-rouge&quot;&gt;--alt&lt;/code&gt; is the text that will show up if the image
doesn‚Äôt load, or the text that screenreader users will hear when
listening to the blog post.&lt;/p&gt;
</description>
        <pubDate>Fri, 31 Jul 2020 00:00:00 +0000</pubDate>
        <link>https://blog.mothertongues.org/post-template/</link>
        <guid isPermaLink="true">https://blog.mothertongues.org/post-template/</guid>
        
        <category>basic</category>
        
        <category>contributing</category>
        
        
        <category>Tutorial</category>
        
        <category>Blog</category>
        
      </item>
    
      <item>
        <title>Write a post</title>
        <description>&lt;p&gt;Here‚Äôs a short tutorial on how to write your first blog post on the official Mother Tongues Blog. This tutorial assumes you‚Äôve already signed up to &lt;a href=&quot;https://blog.mothertongues.org/become-an-author&quot;&gt;become an author&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Posts on the Mother Tongues Blog are written in &lt;a href=&quot;https://en.wikipedia.org/wiki/Markdown&quot;&gt;Markdown&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In order to write a new post, follow the following steps.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;In your fork of the &lt;a href=&quot;https://github.com/MotherTongues/mothertongues-blog&quot;&gt;Mother Tongues Blog Respository&lt;/a&gt;, make sure you‚Äôre in the &lt;code class=&quot;highlighter-rouge&quot;&gt;dev.author&lt;/code&gt; branch and add a new post to the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; folder. Your post file name must by &lt;a href=&quot;https://blog.tersmitten.nl/slugify/&quot;&gt;slugified&lt;/a&gt;. It must start with the date (yyyy-mm-dd) and then the blog post name, &lt;code class=&quot;highlighter-rouge&quot;&gt;2020-01-15-this-is-a-sample.md&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Add some meta data about the post at the top:
    &lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;post&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Become&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;an&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;author&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;aidan&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Tutorial&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Blog&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;intermediate&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;assets/images/01.jpg&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Write&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;your&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;own&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;articles&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;the&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Mother&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Tongues&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Blog&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;featured&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;hidden&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Write the content of your post in Markdown. Please have a look at the &lt;a href=&quot;https://blog.mothertongues.org/post-template&quot;&gt;template&lt;/a&gt; for writing accessible posts!&lt;/li&gt;
  &lt;li&gt;When you‚Äôre happy with it, Submit a &lt;a href=&quot;https://github.com/MotherTongues/mothertongues-blog/pull/new/dev.author&quot;&gt;pull request&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Thanks for contributing!&lt;/p&gt;
</description>
        <pubDate>Tue, 17 Mar 2020 00:00:00 +0000</pubDate>
        <link>https://blog.mothertongues.org/write-a-post/</link>
        <guid isPermaLink="true">https://blog.mothertongues.org/write-a-post/</guid>
        
        <category>intermediate</category>
        
        <category>contributing</category>
        
        
        <category>Tutorial</category>
        
        <category>Blog</category>
        
      </item>
    
      <item>
        <title>Welcome</title>
        <description>&lt;p&gt;Welcome to the Mother Tongues official blog!&lt;/p&gt;

&lt;p&gt;Mother Tongues is an organization that releases free and open source tools for language revitalization.&lt;/p&gt;

&lt;p&gt;Here you‚Äôll find blog posts, tips, tricks and tutorials for developing language technology with a focus on Indigenous languages.&lt;/p&gt;

&lt;p&gt;Be sure to &lt;a href=&quot;https://mailchi.mp/b87b1fbde236/mothertongues&quot;&gt;sign up&lt;/a&gt; to our mailing list to keep track of new blog posts and any events.&lt;/p&gt;

&lt;p&gt;If you‚Äôre interested in becoming an author, and you have a &lt;a href=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt; account, please checkout how to &lt;a href=&quot;https://blog.mothertongues.org/become-an-author&quot;&gt;become an author&lt;/a&gt; and after you‚Äôve signed up, learn how to &lt;a href=&quot;https://blog.mothertongues.org/write-a-post&quot;&gt;write a post&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Tue, 17 Mar 2020 00:00:00 +0000</pubDate>
        <link>https://blog.mothertongues.org/welcome/</link>
        <guid isPermaLink="true">https://blog.mothertongues.org/welcome/</guid>
        
        
      </item>
    
      <item>
        <title>Become an author</title>
        <description>&lt;p&gt;Do you have a tip you‚Äôd like to share? Have you pulled your hair out fixing a bug only to find out that the reason the bug exists is because many mainstream platforms don‚Äôt consider less-resourced languages? The Mother Tongues blog is the place to share your tips, tricks, and tutorials for all things related to technology for less-resourced languages.&lt;/p&gt;

&lt;p&gt;To become an author, you‚Äôll need a &lt;a href=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt; account&lt;sup&gt;&lt;a href=&quot;#github-footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;Then, follow these steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.github.com/en/github/getting-started-with-github/fork-a-repo&quot;&gt;Fork&lt;/a&gt; the &lt;a href=&quot;https://github.com/MotherTongues/mothertongues-blog&quot;&gt;Mother Tongues Blog Respository&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Checkout to the &lt;code class=&quot;highlighter-rouge&quot;&gt;dev.author&lt;/code&gt; branch&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Edit the file labelled &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;. * denotes a required value.&lt;/p&gt;

    &lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;authors&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;AidanPine&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Aidan&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;display_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Aidan&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;gravatar&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;7623fd3eeb0acbe1084fecc20c3093ae&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hello@aidanpine.ca&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;web&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://aidanpine.ca&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;twitter&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://twitter.com/aidanpine&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Lead&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;developer&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Mother&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Tongues.&quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;yourname*&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;# This should be your twitter handle&lt;/span&gt;
     &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;YourName*&lt;/span&gt;
     &lt;span class=&quot;na&quot;&gt;display_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;YourName*&lt;/span&gt;
     &lt;span class=&quot;na&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;your@email.com*&lt;/span&gt;
     &lt;span class=&quot;na&quot;&gt;gravatar&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;YourGravatarID&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# this is an md5 hash of your email that you used to sign up for https://en.gravatar.com/ you can either calculate this on the command line, or use an online generator like https://www.md5hashgenerator.com/ &lt;/span&gt;
     &lt;span class=&quot;na&quot;&gt;web&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;yoursite.com&lt;/span&gt;
     &lt;span class=&quot;na&quot;&gt;twitter&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://twitter.com/yourhandle&lt;/span&gt;
     &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Guest&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Author.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;YourDescriptionHere&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add your name to the list of authors in &lt;code class=&quot;highlighter-rouge&quot;&gt;admin/config.yml&lt;/code&gt;&lt;/p&gt;

    &lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Author'&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;author'&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;widget&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;select'&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;AidanPine'&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;_eddieantonio'&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;delaney'&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;fineen'&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;YOURNAME'&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Submit a &lt;a href=&quot;https://github.com/MotherTongues/mothertongues-blog/pull/new/dev.author&quot;&gt;pull request&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That‚Äôs it! Start [writing your posts](https://blog.mothertongues.org/write-a-post).&lt;/p&gt;

&lt;p&gt;&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;footnotes&quot;&gt;Footnotes&lt;/h2&gt;

&lt;p&gt;&lt;a name=&quot;github-footnote&quot;&gt;1&lt;/a&gt;: Any suggestions for good GitHub tutorials? Leave them in the comments below!&lt;/p&gt;
</description>
        <pubDate>Tue, 17 Mar 2020 00:00:00 +0000</pubDate>
        <link>https://blog.mothertongues.org/become-an-author/</link>
        <guid isPermaLink="true">https://blog.mothertongues.org/become-an-author/</guid>
        
        <category>intermediate</category>
        
        <category>contributing</category>
        
        
        <category>Tutorial</category>
        
        <category>Blog</category>
        
      </item>
    
  </channel>
</rss>
