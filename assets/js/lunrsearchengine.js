
var documents = [{
    "id": 0,
    "url": "https://blog.mothertongues.org/404.html",
    "title": "404",
    "body": "404 Page does not exist!Please use the search bar at the top or visit our homepage! "
    }, {
    "id": 1,
    "url": "https://blog.mothertongues.org/about",
    "title": "",
    "body": "Welome to the Mother Tongues Blog. "
    }, {
    "id": 2,
    "url": "https://blog.mothertongues.org/categories",
    "title": "Categories",
    "body": ""
    }, {
    "id": 3,
    "url": "https://blog.mothertongues.org/",
    "title": "Home",
    "body": "      Featured:                                                                                                                             Welcome                              :               Welcome to the Mother Tongues official blog!:                                                                                                                                                                       Aidan                                17 Mar 2020                                                                                                                            All Stories:                                                                                                             How to use the new Convertextract application for 'quality control' of ELAN annotations              :       TL;DR:                                                                               Fineen                                13 Aug 2020                                                                                                                                             Why I made yet another Cree syllabics converter              :       The Western Cree languages—Plains Cree, Woods Cree, and Swampy Cree—are written using two systems: one with letters borrowed from the English alphabet, in a system known as the standard Roman. . . :                                                                               Eddie                                07 Aug 2020                                                                    Standard post template              :       This blog post describes what a basic template for a post on this blog should look like. Feel free to just copy past the headers into your post and replace. . . :                                                                               Aidan                                31 Jul 2020                                                                    Write a post              :       Here’s a short tutorial on how to write your first blog post on the official Mother Tongues Blog. This tutorial assumes you’ve already signed up to become an author. :                                                                               Aidan                                17 Mar 2020                                                                                                                                             Become an author              :       Do you have a tip you’d like to share? Have you pulled your hair out fixing a bug only to find out that the reason the bug exists is because. . . :                                                                               Aidan                                17 Mar 2020                                            "
    }, {
    "id": 4,
    "url": "https://blog.mothertongues.org/robots.txt",
    "title": "",
    "body": "      Sitemap: {{ “sitemap. xml”   absolute_url }}   "
    }, {
    "id": 5,
    "url": "https://blog.mothertongues.org/convertextract-app/",
    "title": "How to use the new Convertextract application for 'quality control' of ELAN annotations",
    "body": "2020/08/13 - TL;DRHave you ever wanted to NOT spend hours tediously checking that k + ‘ is written as k̓ and not k’?If you said YES!, Convertextract is the app for you. With minimal technical knowledge, you can now systemically make your ELAN annotations consistent. What you need to know to understand this postI assume that you know some background about the g2p library. For the purposes of using these tools, a library is a collection of code and documentation, but if you would like to dig deeper you can check out this Wikipedia article The g2p library uses existing and custom mappings (i. e. arbitrary input-&gt;output conversions). For example, you might want k’ (input) to be converted to k̓ (output). The Mapping is the roadmap for converting. These conversions are arbitrary, so depending on your use case you may need to create new mappings. Most of the existing mappings convert Graphemes (a character in the writing system of a language) to Phonemes (their equivalent sound in the language), hence the name ‘g2p’. To see existing mappings click hereTo keep this post simple, I will not explain how to add new g2p mappings. The documentation for adding mappings is here Who is involved with this project?   Kwak̓wala Corpus Collection group   Sara Child saratlilinukw@gmail. com Daisy Rosenblum daisy. rosenblum@ubc. ca Caroline Running Wolf caroline. oldcoyote@gmail. com     App developer: Aidan Pine     Support for adding mappings/parsers: Fineen Davis  What is needed to replicate the content in the post? g2p Mapping of the desired conversions Language text to be converted Convertextract app (read the post for installation!)What are the motivations behind this technology?As a Student Intern on the NRC’s Indigenous Language Technology (ILT) project, I was approached by the Kwak̓wala Corpus Collection group to help create a systemic way to streamline the quality control process for their ELAN annotation data. Having many different people with many different orthographic conventions (i. e. different ways of writing the same thing) all working on annotating Kwak̓wala language data had resulted in inconsistencies. For example, there was four ways that people were writing t̓s:  t’s, t̕s, ts̓, ts’So, I added mappings in the g2p library that took the alternative forms and streamlined them therefore producing only one form in the output. Then I added support for ELAN files in the Convertextract library, so that the process became automated. Aidan Pine then turned Convertextract into an app! How to use the new Convertextract app for ‘quality control’ of ELAN annotationsConvertextract, created by Aidan Pine, is a python library which extracts text data and finds/replaces specific text based on arbitrary correspondences. Until now, only basic CLI (Command Line Interface) was supported. Using Convertextract in the CLI allowed the user to convert a file based on pre-existing Mappings in the g2p library or based on a custom Mapping (not described here). However, the downside is that some programming knowledge is needed to use the CLI. The latest update now includes a GUI (Graphical User Interface) in the form of an app (for Mac computers only). The app makes Convertextract more accessible for non-programmers. 1. G2P mapping: Convertextract will carry out the streamlining for you, but it has to know what to convert. The g2p Mapping is this roadmap. See the section What you need to know to understand this post for more information on how to see if your language is supported. 2. Language data: You language data must be in one of the supported file formats. The most recent addition is . eaf files, which allows ELAN annotations to be used!For a full list of supported file types click here. 3. Convertextract application: Installation: IMPORTANT The app works on Mac only!!! To download the app: https://github. com/roedoejet/convertextract/releases In your downloads folder, find the . zip file and double click on it to unzip.  Downloads&gt;convertextractRight-click on the application in the dist folder and select Open.  Downloads&gt;convertextract&gt;dist&gt;ConvertextractNote: If you try to double click to open the app, you will get a security message. Right-clicking to open will allow you to override the security message. Using the app: This is what the app looks like when you open it.  All you have to do is add your language data, choose the encoding (usually ‘utf-8’ should suffice), and pick your g2p mapping!The output will be exported as a copy of the input file + _converted. ext in the filename. Example caseWhen typing, there is more than one way to write k̓ in the Kwak̓wala language. Convertextract takes all of these possibilities and generates one output for the sake of consistency. I used the following inputs for Convertextract:  Encoding: utf-8 Input_language: kwk-umista  Output_language: kwk-umista-conPerforming ‘quality control’           Input language   Output language         Language code   kwk-umista   kwk-umista-con       Sample text   kwak’wala   kwak̓wala           kwak]wala   kwak̓wala   If you need help setting up the app or have any questions at all, please feel free to comment below or send me an email! "
    }, {
    "id": 6,
    "url": "https://blog.mothertongues.org/why-a-new-cree-syllabics-converter/",
    "title": "Why I made yet another Cree syllabics converter",
    "body": "2020/08/07 - The Western Cree languages—Plains Cree, Woods Cree, and Swampy Cree—are written using two systems: one with letters borrowed from theEnglish alphabet, in a system known as the standard Roman orthography (SRO), and ᓀᐦᐃᔭᐏ ᒐᐦᑭᐯᐦᐃᑲᓇ (Cree syllabics). SRO is relatively easy to type on a modern computer, but syllabics are more difficult, because of the lack of a well-established syllabics input layout. It’s easier to just use a converter which, given Cree text in SRO, produces Cree text in syllabics. In this post, I describe my criticisms of the converters that existed prior to July 2018, and introduce syllabics. app—a syllabics converter that I developed in reaction to the former converters. What you need to know to understand this post: For the latter part of this blog post, where I discuss using theconverter in your own project, I assume you know how to use:  npm for installing JavaScript packages; or pip for installing Python packagesIf you don’t care about embedding my converter in your coding project,then there’s no prior technical knowledge needed! What are the freely available transliterators?: A quick Google search will net you at least the following SRO to syllabics transliterators.  The Maskwacîs Plains Cree Syllabic Converter1 The Algonquian Linguistic Atlas Cree Syllabics Converter Syllabics. net’s Plains Cree Syllabics ConverterHowever, none of these transliterators are perfect. The issues: Word final “hk”: In syllabics, a word that ends with an “hk”—or «ᐠ» in syllabics—aresupposed end with «ᕽ» instead. However, this replacement can never occur in the middle of a word. For example, the word “ê-wêpâpîhkêwêpinamâhk” (we (and not you) are setting it swinging), contains both a final “hk” and a “hk” cluster in the middle of the word. Its syllabic transcription is ᐁᐍᐹᐲᐦᑫᐍᐱᐊᒫᕽ. The Algonquian Linguistic Atlas’s converter and syllabics. net’s converter both handle the conversion of “hk” to «ᐠ», without erroneously converting the sequence in the middle of a word. Notably, the community of Maskwacîs does not follow this convention. Therefore, the Maskwacîs Converter produces ᐁ ᐁᐧᐸᐱᐦᑫᐁᐧᐱᓇᒪᐦᐠ, unlike what is expected in other Cree communities. Transliterating non-Cree words: Some transliterators attempt to convert every Latin character, even if it doesn’t make sense. Take the case of “Maskêkosihk Trail”—a road that goes from Edmonton to Enoch Cree Nation. The City of Edmonton unveiled the street sign, and, in the process, they unveiled an embarrassment:     “Maskêkosihk trail” erroneously converted as «ᒪᐢᑫᑯᓯᐦᐠ ᐟrᐊᐃl»   Image source: CBC   Not only does the syllabics transliteration of the sign contain the “hk”cluster as mentioned above,2 but it half-transliterates the English word “trail” into syllabics. The result is that “trail” is rendered as «ᐟrᐊᐃl», which contains Latin characters in the transliteration! In my opinion, an SRO to syllabics transliterator should refuse to transliterate words that do not have the structure of a Cree word. However, all three of the mentioned transliterators do attempt to transliterate “trail” with differing results:3       Maskwacîs Cree Dictionary   ᐟrᐊᐃl       Algonquian Linguistic Atlas   ᐟᕒᐊᐃᐪ       Syllabics. net   ᐟᕒᐊᐃᓬ   Long vowels: Long vowels (êîôâ) are distinct from short vowels (ioa) in Cree. Long vowels are written with a dot above in syllabics. The exception is for “ê” because it is always long; as a result, some writers also drop the diacritic when writing “e” in SRO as well. It’s important to differentiate between long and short vowels, because it makes distinctions between words. For example, nipiy/ᓂᐱᕀ means “water” while nîpiy/ᓃᐱᕀ means “leaf”. However, there is such a thing as “plain” script, where the vowel dots are omitted, and pointed script where the vowels have all dots. Another complication is that the “standard” Roman orthography in practice has multiple conventions for writing long vowels: using a macron (◌̄) and using a circumflex (◌̂). 4 How do the various converters handle long vowel diacritics? The Maskwacîs converter does not produce dots for long vowels at all, however it accepts both macrons and circumflexes as input. The Algonquian Lingustic Atlas’s converter not only produces dots, but supports input in either macrons or circumflexes. The syllabics. net converter does worst of all, handling only macrons for long vowels. It simply spits out characters written with circumflexes. Additionally, it does not handle “ê” without an diacritics, which all other converters do. Other odds and ends: Other issues for syllabics converters include how they deal with dashes, how they deal with combining diacritics, rather than pre-composed characters, and whether they produce the correct Unicode characters for the syllabics rather than very convincing look-alikes. There’s also the sandhi orthographic rule, but honestly, I’m not sure I fully comprehend how to apply this rule myself. Summary: Here’s a breakdown of the previous issues, and whether each transliterator can handle it correctly.           Word-final “hk”   Non-Cree words   Long vowels         Maskwacîs Cree Dictionary   *   ❌   ❌       Algonquian Linguistic Atlas   ✅   ❌   ✅       Syllabics. net   ✅   ❌   ❌   Where’s the source code?: The most pressing issue to me personally is that I cannot find source code for any of these converters! This means that if other people want to incorporate a converter into their own app without an active internet connection, they can’t. They have to either reverse-engineer the converters online, or write their own code to do the conversion. cree-sro-syllabics: an open-source Python and JavaScript library for syllabics conversion: My solution was to create a code library that is free and open source. It is available both for Python and JavaScript, and you can try it out right now! It handles all the issues previously mentioned. Try it with the following test cases:  Maskekosihk trail êwêpâpîhkêwêpinamahk ēwēpâpīhkēwēpinamahk ewepapihkewepinamahkThe source code for cree-sro-syllabics can be found on their respective GitHub repositories:  cree-sro-syllabics for Python cree-sro-syllabics for JavaScriptBut it can also be seamlessly incorporated into a Python project that uses pip by installing it with: 1pip install cree-sro-syllabicsOr, you can use npm to install cree-sro-syllabics in your JavaScript project: 1npm install cree-sro-syllabics --saveOr you can copy-paste the . js file to your project. Use cases: Most folks will just use syllabics. app to convert a few words orsentences of Cree. However, software developers can embed the converter in clever ways in their application. For example, I’ve used the converter in itwêwina — the Plains Cree dictionary. Although the underlying dictionary content is written entirely in SRO, we can present all Cree text in syllabics. In addition, we support searches in syllabics by using cree-sro-syllabics to convert the search string to SRO first, then search our dictionary content. How can you use cree-sro-syllabics?  Note: This blog post has been adapted from a post on Eddie’s blog.       This is the same converter bundled in the Cree Dictionary app.  &#8617;        This may not be a mistake; they could be using Maskwacîs’s conventions, but I’m really not sure.  &#8617;        I strongly suspect the sign designer used the Maskwacîs transliterator to get this result.  &#8617;        Anecdotally, I find that most writers near Edmonton and Maskwacîs prefer circumflexes to macrons; however noted Algonquian linguist Arok Wolvengrey prefers macrons. Heck, Jean Okimāsis writes her surname with a macron! &#8617;    "
    }, {
    "id": 7,
    "url": "https://blog.mothertongues.org/g2p/",
    "title": "Getting from 'a' to 'b' with g2p",
    "body": "2020/08/07 - This blog post describes the background context for a software tool called g2p which is shorthand for ‘Grapheme-to-Phoneme’, but if you don’t know those terms, don’t worry, this post will explain it. Essentially, g2p is a tool for systematically converting between two types of text. Common use cases include converting between a writing system and the phonetic alphabet, between two writing systems for the same language, or between a legacy ‘font-hacked’ writing system and its current Unicode-supported version. What you need to know to understand this post To understand the advanced section, you will need to know some PythonWho is involved with this project? Maintainer (i. e. the person to bug with questions): Aidan Pine Lots of other contributorsWhat are the motivations behind G2P?There are many reasons why you might want to systematically convert between different characters1. Here are a few possible use cases: Use Case #1: Getting the pronunciation from a word’s spelling: Sometimes you want to convert between a language’s writing system (also known as orthography) and its pronunciation. “Letters” in a writing system are usually referred to as “graphemes” and their corresponding meaningful sounds are referred to as “phonemes”; hence “g2p” or “grapheme-to-phoneme”. It gets a little more complicated than that though, because sometimes a grapheme is made of more than one character, as in “th” which can be pronounced unvoiced. ) as in ‘thin’ or voiced as in ‘that’. The International Phonetic Alphabet is not so ambiguous, and writes the ‘th’ in ‘thin’ as θ and the ‘th’ in ‘that’ as ð. Knowing how to convert between the written and spoken form of a language is useful in a variety of computational tasks, but I will describe the usefulness specifically with a project called “ReadAlongs” below. Use Case #2: A language with multiple writing systems: Some languages have two (or more!) different writing systems. Take Cree for example, where you can either write a word in Standard Roman Orthography like “ê-wêpâpîhkêwêpinamâhk” or in Syllabics like ᐁᐍᐹᐲᐦᑫᐍᐱᐊᒫᕽ. My colleague Eddie has a great blog post about a tool he created to convert between the two here. Use Case #3: Converting from legacy writing systems: Some languages historically used ‘font hacks’ to render the characters in their writing system before they were supported standardly on computers. There’s a longer discussion to be had here, but the coles’ notes version is that when computers were gaining popularity, they weren’t typically able to render (ie display) characters outside of the 128 characters supported by the American Standard Code for Information Interchange (ASCII). To get around this, language communities would come up with their own custom fonts (often referred to as ‘font hacks’ or ‘font encodings’) where they would render characters like ‘©’ which existed in ASCII as ‘ǧ’ instead (example taken from the Heiltsuk Doulos font). For more information on this topic, please check out ‘Seeing the Heiltsuk Orthography from Font Encoding through to Unicode’ or ‘Applications and innovations in typeface design for North American Indigenous languages’. How to get from ‘a’ to ‘b’ (or ‘a’ to ‘æ’) with g2pg2p is a Python library2 that helps you convert between different characters based on user-defined rules. The inspiration for how to write these rules was mostly taken from the notion of phonological rewrite rules, which is a common way of describing ‘multi-level’ phonological changes in linguistics. What is meant by that is the idea that a word, like ‘cats’ or ‘dogs’ can have multiple ‘levels’ of representation. For example, you might think of the way that those words are written in English orthography (writing system) as one level. Then, you might think of a general pronunciation for those words, written in the phonetic alphabet, as another level. You could also separate that level into more than one level by having a level each for narrow and broad transcriptions.       Level Name   Word #1   Word #2   Word # 3         Level 1 (orthography)   cat   dog   back       Level 2 (broad IPA)   kæt   dɑɡ   bæk       Level 3 (narrow IPA)   kʰæt   dɑɡ   bæk   Now, just by looking at these three levels, you can probably see some fairly systematic rules here that you could imagine would get you from one level to the next, even if you don’t know the phonetic alphabet by-heart and even if you don’t really know about the English phonology (sound patterns and systems). First of all, it looks like all of the ‘a’ characters in level one turn to ‘æ’, so we might want a rule to express that all instances of ‘a’ turn to /æ/. And, for another example, it looks like between levels 2 and 3, /k/ turns into either [k] or [kʰ] depending on whether it occurs before or after /æ/3. So, with these hypotheses about the rules to transform from one level to another, how do we start translating this into rules for g2p? Basic Rule writing: g2p lets you describe these patterns using an ordered list of rules. Each rule must be defined to have an sequence of one or more input characters and a sequence of zero or more output characters. We can define these rules in g2p either using a tabular, spreadsheet format (csv) or using a format called JavaScript Object Notation or JSON. To actually write these rules along with this blog post, I recommend getting some sort of text editor, like Visual Studio Code. You could also write the spreadsheet-type rules in your favourite spreadsheet editor.       in   out         a   æ   or using JSON: 123456[  {     in :  a ,     out :  æ   }]Both of the above rules capture our first, rule that turns an orthographic ‘a’ into a broad IPA /æ/. You can choose to write your rules in either format, although JSON will offer you slightly more flexibility when writing advanced rules. If we want to write rules that depend on a particular context, we need a couple more columns (csv) or keys (JSON) than just in and out. This is where we use context_before and context_after. So, our second rule from above was to turn /k/ to [kʰ] when the character after /k/ is /æ/. Here, we could write the rules like this:       in   out   context_before   context_after         k   kʰ       æ   or like this using JSON: 1234567[  {     in :  k ,     out :  kʰ ,     context_after :  æ   }]Ok, so how do I actually get started here?: So, you’ve understood the basics of writing rules either described above and you want to actually use them to convert something! This section describes exactly how to do that. The easiest way to write rules quickly is using the G2P Studio web application4. Once landing on the G2P Studio page, you can scroll down to the Custom Rules section and start directly editing the spreadsheet available there. Below is a list of all the rules to capture the transformations between level 1 and level 2 above. There are some rules that we discussed in that section, and some others that might look unfamiliar. For a full description of some of these rules, have a look at the advanced rule-writing section.  Then, you can write some text in the left text-area at the top of the G2P Studio, and g2p will apply your rules and produce the output in the right text area as seen below: You can then click on ‘Export’ under the Custom Rules section to export your rules to a CSV file if you want to save them for later. Mapping configuration: When you combine multiple rules in g2p for a particular purpose, this is called a mapping. In addition to each file containing your rules, you need a configuration file that tells g2p how to process your rules. We write mapping configurations in files titled config. yaml. You will need some sort of text editor, like VS Code in order to edit your configuration file. Here is a basic configuration for your mapping: 123456789mappings: - language_name: English # this is a shared value for all the mappings in this configuration  display_name: English to IPA # this is a 'display name'. It is a user-friendly name for your mapping.   in_lang: eng # This is the code for your language input. By convention in g2p this should contain your language's ISO 639-3 code  out_lang: eng-ipa # This is the code for the output of your mapping. By convention in g2p we suffix -ipa to the in_lang for mappings between an orthography and IPA  type: mapping   authors: # This is a way to keep track of who has contributed to the mapping   - Aidan Pine  mapping: eng_to_ipa. json # This is the path to your mapping file. It should be in the same folder as your config. yaml fileIf you are familiar with yaml, you will see that you can have more than one mapping under the mappings key. So to add another mapping to this file, it would look like this: 1234567891011121314151617mappings: - language_name: English   display_name: English to IPA   in_lang: eng   out_lang: eng-ipa   type: mapping   authors:   - Aidan Pine  mapping: eng_to_ipa. json  - language_name: English  display_name: English IPA to Arpabet  in_lang: eng-ipa   out_lang: eng-arpabet  type: mapping   authors:    - Aidan Pine  mapping: eng_ipa_to_arpabet. json Special settings: You can add extra settings to your configuration file to change the way that g2p interprets your mappings. Below is a list of possible settings and their use. All of the settings keys below must be declared for each individual mapping in your config. yaml and must be declared on the same level as all of the other keys (language_name, in_lang, out_lang etc). These settings can also be set in the G2P Studio instead of in a config. yml file. as_is (default: True)As described in the earlier part of this post, your rules apply in the order you write them. And as described in the advanced section on rule ordering, sometimes this can make your mapping produce unexpected results! If you set your mapping to as_is: false, g2p will sort all of your rules based on the length of the input to the rule, so that rules with longer inputs apply before rules with shorter inputs. This prevents some common ‘bleeding’ rule-ordering relationships described in the rule ordering section. So, if you declared your rules as: 12345678910[  {     in :  a ,     out :  b   },    {     in :  ab ,     out :  c   }]Then, with as_is set to True (the default), you would get ‘bb’ as the output for the input ‘ab’. Whereas with as_is set to False, you would get ‘c’ as the output for the input ‘ab’. 12345678910mappings: - language_name: English   display_name: English to IPA   in_lang: eng   out_lang: eng-ipa   type: mapping  authors:   - Aidan Pine  mapping: eng_to_ipa. json   as_is: false  # &lt;------- Add thiscase_sensitive (default: True)The default is to treat your rules as case sensitive, but setting this to False, will make your rules case insensitive. 12345678910mappings: - language_name: English   display_name: English to IPA   in_lang: eng   out_lang: eng-ipa   type: mapping  authors:   - Aidan Pine  mapping: eng_to_ipa. json   case_sensitive: false  # &lt;------- Add thisescape_special (default: False)As described in the section on regular expressions, you can define rules using ‘special’ characters. By default, these characters are interpreted as ‘special’, but if you want all special characters in your mapping to be interpreted as their actual characters, you can set escape_special to true. 12345678910mappings: - language_name: English   display_name: English to IPA   in_lang: eng   out_lang: eng-ipa   type: mapping  authors:   - Aidan Pine  mapping: eng_to_ipa. json   escape_special: true  # &lt;------- Add thisnorm_form (default: “NFD”)If you’ve never heard of Unicode normalization don’t worry, you’re not alone! But, for writing rules and mappings using g2p, there can be some surprising ‘gotcha’ moments if you don’t choose the right normalization strategy. The basic gist of the problem is that there can be multiple ways to write the same character in Unicode, depending on whether you use ‘combining characters’ to type or not. For example, on some keyboards, you might type ‘é’ by writing an e first and then another keystroke to type the acute accent that sits above it. The Unicode representation for this would likely be \u0065 (e) followed by \u0301 (a combining acute accent), however there is an entirely separate Unicode code point that has these two characters pre-composed (\u00e9). Many fonts will render these two different representations identically and it can be really difficult and confounding as a user if both appear in the same text. Often times find/replace won’t work and frustrating things like that. Luckily, there is a standard for normalizing these differences so that all instances of sequences like \u0065\u0301 would be (NF)Composed into \u00e9, or the opposite direction where all instances of \u00e9 would be (NF)Decomposed into \u0065\u0301. For a more in-depth conversation on this, check out this blog article. 12345678910mappings: - language_name: English   display_name: English to IPA   in_lang: eng   out_lang: eng-ipa   type: mapping  authors:   - Aidan Pine  mapping: eng_to_ipa. json   norm_form:  NFC   # &lt;------- Add your Unicode normalization strategy hereout_delimiter (default: ‘’)Some mappings require that a delimiting character (or characters) be inserted in between when a rule applies. So, using the first example, maybe you want kæt to go to kʰ|æ|t instead of kʰæt. For this, you would set out_delimiter:  |  in your mapping. 12345678910mappings: - language_name: English   display_name: English to IPA   in_lang: eng   out_lang: eng-ipa   type: mapping  authors:   - Aidan Pine  mapping: eng_to_ipa. json   out_delimiter:  |   # &lt;------- Add your delimiter herereverse (default: False)Setting this to reverse will try to reverse the mappings so that all characters defined as out in your mapping become the input characters and vice versa. Except for a few cases, this is unlikely to work very well for advanced mapings. 12345678910mappings: - language_name: English   display_name: English to IPA   in_lang: eng   out_lang: eng-ipa   type: mapping  authors:   - Aidan Pine  mapping: eng_to_ipa. json   reverse: true  # &lt;------- Add thisprevent_feeding (default: False)Let’s say you have the following rules:       in   out         kw   kʷ       k   kʲ   Ordered in the way they are defined, an input of kw will produce kʲʷ and ordered the other way, an input of kw will produce kʲw. Neither of these are correct though! For this mapping, we want kʷ as the output. So, how do we solve this? There is a setting called prevent_feeding which, if set to true, will prevent the output of one rule from being processed by any subsequent rule. As described in rule order this process when one rule provides the context for another rule to apply is called ‘feeding’ and so this setting will prevent that from happening. Note, setting prevent_feeding: true for your whole mapping will do this for every rule. If you just want to prevent feeding for one particular rule, you can write your rules in JSON and add the key to the specific rule you want to prevent feeding for. 1234567891011[  {    in :  kw ,    out :  kʷ ,    prevent_feeding : true  },  {    in :  k ,    out :  kʲ   }]12345678910mappings: - language_name: English   display_name: English to IPA   in_lang: eng   out_lang: eng-ipa   type: mapping  authors:   - Aidan Pine  mapping: eng_to_ipa. json   prevent_feeding: true  # &lt;------- Add thisAdvanced: A deeper dive into writing tricky rules: You may have noticed that the rules described above for converting words like ‘dog’ and ‘cat’ to IPA are woefully incomplete. The real world use cases for g2p often need to account for a lot more messiness than was described in the artificial example above. In fact, for languages like English, g2p is likely not a good solution. The English writing system is notoriously inconsistent, and there already exist a variety of other tools that account for all of the lexical (word-specific) idiosyncracies in deriving the IPA-form from the orthographic form. For many Indigenous languages, the writing system is sufficiently close to the spoken form that g2p is a very appropriate solution. In the following sections, I’ll describe some common problems when writing rules, and how to fix them. Unicode Escape Sequences: Sometimes you need rules to convert from characters that either don’t render very well, or render in a confusing way. In those cases, you can alternatively use Unicode escape sequences. For example, maybe you want to write a rule that converts the standard ASCII ‘g’ to the strict IPA Unicode /ɡ/. As you can likely see on your browser, these characters look very similar, but they’re not! The ASCII ‘g’ is U+0067 and the strict IPA ‘ɡ’ is U+0261. So, you can write a rule as follows:       in   out         \u0067   \u0261   or using JSON: 123456[  {     in :  \u0067 ,     out :  \u0261   }]This is also helpful when you need to write rules between combining characters or other confusable characters. The rule of thumb is, if your rules are clearer using Unicode escape sequences, do it! Otherwise, just use the normal character in place. Rule Ordering: The order of your rules in g2p really matters! This is because some rules can either create or remove the context for other rules to apply. In linguistics, these rule ordering patterns are usually talked about as either feeding, bleeding, counter-feeding, or counter-bleeding relationships. There are potentially valid reasons to want to encode any of these types of relationships in your rules. To illustrate a possible problem, let’s consider a g2p mapping for language that converts ‘a̱’ to ‘ə’ and ‘a’ to ‘æ’. ‘a̱’ is a sequence of a normal a followed by a combining macron below (\u0331). Because \u0331 (‘a̱’) is easily confusable with \u0332 (‘a̲’), in order to follow the rule of thumb for Unicode escape sequences, I’ll write the rules as follows:       in   out         a   æ       a\u0331   ə   Now, assuming an input to this mapping of ‘a̱’ (a\u0331), we would get ‘æ̱’ (æ\u0331) instead of ‘ə’. Why is that? Because the first rule applies and turns ‘a’ into ‘æ’ before the second rule has a chance to apply. This is called a ‘bleeding’ relationship. In order to avoid it, we would need to write our rules as follows:       in   out         a\u0331   ə       a   æ   With this ordering, our input of ‘a̱’ (a\u0331) would turn into ‘ə’ as we expect, and our input of ‘a’ would turn into æ also as expected. Try it out on the G2P Studio if you don’t believe me! Defining sets of characters: Some rules are written with repeating sets of characters that can be tedious to write out. For this, we might want to define certain sets of characters using a variable name. These can be written using special types of mapping files in g2p. For example, consider a series of rules which contextually apply only between vowels. Let’s say as an example of one of those rules, that dd turns to ð when it exists between two vowels. This language has the following vowels in its inventory: a,e,i,o,u,æ,å,ø. You could write the rules like this5:       in   out   context_before   context_after         dd   ð   (a|e|i|o|u|æ|å|ø)   (a|e|i|o|u|æ|å|ø)   But, if there are lots of rules with these vowels, this could get very tedious, not to mention annoying if the characters in the set change at some point. It is also less readable, and leaves the reader of the mapping to infer the meaning of the rule. So, in a separate file, by convention it is usually called abbreviations. csv, you can define a list of sets where each row is a new set. The first column contains the name of the set (by convention this is capitalized), and you can add characters to every following column. So, for example:       variable name                                                                     VOWEL   a   e   i   o   u   æ   å   ø                                   CONSONANT   p   b   t   d   k   g   f   s   h   v   j   r   l   m   n       FRONT   i   e   œ   ø   y                                               BACK   u   o   a                                                   Then, in your configuration, you can add the file to a specific mapping using abbreviations: abbreviations. csv. After adding it to your mapping, you can write the above rule like this instead:       in   out   context_before   context_after         dd   ð   VOWEL   VOWEL   You can also use abbreviations like this in the G2P studio by writing them in the section at the bottom of the page titled ‘Custom Abbreviations’ They will be automatically applied to your custom rules above.  Regular Expressions: Regular expressions are used ubiquitously in programming to do define certain search patterns in text. In fact, this is how g2p rules work! They eventually get compiled into a regular expression too. For the most part, you can add basic regular expressions to your rules Using specific indices: …more to come… Applications: There are number of different software tools that are already making use of g2p. For general purpose use in Python, have a look at this section. G2P is also used extensively in the ReadAlongs project for creating interactive audio/text documents and in Convertextract, a tool for going g2p transformations in Microsoft Office documents while preserving the original document formatting. ReadAlongs: …more to come… Convertextract: Convertextract Advanced: use in Python: …more to come… Advanced: contributing your rules to the main g2p library: You’ve written some cool rules and you want to contribute, that’s awesome! …more to come… Advanced: adding a ‘pre-processing’ mapping: …more to come… Footnotes:       Because the word ‘letter’ usually refers to a character within a specific alphabet or writing system, instead of ‘letter’, I’m going to use the word ‘character’ throughout this post.  &#8617;        A Python ‘library’ is a collection of code &#8617;        Orthographic characters are circumfixed with apostrophes like ‘a’, broad IPA typically uses forward slashes like /k/ and narrow IPA typically uses square brackets like [kʰ] &#8617;        I’m using the free, hobby plan at https://www. heroku. com/ to host it though, so occasionally the server goes to sleep. If you first go to the site and it takes a few seconds to boot up, don’t worry! &#8617;        You’ll notice that the syntax here is a little weird, what the heck are all of those pipes (the up-down things like |) doing there? That’s because I’m using regular expressions to express a OR e OR u etc… For more info, check out the section on regular expressions &#8617;    "
    }, {
    "id": 8,
    "url": "https://blog.mothertongues.org/post-template/",
    "title": "Standard post template",
    "body": "2020/07/31 - This blog post describes what a basic template for a post on this blog should look like. Feel free to just copy past the headers into your post and replace the text! The instructions for each section are italicized, and the answers for this specific blog post are following the italicized text. TL;DRWe recommend having a section at the top that gives an extremely short summary of the post (ideally 2 or 3 sentences). This should be high-level, and shouldn’t assume any technical knowledge. This is a template of a blog post to follow when writing other blog posts - how meta! What you need to know to understand this postYour post should have a list of technical skills that you think are needed to understand the blog post. This will help the reader know if they’ll be able to benefit from reading it or whether they should study up on something first.  Knowledge of writing markdownWho is involved with this project?Beyond the author’s information which will be part of this post, there should be a list of everybody involved with the technology discussed in the post, if applicable. The list of contacts should be clear  Author/Blog Maintainer: Aidan PineWhat is needed to replicate the content in the post?Is the technology or tip you’re describing reproducible? If so, what are the requirements? For example, is it available for any language, given 20 hours of audio data? You will need to follow the steps of becoming an author and writing a post before using this template. What are the motivations behind this project/technology/tip?Was this project funded? By whom? What were the explicit goals of the technology in question, or are they left unstated? Mother Tongues was created to release open-source software for language revitalization and includes tools for dictionaries and [orthography converters][https://github. com/roedoejet/convertextract]. Please read the About section for more information. Main Post &lt;– replace titleHere is where the main post should go - because this is just a template, there’s nothing here! How to add an image to your post:    Place your image in assets/images/. I recommend prefixing your image name with your post title, followed by two dashes. For example, the post title for this very post you are reading right now is post-template. I have an image called ime-development. jpg, so I’ll copy it as assets/images/post-template--ime-development. jpg.     Embed your picture using the {% picture %} tag. In your post,where you want your image, embed it as follows:  1{% picture post-template--ime-development. jpg --alt An early draft storyboard of how to use the IME %}It will produce the following image: The text after the --alt is the text that will show up if the imagedoesn’t load, or the text that screenreader users will hear whenlistening to the blog post. "
    }, {
    "id": 9,
    "url": "https://blog.mothertongues.org/write-a-post/",
    "title": "Write a post",
    "body": "2020/03/17 - Here’s a short tutorial on how to write your first blog post on the official Mother Tongues Blog. This tutorial assumes you’ve already signed up to become an author. Posts on the Mother Tongues Blog are written in Markdown. In order to write a new post, follow the following steps.  In your fork of the Mother Tongues Blog Respository, make sure you’re in the dev. author branch and add a new post to the _posts folder. Your post file name must by slugified. It must start with the date (yyyy-mm-dd) and then the blog post name, 2020-01-15-this-is-a-sample. md.  Add some meta data about the post at the top:  1234567891011---layout: posttitle:  Become an author author: aidancategories: [ Tutorial, Blog ]tags: [ intermediate ]image: assets/images/01. jpgdescription:  Write your own articles for the Mother Tongues Blog featured: falsehidden: false---    Write the content of your post in Markdown. Please have a look at the template for writing accessible posts! When you’re happy with it, Submit a pull requestThanks for contributing! "
    }, {
    "id": 10,
    "url": "https://blog.mothertongues.org/welcome/",
    "title": "Welcome",
    "body": "2020/03/17 - Welcome to the Mother Tongues official blog! Mother Tongues is an organization that releases free and open source tools for language revitalization. Here you’ll find blog posts, tips, tricks and tutorials for developing language technology with a focus on Indigenous languages. Be sure to sign up to our mailing list to keep track of new blog posts and any events. If you’re interested in becoming an author, and you have a GitHub account, please checkout how to become an author and after you’ve signed up, learn how to write a post. "
    }, {
    "id": 11,
    "url": "https://blog.mothertongues.org/become-an-author/",
    "title": "Become an author",
    "body": "2020/03/17 - Do you have a tip you’d like to share? Have you pulled your hair out fixing a bug only to find out that the reason the bug exists is because many mainstream platforms don’t consider less-resourced languages? The Mother Tongues blog is the place to share your tips, tricks, and tutorials for all things related to technology for less-resourced languages. To become an author, you’ll need a GitHub account1. Then, follow these steps:  Fork the Mother Tongues Blog Respository Checkout to the dev. author branch Edit the file labelled _config. yml. * denotes a required value.   1234567891011121314151617authors: AidanPine:  name: Aidan  display_name: Aidan  gravatar: 7623fd3eeb0acbe1084fecc20c3093ae   email: hello@aidanpine. ca  web: https://aidanpine. ca  twitter: https://twitter. com/aidanpine  description:  Lead developer of Mother Tongues.   yourname*:       # This should be your twitter handle   name: YourName*   display_name: YourName*   email: your@email. com*   gravatar: YourGravatarID # this is an md5 hash of your email that you used to sign up for https://en. gravatar. com/ you can either calculate this on the command line, or use an online generator like https://www. md5hashgenerator. com/   web: yoursite. com   twitter: https://twitter. com/yourhandle   description:  Guest Author. YourDescriptionHere     Submit a pull requestThat’s it! Start writing your posts.   Footnotes: 1: Any suggestions for good GitHub tutorials? Leave them in the comments below! "
    }];

var idx = lunr(function () {
    this.ref('id')
    this.field('title')
    this.field('body')

    documents.forEach(function (doc) {
        this.add(doc)
    }, this)
});
function lunr_search(term) {
    document.getElementById('lunrsearchresults').innerHTML = '<ul></ul>';
    if(term) {
        document.getElementById('lunrsearchresults').innerHTML = "<p>Search results for '" + term + "'</p>" + document.getElementById('lunrsearchresults').innerHTML;
        //put results on the screen.
        var results = idx.search(term);
        if(results.length>0){
            //console.log(idx.search(term));
            //if results
            for (var i = 0; i < results.length; i++) {
                // more statements
                var ref = results[i]['ref'];
                var url = documents[ref]['url'];
                var title = documents[ref]['title'];
                var body = documents[ref]['body'].substring(0,160)+'...';
                document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML + "<li class='lunrsearchresult'><a href='" + url + "'><span class='title'>" + title + "</span><br /><span class='body'>"+ body +"</span><br /><span class='url'>"+ url +"</span></a></li>";
            }
        } else {
            document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = "<li class='lunrsearchresult'>No results found...</li>";
        }
    }
    return false;
}

function lunr_search(term) {
    $('#lunrsearchresults').show( 400 );
    $( "body" ).addClass( "modal-open" );
    
    document.getElementById('lunrsearchresults').innerHTML = '<div id="resultsmodal" class="modal fade show d-block"  tabindex="-1" role="dialog" aria-labelledby="resultsmodal"> <div class="modal-dialog shadow-lg" role="document"> <div class="modal-content"> <div class="modal-header" id="modtit"> <button type="button" class="close" id="btnx" data-dismiss="modal" aria-label="Close"> &times; </button> </div> <div class="modal-body"> <ul class="mb-0"> </ul>    </div> <div class="modal-footer"><button id="btnx" type="button" class="btn btn-danger btn-sm" data-dismiss="modal">Close</button></div></div> </div></div>';
    if(term) {
        document.getElementById('modtit').innerHTML = "<h5 class='modal-title'>Search results for '" + term + "'</h5>" + document.getElementById('modtit').innerHTML;
        //put results on the screen.
        var results = idx.search(term);
        if(results.length>0){
            //console.log(idx.search(term));
            //if results
            for (var i = 0; i < results.length; i++) {
                // more statements
                var ref = results[i]['ref'];
                var url = documents[ref]['url'];
                var title = documents[ref]['title'];
                var body = documents[ref]['body'].substring(0,160)+'...';
                document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML + "<li class='lunrsearchresult'><a href='" + url + "'><span class='title'>" + title + "</span><br /><small><span class='body'>"+ body +"</span><br /><span class='url'>"+ url +"</span></small></a></li>";
            }
        } else {
            document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = "<li class='lunrsearchresult'>Sorry, no results found. Close & try a different search!</li>";
        }
    }
    return false;
}
    
$(function() {
    $("#lunrsearchresults").on('click', '#btnx', function () {
        $('#lunrsearchresults').hide( 5 );
        $( "body" ).removeClass( "modal-open" );
    });
});